
Circle_Software_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080057e0  080057e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f0  080058f0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080058f0  080058f0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058f0  080058f0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080058f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000018  08005910  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08005910  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ba1  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026e5  00000000  00000000  00030be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001090  00000000  00000000  000332c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  00034358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018fd8  00000000  00000000  000352b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7a9  00000000  00000000  0004e290  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092034  00000000  00000000  0005ca39  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eea6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000462c  00000000  00000000  000eeae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080057c8 	.word	0x080057c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080057c8 	.word	0x080057c8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <__aeabi_f2uiz>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	d20e      	bcs.n	8000762 <__aeabi_f2uiz+0x22>
 8000744:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000748:	d30b      	bcc.n	8000762 <__aeabi_f2uiz+0x22>
 800074a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000752:	d409      	bmi.n	8000768 <__aeabi_f2uiz+0x28>
 8000754:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2uiz+0x32>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d102      	bne.n	8000778 <__aeabi_f2uiz+0x38>
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_ADC1_Init+0x74>)
 8000792:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <MX_ADC1_Init+0x78>)
 8000794:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_ADC1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_ADC1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_ADC1_Init+0x74>)
 80007aa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_ADC1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_ADC1_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x74>)
 80007be:	f001 fbaf 	bl	8001f20 <HAL_ADC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 faa5 	bl	8000d16 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_ADC1_Init+0x74>)
 80007de:	f001 fc77 	bl	80020d0 <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007e8:	f000 fa95 	bl	8000d16 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000e4 	.word	0x200000e4
 80007f8:	40012400 	.word	0x40012400

080007fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <HAL_ADC_MspInit+0x6c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d121      	bne.n	8000860 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <HAL_ADC_MspInit+0x70>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <HAL_ADC_MspInit+0x70>)
 8000822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_ADC_MspInit+0x70>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_ADC_MspInit+0x70>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <HAL_ADC_MspInit+0x70>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_ADC_MspInit+0x70>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = INPUT_VOLTAGE_FEEDBACK_Pin;
 800084c:	2301      	movs	r3, #1
 800084e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000850:	2303      	movs	r3, #3
 8000852:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(INPUT_VOLTAGE_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <HAL_ADC_MspInit+0x74>)
 800085c:	f001 fe78 	bl	8002550 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40012400 	.word	0x40012400
 800086c:	40021000 	.word	0x40021000
 8000870:	40010800 	.word	0x40010800

08000874 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	4b59      	ldr	r3, [pc, #356]	; (80009f0 <MX_GPIO_Init+0x17c>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a58      	ldr	r2, [pc, #352]	; (80009f0 <MX_GPIO_Init+0x17c>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b56      	ldr	r3, [pc, #344]	; (80009f0 <MX_GPIO_Init+0x17c>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a0:	4b53      	ldr	r3, [pc, #332]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a52      	ldr	r2, [pc, #328]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008a6:	f043 0320 	orr.w	r3, r3, #32
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0320 	and.w	r3, r3, #32
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b4d      	ldr	r3, [pc, #308]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a4c      	ldr	r2, [pc, #304]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b4a      	ldr	r3, [pc, #296]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d0:	4b47      	ldr	r3, [pc, #284]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a46      	ldr	r2, [pc, #280]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008d6:	f043 0308 	orr.w	r3, r3, #8
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b44      	ldr	r3, [pc, #272]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ee:	4841      	ldr	r0, [pc, #260]	; (80009f4 <MX_GPIO_Init+0x180>)
 80008f0:	f001 ff88 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_3_DIR_Pin|MOTOR_4_DIR_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 6102 	mov.w	r1, #2080	; 0x820
 80008fa:	483f      	ldr	r0, [pc, #252]	; (80009f8 <MX_GPIO_Init+0x184>)
 80008fc:	f001 ff82 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_2_DIR_Pin|MOTOR_1_DIR_Pin|MOTOR_6_DIR_Pin|MOTOR_5_DIR_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 414c 	mov.w	r1, #52224	; 0xcc00
 8000906:	483d      	ldr	r0, [pc, #244]	; (80009fc <MX_GPIO_Init+0x188>)
 8000908:	f001 ff7c 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	4833      	ldr	r0, [pc, #204]	; (80009f4 <MX_GPIO_Init+0x180>)
 8000926:	f001 fe13 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_3_Pin|LIMIT_SWITCH_2_Pin|LIMIT_SWITCH_1_Pin;
 800092a:	2386      	movs	r3, #134	; 0x86
 800092c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <MX_GPIO_Init+0x18c>)
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	4619      	mov	r1, r3
 800093c:	482e      	ldr	r0, [pc, #184]	; (80009f8 <MX_GPIO_Init+0x184>)
 800093e:	f001 fe07 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_3_DIR_Pin|MOTOR_4_DIR_Pin;
 8000942:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2302      	movs	r3, #2
 8000952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4619      	mov	r1, r3
 800095a:	4827      	ldr	r0, [pc, #156]	; (80009f8 <MX_GPIO_Init+0x184>)
 800095c:	f001 fdf8 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_2_DIR_Pin|MOTOR_1_DIR_Pin|MOTOR_6_DIR_Pin|MOTOR_5_DIR_Pin;
 8000960:	f44f 434c 	mov.w	r3, #52224	; 0xcc00
 8000964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2302      	movs	r3, #2
 8000970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	4619      	mov	r1, r3
 8000978:	4820      	ldr	r0, [pc, #128]	; (80009fc <MX_GPIO_Init+0x188>)
 800097a:	f001 fde9 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_6_Pin|LIMIT_SWITCH_5_Pin|LIMIT_SWITCH_4_Pin;
 800097e:	f243 0310 	movw	r3, #12304	; 0x3010
 8000982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_GPIO_Init+0x18c>)
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	4619      	mov	r1, r3
 8000992:	481a      	ldr	r0, [pc, #104]	; (80009fc <MX_GPIO_Init+0x188>)
 8000994:	f001 fddc 	bl	8002550 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2007      	movs	r0, #7
 800099e:	f001 fda0 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009a2:	2007      	movs	r0, #7
 80009a4:	f001 fdb9 	bl	800251a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2008      	movs	r0, #8
 80009ae:	f001 fd98 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009b2:	2008      	movs	r0, #8
 80009b4:	f001 fdb1 	bl	800251a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	200a      	movs	r0, #10
 80009be:	f001 fd90 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009c2:	200a      	movs	r0, #10
 80009c4:	f001 fda9 	bl	800251a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2017      	movs	r0, #23
 80009ce:	f001 fd88 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009d2:	2017      	movs	r0, #23
 80009d4:	f001 fda1 	bl	800251a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2028      	movs	r0, #40	; 0x28
 80009de:	f001 fd80 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e2:	2028      	movs	r0, #40	; 0x28
 80009e4:	f001 fd99 	bl	800251a <HAL_NVIC_EnableIRQ>

}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40011000 	.word	0x40011000
 80009f8:	40010800 	.word	0x40010800
 80009fc:	40010c00 	.word	0x40010c00
 8000a00:	10310000 	.word	0x10310000

08000a04 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a0a:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <MX_I2C1_Init+0x54>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a10:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_I2C1_Init+0x58>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a42:	f001 ff0f 	bl	8002864 <HAL_I2C_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a4c:	f000 f963 	bl	8000d16 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000114 	.word	0x20000114
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	000186a0 	.word	0x000186a0

08000a60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <HAL_I2C_MspInit+0x90>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d132      	bne.n	8000ae6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <HAL_I2C_MspInit+0x94>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <HAL_I2C_MspInit+0x94>)
 8000a86:	f043 0308 	orr.w	r3, r3, #8
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_I2C_MspInit+0x94>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0308 	and.w	r3, r3, #8
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU_9250_I2C_SCL_Pin|MPU_9250_I2C_SDA_Pin;
 8000a98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9e:	2312      	movs	r3, #18
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4812      	ldr	r0, [pc, #72]	; (8000af8 <HAL_I2C_MspInit+0x98>)
 8000aae:	f001 fd4f 	bl	8002550 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_I2C_MspInit+0x9c>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <HAL_I2C_MspInit+0x9c>)
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_I2C_MspInit+0x94>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_I2C_MspInit+0x94>)
 8000ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_I2C_MspInit+0x94>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010c00 	.word	0x40010c00
 8000afc:	40010000 	.word	0x40010000

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	b090      	sub	sp, #64	; 0x40
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

/*Test*/
char MPUStatus1[] = "MPU 9250 Connected\n";
 8000b06:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <main+0xe0>)
 8000b08:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000b0c:	461d      	mov	r5, r3
 8000b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b12:	682b      	ldr	r3, [r5, #0]
 8000b14:	6023      	str	r3, [r4, #0]
char MPUStatus2[] = "MPU 9250 Not Connected\n";
 8000b16:	4b33      	ldr	r3, [pc, #204]	; (8000be4 <main+0xe4>)
 8000b18:	f107 0410 	add.w	r4, r7, #16
 8000b1c:	461d      	mov	r5, r3
 8000b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b26:	e884 0003 	stmia.w	r4, {r0, r1}
char MPUStatus3[] = "MPU 9250 Error\n";
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <main+0xe8>)
 8000b2c:	463c      	mov	r4, r7
 8000b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f001 f970 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f85e 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f7ff fe9a 	bl	8000874 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b40:	f7ff ff60 	bl	8000a04 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000b44:	f000 ff92 	bl	8001a6c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b48:	f000 fed8 	bl	80018fc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000b4c:	f001 f8ba 	bl	8001cc4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000b50:	f7ff fe16 	bl	8000780 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /*Start Motor Timers*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);		/* Start timer of motor 1*/
 8000b54:	210c      	movs	r1, #12
 8000b56:	4825      	ldr	r0, [pc, #148]	; (8000bec <main+0xec>)
 8000b58:	f003 fe78 	bl	800484c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		/* Start timer of motor 2*/
 8000b5c:	2108      	movs	r1, #8
 8000b5e:	4823      	ldr	r0, [pc, #140]	; (8000bec <main+0xec>)
 8000b60:	f003 fe74 	bl	800484c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		/* Start timer of motor 3*/
 8000b64:	2100      	movs	r1, #0
 8000b66:	4821      	ldr	r0, [pc, #132]	; (8000bec <main+0xec>)
 8000b68:	f003 fe70 	bl	800484c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		/* Start timer of motor 4*/
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <main+0xf0>)
 8000b70:	f003 fe6c 	bl	800484c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);		/* Start timer of motor 6*/
 8000b74:	2100      	movs	r1, #0
 8000b76:	481e      	ldr	r0, [pc, #120]	; (8000bf0 <main+0xf0>)
 8000b78:	f003 fe68 	bl	800484c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);		/* Start timer of motor 5*/
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	481c      	ldr	r0, [pc, #112]	; (8000bf0 <main+0xf0>)
 8000b80:	f003 fe64 	bl	800484c <HAL_TIM_PWM_Start>


  /*Initialize Inertial Measurement Unit*/
  MPU9250Init();
 8000b84:	f000 f98c 	bl	8000ea0 <MPU9250Init>
  AK8963Init();
 8000b88:	f000 fa0e 	bl	8000fa8 <AK8963Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  bool MPU9250Status = MPU9250IsConnected();
 8000b8c:	f000 f8c8 	bl	8000d20 <MPU9250IsConnected>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	  if (MPU9250Status == true)
 8000b96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d007      	beq.n	8000bae <main+0xae>
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t *)MPUStatus1, sizeof(MPUStatus1),100);
 8000b9e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ba2:	2364      	movs	r3, #100	; 0x64
 8000ba4:	2214      	movs	r2, #20
 8000ba6:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <main+0xf4>)
 8000ba8:	f004 fc6c 	bl	8005484 <HAL_UART_Transmit>
 8000bac:	e014      	b.n	8000bd8 <main+0xd8>
	  }

	  else if (MPU9250Status == false)
 8000bae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bb2:	f083 0301 	eor.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d007      	beq.n	8000bcc <main+0xcc>
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t *)MPUStatus2, sizeof(MPUStatus2),100);
 8000bbc:	f107 0110 	add.w	r1, r7, #16
 8000bc0:	2364      	movs	r3, #100	; 0x64
 8000bc2:	2218      	movs	r2, #24
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <main+0xf4>)
 8000bc6:	f004 fc5d 	bl	8005484 <HAL_UART_Transmit>
 8000bca:	e005      	b.n	8000bd8 <main+0xd8>
	  }

	  else
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t *)MPUStatus3, sizeof(MPUStatus3),100);
 8000bcc:	4639      	mov	r1, r7
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	2210      	movs	r2, #16
 8000bd2:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <main+0xf4>)
 8000bd4:	f004 fc56 	bl	8005484 <HAL_UART_Transmit>
	  }




	  HAL_Delay(100);
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f001 f97f 	bl	8001edc <HAL_Delay>
  {
 8000bde:	e7d5      	b.n	8000b8c <main+0x8c>
 8000be0:	080057e0 	.word	0x080057e0
 8000be4:	080057f4 	.word	0x080057f4
 8000be8:	0800580c 	.word	0x0800580c
 8000bec:	2000016c 	.word	0x2000016c
 8000bf0:	200001b4 	.word	0x200001b4
 8000bf4:	200001fc 	.word	0x200001fc

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b094      	sub	sp, #80	; 0x50
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c02:	2228      	movs	r2, #40	; 0x28
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 fdd5 	bl	80057b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c36:	2301      	movs	r3, #1
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 f882 	bl	8003d58 <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c5a:	f000 f85c 	bl	8000d16 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	230f      	movs	r3, #15
 8000c60:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 faec 	bl	8004258 <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c86:	f000 f846 	bl	8000d16 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c92:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fc7a 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ca2:	f000 f838 	bl	8000d16 <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3750      	adds	r7, #80	; 0x50
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_GPIO_EXTI_Callback>:
	__NOP();
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)			/*Callback Function for all the external interrupt functions for limit switches 1-6*/
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	2b10      	cmp	r3, #16
 8000cbc:	d01b      	beq.n	8000cf6 <HAL_GPIO_EXTI_Callback+0x48>
 8000cbe:	2b10      	cmp	r3, #16
 8000cc0:	dc04      	bgt.n	8000ccc <HAL_GPIO_EXTI_Callback+0x1e>
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_EXTI_Callback+0x40>
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	d00d      	beq.n	8000ce6 <HAL_GPIO_EXTI_Callback+0x38>
					  break;

	case GPIO_PIN_13: LimitSwitchStateDetect(6)	;		/* Limit Switch 6 State Update */
					  break;

	default: 		  break;
 8000cca:	e020      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	switch(GPIO_Pin)
 8000ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cd0:	d015      	beq.n	8000cfe <HAL_GPIO_EXTI_Callback+0x50>
 8000cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd6:	d016      	beq.n	8000d06 <HAL_GPIO_EXTI_Callback+0x58>
 8000cd8:	2b80      	cmp	r3, #128	; 0x80
 8000cda:	d000      	beq.n	8000cde <HAL_GPIO_EXTI_Callback+0x30>
	default: 		  break;
 8000cdc:	e017      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_7 : LimitSwitchStateDetect(1);		/* Limit Switch 1 State Update*/
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 f9da 	bl	8001098 <LimitSwitchStateDetect>
					  break;
 8000ce4:	e013      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_2	: LimitSwitchStateDetect(2)	;		/* Limit Switch 2 State Update */
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f000 f9d6 	bl	8001098 <LimitSwitchStateDetect>
					  break;
 8000cec:	e00f      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_1	: LimitSwitchStateDetect(3)	;		/* Limit Switch 3 State Update */
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f000 f9d2 	bl	8001098 <LimitSwitchStateDetect>
					  break;
 8000cf4:	e00b      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_4 : LimitSwitchStateDetect(4)	;		/* Limit Switch 4 State Update */
 8000cf6:	2004      	movs	r0, #4
 8000cf8:	f000 f9ce 	bl	8001098 <LimitSwitchStateDetect>
					  break;
 8000cfc:	e007      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_12: LimitSwitchStateDetect(5)	;		/* Limit Switch 5 State Update */
 8000cfe:	2005      	movs	r0, #5
 8000d00:	f000 f9ca 	bl	8001098 <LimitSwitchStateDetect>
					  break;
 8000d04:	e003      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_13: LimitSwitchStateDetect(6)	;		/* Limit Switch 6 State Update */
 8000d06:	2006      	movs	r0, #6
 8000d08:	f000 f9c6 	bl	8001098 <LimitSwitchStateDetect>
					  break;
 8000d0c:	bf00      	nop

	}
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x6>
	...

08000d20 <MPU9250IsConnected>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com		Basic function using HAL_I2C_IsDeviceReady function
*/

bool  MPU9250IsConnected()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1,MPU9250_ADDRESS,MPU9250_I2C_COMM_CHECK_TRY, MPU9250_I2C_COMM_CHECK_TIMEOUT) == HAL_OK)
 8000d24:	230a      	movs	r3, #10
 8000d26:	2201      	movs	r2, #1
 8000d28:	21d0      	movs	r1, #208	; 0xd0
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MPU9250IsConnected+0x20>)
 8000d2c:	f002 fb24 	bl	8003378 <HAL_I2C_IsDeviceReady>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <MPU9250IsConnected+0x1a>
		{
			return true;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <MPU9250IsConnected+0x1c>
		}
	else
		{
			return false;
 8000d3a:	2300      	movs	r3, #0
		}

}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000114 	.word	0x20000114

08000d44 <I2CWrite>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com		Basic routine using HAL_I2C_Mem_Write function
*/

static void I2CWrite(uint8_t *data,uint8_t device_address ,uint8_t write_address , uint16_t num_bytes)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af04      	add	r7, sp, #16
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	4611      	mov	r1, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	4603      	mov	r3, r0
 8000d54:	70fb      	strb	r3, [r7, #3]
 8000d56:	460b      	mov	r3, r1
 8000d58:	70bb      	strb	r3, [r7, #2]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	803b      	strh	r3, [r7, #0]
	MPUReturnStatus = HAL_I2C_Mem_Write(&hi2c1, device_address, write_address, I2C_MEMADD_SIZE_8BIT, data, num_bytes, HAL_MAX_DELAY);
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	b299      	uxth	r1, r3
 8000d62:	78bb      	ldrb	r3, [r7, #2]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	883b      	ldrh	r3, [r7, #0]
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2301      	movs	r3, #1
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <I2CWrite+0x48>)
 8000d78:	f002 fa04 	bl	8003184 <HAL_I2C_Mem_Write>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <I2CWrite+0x4c>)
 8000d82:	701a      	strb	r2, [r3, #0]

	/*Insert Error Handling Routine*/


}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000114 	.word	0x20000114
 8000d90:	20000168 	.word	0x20000168

08000d94 <I2CRead>:
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com		Basic routine using HAL_I2C_Master_Transmit
 * 	  																			and HAL_I2C_Master_Receive function
*/

static void I2CRead(uint8_t *data_recieve_buffer,uint8_t device_address ,uint8_t read_address, uint16_t num_bytes_to_read)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	4611      	mov	r1, r2
 8000da0:	461a      	mov	r2, r3
 8000da2:	4603      	mov	r3, r0
 8000da4:	70fb      	strb	r3, [r7, #3]
 8000da6:	460b      	mov	r3, r1
 8000da8:	70bb      	strb	r3, [r7, #2]
 8000daa:	4613      	mov	r3, r2
 8000dac:	803b      	strh	r3, [r7, #0]

	uint8_t data_send = read_address;
 8000dae:	78bb      	ldrb	r3, [r7, #2]
 8000db0:	73fb      	strb	r3, [r7, #15]

	/*Transmit the register address(to be read) in the MPU 9250*/
	MPUReturnStatus = HAL_I2C_Master_Transmit(&hi2c1 , device_address, &data_send , 1 , HAL_MAX_DELAY);
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	b299      	uxth	r1, r3
 8000db6:	f107 020f 	add.w	r2, r7, #15
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <I2CRead+0x64>)
 8000dc4:	f001 fe86 	bl	8002ad4 <HAL_I2C_Master_Transmit>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <I2CRead+0x68>)
 8000dce:	701a      	strb	r2, [r3, #0]

	/*Insert Error Handling Routine*/


	/* Recieve data in the register in MPU9250 and store it in data_recieve_buffer*/
	MPUReturnStatus = HAL_I2C_Master_Receive(&hi2c1 , device_address, data_recieve_buffer, num_bytes_to_read , HAL_MAX_DELAY);
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	b299      	uxth	r1, r3
 8000dd4:	883a      	ldrh	r2, [r7, #0]
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <I2CRead+0x64>)
 8000de2:	f001 ff75 	bl	8002cd0 <HAL_I2C_Master_Receive>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <I2CRead+0x68>)
 8000dec:	701a      	strb	r2, [r3, #0]

}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000114 	.word	0x20000114
 8000dfc:	20000168 	.word	0x20000168

08000e00 <WriteMPURegister>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void WriteMPURegister(uint8_t register_address , uint8_t data)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	460a      	mov	r2, r1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	71bb      	strb	r3, [r7, #6]
	I2CWrite(&data,MPU9250_ADDRESS,register_address, sizeof(data));
 8000e10:	79fa      	ldrb	r2, [r7, #7]
 8000e12:	1db8      	adds	r0, r7, #6
 8000e14:	2301      	movs	r3, #1
 8000e16:	21d0      	movs	r1, #208	; 0xd0
 8000e18:	f7ff ff94 	bl	8000d44 <I2CWrite>
	HAL_Delay(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f001 f85d 	bl	8001edc <HAL_Delay>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <ReadMPURegister>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void ReadMPURegister(uint8_t register_address , uint8_t* data_buffer, uint8_t data_size)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	6039      	str	r1, [r7, #0]
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	4613      	mov	r3, r2
 8000e38:	71bb      	strb	r3, [r7, #6]
	I2CRead(data_buffer ,MPU9250_ADDRESS	 ,register_address, data_size);
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	79fa      	ldrb	r2, [r7, #7]
 8000e40:	21d0      	movs	r1, #208	; 0xd0
 8000e42:	6838      	ldr	r0, [r7, #0]
 8000e44:	f7ff ffa6 	bl	8000d94 <I2CRead>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <WriteAK8963Register>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void WriteAK8963Register(uint8_t register_address , uint8_t data)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	71bb      	strb	r3, [r7, #6]
	I2CWrite(&data,AK8963_ADDRESS,register_address, sizeof(data));
 8000e60:	79fa      	ldrb	r2, [r7, #7]
 8000e62:	1db8      	adds	r0, r7, #6
 8000e64:	2301      	movs	r3, #1
 8000e66:	2118      	movs	r1, #24
 8000e68:	f7ff ff6c 	bl	8000d44 <I2CWrite>
	HAL_Delay(10);
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f001 f835 	bl	8001edc <HAL_Delay>

}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <ReadAK8963Register>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void ReadAK8963Register(uint8_t register_address, uint8_t* data_buffer, uint8_t data_size)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	6039      	str	r1, [r7, #0]
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	4613      	mov	r3, r2
 8000e88:	71bb      	strb	r3, [r7, #6]

	I2CRead(data_buffer ,AK8963_ADDRESS,register_address, data_size);
 8000e8a:	79bb      	ldrb	r3, [r7, #6]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	79fa      	ldrb	r2, [r7, #7]
 8000e90:	2118      	movs	r1, #24
 8000e92:	6838      	ldr	r0, [r7, #0]
 8000e94:	f7ff ff7e 	bl	8000d94 <I2CRead>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <MPU9250Init>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void MPU9250Init()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
	WriteMPURegister(PWR_MGMT_1,0x00);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	206b      	movs	r0, #107	; 0x6b
 8000eaa:	f7ff ffa9 	bl	8000e00 <WriteMPURegister>
	HAL_Delay(100);
 8000eae:	2064      	movs	r0, #100	; 0x64
 8000eb0:	f001 f814 	bl	8001edc <HAL_Delay>
	WriteMPURegister(PWR_MGMT_1,0x01);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	206b      	movs	r0, #107	; 0x6b
 8000eb8:	f7ff ffa2 	bl	8000e00 <WriteMPURegister>
	HAL_Delay(200);
 8000ebc:	20c8      	movs	r0, #200	; 0xc8
 8000ebe:	f001 f80d 	bl	8001edc <HAL_Delay>
	WriteMPURegister(CONFIG,0x03);
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	201a      	movs	r0, #26
 8000ec6:	f7ff ff9b 	bl	8000e00 <WriteMPURegister>
	WriteMPURegister(SMPLRT_DIV,0x04);
 8000eca:	2104      	movs	r1, #4
 8000ecc:	2019      	movs	r0, #25
 8000ece:	f7ff ff97 	bl	8000e00 <WriteMPURegister>

	/*Set Gyroscope Scale Configuration*/
	uint8_t gyro_config = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	70fb      	strb	r3, [r7, #3]
	uint8_t* gyro_config_addr = &gyro_config;
 8000ed6:	1cfb      	adds	r3, r7, #3
 8000ed8:	60fb      	str	r3, [r7, #12]
	ReadMPURegister(GYRO_CONFIG,gyro_config_addr,sizeof(gyro_config));
 8000eda:	2201      	movs	r2, #1
 8000edc:	68f9      	ldr	r1, [r7, #12]
 8000ede:	201b      	movs	r0, #27
 8000ee0:	f7ff ffa3 	bl	8000e2a <ReadMPURegister>
	gyro_config = gyro_config &~0x02;
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	f023 0302 	bic.w	r3, r3, #2
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	70fb      	strb	r3, [r7, #3]
	gyro_config = gyro_config &~0x18;
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	f023 0318 	bic.w	r3, r3, #24
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	70fb      	strb	r3, [r7, #3]
	gyro_config = gyro_config|GScale << 3;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MPU9250Init+0x100>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	70fb      	strb	r3, [r7, #3]
	/*gyro_config = gyro_config|0x00;*/
	WriteMPURegister(GYRO_CONFIG,gyro_config);
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	201b      	movs	r0, #27
 8000f12:	f7ff ff75 	bl	8000e00 <WriteMPURegister>

	/*Set Accelerometer Scale Configuration*/
	uint8_t accel_config = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	70bb      	strb	r3, [r7, #2]
	uint8_t* accel_config_addr = &accel_config;
 8000f1a:	1cbb      	adds	r3, r7, #2
 8000f1c:	60bb      	str	r3, [r7, #8]
	ReadMPURegister(ACCEL_CONFIG,accel_config_addr,sizeof(accel_config));
 8000f1e:	2201      	movs	r2, #1
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	201c      	movs	r0, #28
 8000f24:	f7ff ff81 	bl	8000e2a <ReadMPURegister>
	/*accel_config = accel_config &~0xE0;*/
	accel_config = accel_config &~0x18;
 8000f28:	78bb      	ldrb	r3, [r7, #2]
 8000f2a:	f023 0318 	bic.w	r3, r3, #24
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	70bb      	strb	r3, [r7, #2]
	accel_config = accel_config | AScale << 3;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MPU9250Init+0x104>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	78bb      	ldrb	r3, [r7, #2]
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	70bb      	strb	r3, [r7, #2]
	WriteMPURegister(ACCEL_CONFIG,accel_config);
 8000f46:	78bb      	ldrb	r3, [r7, #2]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	201c      	movs	r0, #28
 8000f4c:	f7ff ff58 	bl	8000e00 <WriteMPURegister>

	/*Set accelerometer sample rate configuration*/
	uint8_t accel_config_2 = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	707b      	strb	r3, [r7, #1]
	uint8_t* accel_config_2_addr = &accel_config_2;
 8000f54:	1c7b      	adds	r3, r7, #1
 8000f56:	607b      	str	r3, [r7, #4]
	ReadMPURegister(ACCEL_CONFIG2,accel_config_2_addr,sizeof(accel_config_2));
 8000f58:	2201      	movs	r2, #1
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	201d      	movs	r0, #29
 8000f5e:	f7ff ff64 	bl	8000e2a <ReadMPURegister>
	accel_config = accel_config_2 &~0x0F;
 8000f62:	787b      	ldrb	r3, [r7, #1]
 8000f64:	f023 030f 	bic.w	r3, r3, #15
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	70bb      	strb	r3, [r7, #2]
	accel_config = accel_config_2 | 0x03;
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	f043 0303 	orr.w	r3, r3, #3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	70bb      	strb	r3, [r7, #2]
	WriteMPURegister(ACCEL_CONFIG2,accel_config_2);
 8000f76:	787b      	ldrb	r3, [r7, #1]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	201d      	movs	r0, #29
 8000f7c:	f7ff ff40 	bl	8000e00 <WriteMPURegister>

	WriteMPURegister(INT_PIN_CFG,0x22);
 8000f80:	2122      	movs	r1, #34	; 0x22
 8000f82:	2037      	movs	r0, #55	; 0x37
 8000f84:	f7ff ff3c 	bl	8000e00 <WriteMPURegister>
	WriteMPURegister(INT_ENABLE,0x01);
 8000f88:	2101      	movs	r1, #1
 8000f8a:	2038      	movs	r0, #56	; 0x38
 8000f8c:	f7ff ff38 	bl	8000e00 <WriteMPURegister>
	HAL_Delay(100);
 8000f90:	2064      	movs	r0, #100	; 0x64
 8000f92:	f000 ffa3 	bl	8001edc <HAL_Delay>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000041 	.word	0x20000041
 8000fa4:	20000040 	.word	0x20000040

08000fa8 <AK8963Init>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void AK8963Init()
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	uint8_t raw_data[3];
	WriteAK8963Register( AK8963_CNTL,0x00);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f7ff ff4d 	bl	8000e50 <WriteAK8963Register>
	HAL_Delay(100);
 8000fb6:	2064      	movs	r0, #100	; 0x64
 8000fb8:	f000 ff90 	bl	8001edc <HAL_Delay>
	WriteAK8963Register( AK8963_CNTL,0x0F);
 8000fbc:	210f      	movs	r1, #15
 8000fbe:	200a      	movs	r0, #10
 8000fc0:	f7ff ff46 	bl	8000e50 <WriteAK8963Register>
	HAL_Delay(100);
 8000fc4:	2064      	movs	r0, #100	; 0x64
 8000fc6:	f000 ff89 	bl	8001edc <HAL_Delay>
	ReadAK8963Register(AK8963_ASAX, &raw_data[0], sizeof(raw_data));
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2203      	movs	r2, #3
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2010      	movs	r0, #16
 8000fd2:	f7ff ff52 	bl	8000e7a <ReadAK8963Register>

	MagBiasFactory[0] = (float)(raw_data[0] - 128)/256.0f +1.0f;
 8000fd6:	793b      	ldrb	r3, [r7, #4]
 8000fd8:	3b80      	subs	r3, #128	; 0x80
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f970 	bl	80002c0 <__aeabi_i2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa72 	bl	80004d0 <__aeabi_fdiv>
 8000fec:	4603      	mov	r3, r0
 8000fee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f8b0 	bl	8000158 <__addsf3>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <AK8963Init+0xe4>)
 8000ffe:	601a      	str	r2, [r3, #0]
	MagBiasFactory[1] = (float)(raw_data[1] - 128)/256.0f +1.0f;
 8001000:	797b      	ldrb	r3, [r7, #5]
 8001002:	3b80      	subs	r3, #128	; 0x80
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f95b 	bl	80002c0 <__aeabi_i2f>
 800100a:	4603      	mov	r3, r0
 800100c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa5d 	bl	80004d0 <__aeabi_fdiv>
 8001016:	4603      	mov	r3, r0
 8001018:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f89b 	bl	8000158 <__addsf3>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <AK8963Init+0xe4>)
 8001028:	605a      	str	r2, [r3, #4]
	MagBiasFactory[2] = (float)(raw_data[2] - 128)/256.0f +1.0f;
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	3b80      	subs	r3, #128	; 0x80
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f946 	bl	80002c0 <__aeabi_i2f>
 8001034:	4603      	mov	r3, r0
 8001036:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa48 	bl	80004d0 <__aeabi_fdiv>
 8001040:	4603      	mov	r3, r0
 8001042:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f886 	bl	8000158 <__addsf3>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <AK8963Init+0xe4>)
 8001052:	609a      	str	r2, [r3, #8]

	WriteAK8963Register(AK8963_CNTL,0x00);
 8001054:	2100      	movs	r1, #0
 8001056:	200a      	movs	r0, #10
 8001058:	f7ff fefa 	bl	8000e50 <WriteAK8963Register>
	HAL_Delay(100);
 800105c:	2064      	movs	r0, #100	; 0x64
 800105e:	f000 ff3d 	bl	8001edc <HAL_Delay>

	WriteAK8963Register(AK8963_CNTL,MScale <<4|MMode);
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <AK8963Init+0xe8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	b25a      	sxtb	r2, r3
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <AK8963Init+0xec>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b25b      	sxtb	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	200a      	movs	r0, #10
 800107a:	f7ff fee9 	bl	8000e50 <WriteAK8963Register>
	HAL_Delay(100);
 800107e:	2064      	movs	r0, #100	; 0x64
 8001080:	f000 ff2c 	bl	8001edc <HAL_Delay>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000034 	.word	0x20000034
 8001090:	20000001 	.word	0x20000001
 8001094:	20000000 	.word	0x20000000

08001098 <LimitSwitchStateDetect>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-03-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void LimitSwitchStateDetect(uint32_t limit_switch_index)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	switch (LimitSwitchState[limit_switch_index -1]) /*Every time the function is triggered from the external interrupt, the updated value is the opposite of the old value*/
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <LimitSwitchStateDetect+0x3c>)
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <LimitSwitchStateDetect+0x1a>
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d006      	beq.n	80010be <LimitSwitchStateDetect+0x26>
						  	  	  	  	  	 break;

						  	  	  case HIGH: LimitSwitchState[limit_switch_index -1] = LOW;
						  	  	  	  	  	 break;

						  	  	  default: break;
 80010b0:	e00b      	b.n	80010ca <LimitSwitchStateDetect+0x32>
						  	  	  case LOW:  LimitSwitchState[limit_switch_index -1] = HIGH;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <LimitSwitchStateDetect+0x3c>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	54d1      	strb	r1, [r2, r3]
						  	  	  	  	  	 break;
 80010bc:	e005      	b.n	80010ca <LimitSwitchStateDetect+0x32>
						  	  	  case HIGH: LimitSwitchState[limit_switch_index -1] = LOW;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <LimitSwitchStateDetect+0x3c>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	54d1      	strb	r1, [r2, r3]
						  	  	  	  	  	 break;
 80010c8:	bf00      	nop
								  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	200000d4 	.word	0x200000d4

080010d8 <MotorRotateAbsolute>:
 * Called by					:
 *  Notes			 			: This function is being executed in the Systick handler for this project. However if you use this in another loop, please update MOTOR_LOOP_UPDATE_FREQUENCY configuration parameter
*/

static void MotorRotateAbsolute(uint8_t motor_index)
{	/*Declare Local variables*/
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	float32_t delta_motor_angle = 0;
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]

	switch(MotorTagetAngleSet[motor_index -1])
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	4aa6      	ldr	r2, [pc, #664]	; (8001388 <MotorRotateAbsolute+0x2b0>)
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <MotorRotateAbsolute+0x22>
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d07c      	beq.n	80011f2 <MotorRotateAbsolute+0x11a>
					}
				}

				break;

	default :  break;
 80010f8:	e142      	b.n	8001380 <MotorRotateAbsolute+0x2a8>
				MotorTargetStepCount[motor_index -1] = (uint32_t)(MotorTargetAngle[motor_index-1]/MOTOR_STEP_ANGLE);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	4aa3      	ldr	r2, [pc, #652]	; (800138c <MotorRotateAbsolute+0x2b4>)
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	49a2      	ldr	r1, [pc, #648]	; (8001390 <MotorRotateAbsolute+0x2b8>)
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f9e2 	bl	80004d0 <__aeabi_fdiv>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	1e5c      	subs	r4, r3, #1
 8001114:	4610      	mov	r0, r2
 8001116:	f7ff fb13 	bl	8000740 <__aeabi_f2uiz>
 800111a:	4602      	mov	r2, r0
 800111c:	4b9d      	ldr	r3, [pc, #628]	; (8001394 <MotorRotateAbsolute+0x2bc>)
 800111e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				delta_motor_angle = MotorTargetAngle[motor_index -1]  - MotorTargetAnglePrevious[motor_index -1];
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	3b01      	subs	r3, #1
 8001126:	4a99      	ldr	r2, [pc, #612]	; (800138c <MotorRotateAbsolute+0x2b4>)
 8001128:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	3b01      	subs	r3, #1
 8001130:	4a99      	ldr	r2, [pc, #612]	; (8001398 <MotorRotateAbsolute+0x2c0>)
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff f80c 	bl	8000154 <__aeabi_fsub>
 800113c:	4603      	mov	r3, r0
 800113e:	60fb      	str	r3, [r7, #12]
				test = delta_motor_angle;
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff fad7 	bl	80006f4 <__aeabi_f2iz>
 8001146:	4603      	mov	r3, r0
 8001148:	b25a      	sxtb	r2, r3
 800114a:	4b94      	ldr	r3, [pc, #592]	; (800139c <MotorRotateAbsolute+0x2c4>)
 800114c:	701a      	strb	r2, [r3, #0]
				if (delta_motor_angle > 0)
 800114e:	f04f 0100 	mov.w	r1, #0
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff fac4 	bl	80006e0 <__aeabi_fcmpgt>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00f      	beq.n	800117e <MotorRotateAbsolute+0xa6>
				  MotorDirection[motor_index-1] = ANGLE_UP;
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	3b01      	subs	r3, #1
 8001162:	4a8f      	ldr	r2, [pc, #572]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 8001164:	2101      	movs	r1, #1
 8001166:	54d1      	strb	r1, [r2, r3]
				  MotorState[motor_index-1] = HIGH;
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a8d      	ldr	r2, [pc, #564]	; (80013a4 <MotorRotateAbsolute+0x2cc>)
 800116e:	2101      	movs	r1, #1
 8001170:	54d1      	strb	r1, [r2, r3]
				  MotorHighStateSetFlag[motor_index -1] = LOW;
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	3b01      	subs	r3, #1
 8001176:	4a8c      	ldr	r2, [pc, #560]	; (80013a8 <MotorRotateAbsolute+0x2d0>)
 8001178:	2100      	movs	r1, #0
 800117a:	54d1      	strb	r1, [r2, r3]
 800117c:	e029      	b.n	80011d2 <MotorRotateAbsolute+0xfa>
				else if (delta_motor_angle < 0)
 800117e:	f04f 0100 	mov.w	r1, #0
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff fa8e 	bl	80006a4 <__aeabi_fcmplt>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00f      	beq.n	80011ae <MotorRotateAbsolute+0xd6>
					MotorDirection[motor_index-1] = ANGLE_DOWN;
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	3b01      	subs	r3, #1
 8001192:	4a83      	ldr	r2, [pc, #524]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 8001194:	21ff      	movs	r1, #255	; 0xff
 8001196:	54d1      	strb	r1, [r2, r3]
					MotorState[motor_index-1] = HIGH;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	3b01      	subs	r3, #1
 800119c:	4a81      	ldr	r2, [pc, #516]	; (80013a4 <MotorRotateAbsolute+0x2cc>)
 800119e:	2101      	movs	r1, #1
 80011a0:	54d1      	strb	r1, [r2, r3]
					MotorHighStateSetFlag[motor_index -1] = LOW;
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	4a80      	ldr	r2, [pc, #512]	; (80013a8 <MotorRotateAbsolute+0x2d0>)
 80011a8:	2100      	movs	r1, #0
 80011aa:	54d1      	strb	r1, [r2, r3]
 80011ac:	e011      	b.n	80011d2 <MotorRotateAbsolute+0xfa>
				else if (delta_motor_angle == 0)
 80011ae:	f04f 0100 	mov.w	r1, #0
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff fa6c 	bl	8000690 <__aeabi_fcmpeq>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d009      	beq.n	80011d2 <MotorRotateAbsolute+0xfa>
					MotorDirection[motor_index-1] = ANGLE_HOLD;
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4a77      	ldr	r2, [pc, #476]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 80011c4:	2100      	movs	r1, #0
 80011c6:	54d1      	strb	r1, [r2, r3]
					MotorState[motor_index-1] = LOW;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	4a75      	ldr	r2, [pc, #468]	; (80013a4 <MotorRotateAbsolute+0x2cc>)
 80011ce:	2100      	movs	r1, #0
 80011d0:	54d1      	strb	r1, [r2, r3]
				MotorTargetAnglePrevious[motor_index -1] = MotorTargetAngle[motor_index -1];
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	1e5a      	subs	r2, r3, #1
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	3b01      	subs	r3, #1
 80011da:	496c      	ldr	r1, [pc, #432]	; (800138c <MotorRotateAbsolute+0x2b4>)
 80011dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011e0:	496d      	ldr	r1, [pc, #436]	; (8001398 <MotorRotateAbsolute+0x2c0>)
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				MotorTagetAngleSet[motor_index -1] = TRUE;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	4a67      	ldr	r2, [pc, #412]	; (8001388 <MotorRotateAbsolute+0x2b0>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	54d1      	strb	r1, [r2, r3]
				break;
 80011f0:	e0c6      	b.n	8001380 <MotorRotateAbsolute+0x2a8>
				if (MotorTargetAngle[motor_index -1] != MotorTargetAnglePrevious[motor_index -1]) /*Condition for target angle change*/
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	4a65      	ldr	r2, [pc, #404]	; (800138c <MotorRotateAbsolute+0x2b4>)
 80011f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	3b01      	subs	r3, #1
 8001200:	4a65      	ldr	r2, [pc, #404]	; (8001398 <MotorRotateAbsolute+0x2c0>)
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fa42 	bl	8000690 <__aeabi_fcmpeq>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d105      	bne.n	800121e <MotorRotateAbsolute+0x146>
				  MotorTagetAngleSet[motor_index -1] = FALSE;
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	3b01      	subs	r3, #1
 8001216:	4a5c      	ldr	r2, [pc, #368]	; (8001388 <MotorRotateAbsolute+0x2b0>)
 8001218:	2100      	movs	r1, #0
 800121a:	54d1      	strb	r1, [r2, r3]
				  break;
 800121c:	e0b0      	b.n	8001380 <MotorRotateAbsolute+0x2a8>
					switch(MotorDirection[motor_index -1])
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	3b01      	subs	r3, #1
 8001222:	4a5f      	ldr	r2, [pc, #380]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 8001224:	56d3      	ldrsb	r3, [r2, r3]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d03d      	beq.n	80012a6 <MotorRotateAbsolute+0x1ce>
 800122a:	2b01      	cmp	r3, #1
 800122c:	d003      	beq.n	8001236 <MotorRotateAbsolute+0x15e>
 800122e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001232:	d01c      	beq.n	800126e <MotorRotateAbsolute+0x196>
						default		   : break;
 8001234:	e038      	b.n	80012a8 <MotorRotateAbsolute+0x1d0>
						case ANGLE_UP:	 MotorCurrentStepCount[motor_index -1] = MotorCurrentStepCount[motor_index -1] + (MOTOR_PWM_TIMER_FREQUENCY/MOTOR_LOOP_UPDATE_FREQUENCY);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	3b01      	subs	r3, #1
 800123a:	4a5c      	ldr	r2, [pc, #368]	; (80013ac <MotorRotateAbsolute+0x2d4>)
 800123c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	3b01      	subs	r3, #1
 8001244:	3204      	adds	r2, #4
 8001246:	4959      	ldr	r1, [pc, #356]	; (80013ac <MotorRotateAbsolute+0x2d4>)
 8001248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
										 MotorCurrentAngle[motor_index -1] += (MOTOR_PWM_TIMER_FREQUENCY/MOTOR_LOOP_UPDATE_FREQUENCY)*MOTOR_STEP_ANGLE;
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	3b01      	subs	r3, #1
 8001250:	4a57      	ldr	r2, [pc, #348]	; (80013b0 <MotorRotateAbsolute+0x2d8>)
 8001252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	1e5c      	subs	r4, r3, #1
 800125a:	4956      	ldr	r1, [pc, #344]	; (80013b4 <MotorRotateAbsolute+0x2dc>)
 800125c:	4610      	mov	r0, r2
 800125e:	f7fe ff7b 	bl	8000158 <__addsf3>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	4b52      	ldr	r3, [pc, #328]	; (80013b0 <MotorRotateAbsolute+0x2d8>)
 8001268:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
										 break;
 800126c:	e01c      	b.n	80012a8 <MotorRotateAbsolute+0x1d0>
						case ANGLE_DOWN: MotorCurrentStepCount[motor_index -1] = MotorCurrentStepCount[motor_index -1] - (MOTOR_PWM_TIMER_FREQUENCY/MOTOR_LOOP_UPDATE_FREQUENCY);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	3b01      	subs	r3, #1
 8001272:	4a4e      	ldr	r2, [pc, #312]	; (80013ac <MotorRotateAbsolute+0x2d4>)
 8001274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	3b01      	subs	r3, #1
 800127c:	3a04      	subs	r2, #4
 800127e:	494b      	ldr	r1, [pc, #300]	; (80013ac <MotorRotateAbsolute+0x2d4>)
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
										 MotorCurrentAngle[motor_index -1] -= (MOTOR_PWM_TIMER_FREQUENCY/MOTOR_LOOP_UPDATE_FREQUENCY)*MOTOR_STEP_ANGLE;
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	3b01      	subs	r3, #1
 8001288:	4a49      	ldr	r2, [pc, #292]	; (80013b0 <MotorRotateAbsolute+0x2d8>)
 800128a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	1e5c      	subs	r4, r3, #1
 8001292:	4948      	ldr	r1, [pc, #288]	; (80013b4 <MotorRotateAbsolute+0x2dc>)
 8001294:	4610      	mov	r0, r2
 8001296:	f7fe ff5d 	bl	8000154 <__aeabi_fsub>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <MotorRotateAbsolute+0x2d8>)
 80012a0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
										 break;
 80012a4:	e000      	b.n	80012a8 <MotorRotateAbsolute+0x1d0>
						case ANGLE_HOLD: break;
 80012a6:	bf00      	nop
				if (MotorCurrentAngle[motor_index -1] >= MotorTargetAngle[motor_index -1])
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	4a40      	ldr	r2, [pc, #256]	; (80013b0 <MotorRotateAbsolute+0x2d8>)
 80012ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4a35      	ldr	r2, [pc, #212]	; (800138c <MotorRotateAbsolute+0x2b4>)
 80012b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fa05 	bl	80006cc <__aeabi_fcmpge>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d024      	beq.n	8001312 <MotorRotateAbsolute+0x23a>
					switch(MotorDirection[motor_index -1])
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	4a34      	ldr	r2, [pc, #208]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 80012ce:	56d3      	ldrsb	r3, [r2, r3]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d01c      	beq.n	8001310 <MotorRotateAbsolute+0x238>
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d000      	beq.n	80012dc <MotorRotateAbsolute+0x204>
					 default : break;
 80012da:	e01a      	b.n	8001312 <MotorRotateAbsolute+0x23a>
					 case ANGLE_UP:	MotorState[motor_index -1] = LOW;
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	3b01      	subs	r3, #1
 80012e0:	4a30      	ldr	r2, [pc, #192]	; (80013a4 <MotorRotateAbsolute+0x2cc>)
 80012e2:	2100      	movs	r1, #0
 80012e4:	54d1      	strb	r1, [r2, r3]
									MotorTargetAnglePrevious[motor_index -1] = MotorTargetAngle[motor_index -1];
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	1e5a      	subs	r2, r3, #1
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4927      	ldr	r1, [pc, #156]	; (800138c <MotorRotateAbsolute+0x2b4>)
 80012f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012f4:	4928      	ldr	r1, [pc, #160]	; (8001398 <MotorRotateAbsolute+0x2c0>)
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
									MotorDirection[motor_index -1] = ANGLE_HOLD;
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a28      	ldr	r2, [pc, #160]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 8001300:	2100      	movs	r1, #0
 8001302:	54d1      	strb	r1, [r2, r3]
									MotorTagetAngleSet[motor_index -1] = FALSE;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	3b01      	subs	r3, #1
 8001308:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <MotorRotateAbsolute+0x2b0>)
 800130a:	2100      	movs	r1, #0
 800130c:	54d1      	strb	r1, [r2, r3]
									break;
 800130e:	e000      	b.n	8001312 <MotorRotateAbsolute+0x23a>
					 case ANGLE_DOWN: break;
 8001310:	bf00      	nop
				if (MotorCurrentAngle[motor_index -1] <= MotorTargetAngle[motor_index -1])
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	3b01      	subs	r3, #1
 8001316:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <MotorRotateAbsolute+0x2d8>)
 8001318:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	3b01      	subs	r3, #1
 8001320:	4a1a      	ldr	r2, [pc, #104]	; (800138c <MotorRotateAbsolute+0x2b4>)
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff f9c6 	bl	80006b8 <__aeabi_fcmple>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d100      	bne.n	8001334 <MotorRotateAbsolute+0x25c>
				break;
 8001332:	e024      	b.n	800137e <MotorRotateAbsolute+0x2a6>
					switch(MotorDirection[motor_index -1])
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	3b01      	subs	r3, #1
 8001338:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 800133a:	56d3      	ldrsb	r3, [r2, r3]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d002      	beq.n	8001348 <MotorRotateAbsolute+0x270>
 8001342:	2b01      	cmp	r3, #1
 8001344:	d01a      	beq.n	800137c <MotorRotateAbsolute+0x2a4>
					 default : break;
 8001346:	e01a      	b.n	800137e <MotorRotateAbsolute+0x2a6>
					 case ANGLE_DOWN: MotorState[motor_index -1] = LOW;
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	3b01      	subs	r3, #1
 800134c:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <MotorRotateAbsolute+0x2cc>)
 800134e:	2100      	movs	r1, #0
 8001350:	54d1      	strb	r1, [r2, r3]
									  MotorTargetAnglePrevious[motor_index -1] = MotorTargetAngle[motor_index -1];
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	1e5a      	subs	r2, r3, #1
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	3b01      	subs	r3, #1
 800135a:	490c      	ldr	r1, [pc, #48]	; (800138c <MotorRotateAbsolute+0x2b4>)
 800135c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001360:	490d      	ldr	r1, [pc, #52]	; (8001398 <MotorRotateAbsolute+0x2c0>)
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
									  MotorDirection[motor_index -1] = ANGLE_HOLD;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	3b01      	subs	r3, #1
 800136a:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 800136c:	2100      	movs	r1, #0
 800136e:	54d1      	strb	r1, [r2, r3]
									  MotorTagetAngleSet[motor_index -1] = FALSE;
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	3b01      	subs	r3, #1
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <MotorRotateAbsolute+0x2b0>)
 8001376:	2100      	movs	r1, #0
 8001378:	54d1      	strb	r1, [r2, r3]
									  break;
 800137a:	e000      	b.n	800137e <MotorRotateAbsolute+0x2a6>
					 case ANGLE_UP:	break;
 800137c:	bf00      	nop
				break;
 800137e:	bf00      	nop

	}

}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	20000074 	.word	0x20000074
 800138c:	20000044 	.word	0x20000044
 8001390:	3e666666 	.word	0x3e666666
 8001394:	20000094 	.word	0x20000094
 8001398:	2000005c 	.word	0x2000005c
 800139c:	200000da 	.word	0x200000da
 80013a0:	200000c4 	.word	0x200000c4
 80013a4:	20000004 	.word	0x20000004
 80013a8:	200000cc 	.word	0x200000cc
 80013ac:	200000ac 	.word	0x200000ac
 80013b0:	2000007c 	.word	0x2000007c
 80013b4:	3f666666 	.word	0x3f666666

080013b8 <MotorActuate>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-03-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void MotorActuate()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
	for(uint8_t motor_index = 1 ; motor_index <=6 ; motor_index ++)
 80013be:	2301      	movs	r3, #1
 80013c0:	71fb      	strb	r3, [r7, #7]
 80013c2:	e006      	b.n	80013d2 <MotorActuate+0x1a>
	{
		MotorRotateAbsolute(motor_index);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fe86 	bl	80010d8 <MotorRotateAbsolute>
	for(uint8_t motor_index = 1 ; motor_index <=6 ; motor_index ++)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	3301      	adds	r3, #1
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b06      	cmp	r3, #6
 80013d6:	d9f5      	bls.n	80013c4 <MotorActuate+0xc>
	}
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <MotorActuateTest>:

/*........................................................Test Function.....................................*/

void MotorActuateTest()
{	/*Test Variables*/
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0ae      	sub	sp, #184	; 0xb8
 80013e4:	af00      	add	r7, sp, #0

	uint32_t test_set_changeover_time = 250;
 80013e6:	23fa      	movs	r3, #250	; 0xfa
 80013e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	uint32_t  test_set_size = 7;
 80013ec:	2307      	movs	r3, #7
 80013ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float32_t motor_test_angle_set[7][6] = {{0,0,0,0,0,0},
 80013f2:	4a25      	ldr	r2, [pc, #148]	; (8001488 <MotorActuateTest+0xa8>)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4611      	mov	r1, r2
 80013f8:	22a8      	movs	r2, #168	; 0xa8
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 f9d0 	bl	80057a0 <memcpy>
											{45,45,45,45,45,45},
											{90,90,90,90,90,90},
											{180,180,180,180,180,180},
											{360,360,360,360,360,360},
											{0,0,0,0,0,0}};
	TestCounter ++;
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <MotorActuateTest+0xac>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	4a21      	ldr	r2, [pc, #132]	; (800148c <MotorActuateTest+0xac>)
 8001408:	6013      	str	r3, [r2, #0]

	if (TestCounter >= test_set_changeover_time)
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <MotorActuateTest+0xac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001412:	429a      	cmp	r2, r3
 8001414:	d832      	bhi.n	800147c <MotorActuateTest+0x9c>
	{
		for (uint32_t test_angle = 0 ; test_angle <= 5 ; test_angle ++)
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800141c:	e018      	b.n	8001450 <MotorActuateTest+0x70>
		{
			MotorTargetAngle[test_angle] = motor_test_angle_set[TestSetIndex][test_angle];
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MotorActuateTest+0xb0>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001436:	4413      	add	r3, r2
 8001438:	f853 2cb4 	ldr.w	r2, [r3, #-180]
 800143c:	4915      	ldr	r1, [pc, #84]	; (8001494 <MotorActuateTest+0xb4>)
 800143e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (uint32_t test_angle = 0 ; test_angle <= 5 ; test_angle ++)
 8001446:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800144a:	3301      	adds	r3, #1
 800144c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001450:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001454:	2b05      	cmp	r3, #5
 8001456:	d9e2      	bls.n	800141e <MotorActuateTest+0x3e>
		}

		TestSetIndex ++ ;
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <MotorActuateTest+0xb0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <MotorActuateTest+0xb0>)
 8001460:	6013      	str	r3, [r2, #0]

		if(TestSetIndex > (test_set_size-1))
 8001462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MotorActuateTest+0xb0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d202      	bcs.n	8001476 <MotorActuateTest+0x96>
		{
			TestSetIndex = 0;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <MotorActuateTest+0xb0>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
		}

		TestCounter = 0;
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <MotorActuateTest+0xac>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
	}

   MotorActuate();
 800147c:	f7ff ff9c 	bl	80013b8 <MotorActuate>
}
 8001480:	bf00      	nop
 8001482:	37b8      	adds	r7, #184	; 0xb8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	0800581c 	.word	0x0800581c
 800148c:	200000dc 	.word	0x200000dc
 8001490:	200000e0 	.word	0x200000e0
 8001494:	20000044 	.word	0x20000044

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_MspInit+0x5c>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <HAL_MspInit+0x5c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6193      	str	r3, [r2, #24]
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_MspInit+0x5c>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_MspInit+0x5c>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_MspInit+0x5c>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_MspInit+0x5c>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_MspInit+0x60>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_MspInit+0x60>)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
	...

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	MotorActuateTest();
 8001546:	f7ff ff4b 	bl	80013e0 <MotorActuateTest>


	/*Hardware level control of motor direction pins and motor timers*/

	for(uint8_t motor_index = 1 ; motor_index <=6 ; motor_index ++ )
 800154a:	2301      	movs	r3, #1
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	e196      	b.n	800187e <SysTick_Handler+0x33e>
	{
		switch(motor_index)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	3b01      	subs	r3, #1
 8001554:	2b05      	cmp	r3, #5
 8001556:	f200 818f 	bhi.w	8001878 <SysTick_Handler+0x338>
 800155a:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <SysTick_Handler+0x20>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	08001579 	.word	0x08001579
 8001564:	080015f5 	.word	0x080015f5
 8001568:	08001671 	.word	0x08001671
 800156c:	080016e9 	.word	0x080016e9
 8001570:	08001765 	.word	0x08001765
 8001574:	080017e1 	.word	0x080017e1
		{
			case 1: switch(MotorState[motor_index -1])
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	3b01      	subs	r3, #1
 800157c:	4aa6      	ldr	r2, [pc, #664]	; (8001818 <SysTick_Handler+0x2d8>)
 800157e:	5cd3      	ldrb	r3, [r2, r3]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d032      	beq.n	80015ea <SysTick_Handler+0xaa>
 8001584:	2b01      	cmp	r3, #1
 8001586:	d000      	beq.n	800158a <SysTick_Handler+0x4a>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
								   break;

						default:  break;
 8001588:	e034      	b.n	80015f4 <SysTick_Handler+0xb4>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	3b01      	subs	r3, #1
 800158e:	4aa3      	ldr	r2, [pc, #652]	; (800181c <SysTick_Handler+0x2dc>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <SysTick_Handler+0x5c>
 8001596:	2b01      	cmp	r3, #1
 8001598:	d00a      	beq.n	80015b0 <SysTick_Handler+0x70>
									   default: break ;
 800159a:	e00a      	b.n	80015b2 <SysTick_Handler+0x72>
									   case LOW: HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800159c:	210c      	movs	r1, #12
 800159e:	48a0      	ldr	r0, [pc, #640]	; (8001820 <SysTick_Handler+0x2e0>)
 80015a0:	f003 f954 	bl	800484c <HAL_TIM_PWM_Start>
									   	   	   	 MotorHighStateSetFlag[motor_index -1] = HIGH;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	4a9c      	ldr	r2, [pc, #624]	; (800181c <SysTick_Handler+0x2dc>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	54d1      	strb	r1, [r2, r3]
									   			 break;
 80015ae:	e000      	b.n	80015b2 <SysTick_Handler+0x72>
									   case HIGH: break;
 80015b0:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	4a9b      	ldr	r2, [pc, #620]	; (8001824 <SysTick_Handler+0x2e4>)
 80015b8:	56d3      	ldrsb	r3, [r2, r3]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d013      	beq.n	80015e6 <SysTick_Handler+0xa6>
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d003      	beq.n	80015ca <SysTick_Handler+0x8a>
 80015c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c6:	d007      	beq.n	80015d8 <SysTick_Handler+0x98>
										default : break;
 80015c8:	e00e      	b.n	80015e8 <SysTick_Handler+0xa8>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d0:	4895      	ldr	r0, [pc, #596]	; (8001828 <SysTick_Handler+0x2e8>)
 80015d2:	f001 f917 	bl	8002804 <HAL_GPIO_WritePin>
													    break;
 80015d6:	e007      	b.n	80015e8 <SysTick_Handler+0xa8>
										case ANGLE_DOWN:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015de:	4892      	ldr	r0, [pc, #584]	; (8001828 <SysTick_Handler+0x2e8>)
 80015e0:	f001 f910 	bl	8002804 <HAL_GPIO_WritePin>
														break;
 80015e4:	e000      	b.n	80015e8 <SysTick_Handler+0xa8>
										case ANGLE_HOLD:break;
 80015e6:	bf00      	nop
									break;
 80015e8:	e004      	b.n	80015f4 <SysTick_Handler+0xb4>
						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80015ea:	210c      	movs	r1, #12
 80015ec:	488c      	ldr	r0, [pc, #560]	; (8001820 <SysTick_Handler+0x2e0>)
 80015ee:	f003 f9cf 	bl	8004990 <HAL_TIM_PWM_Stop>
								   break;
 80015f2:	bf00      	nop
					}

			case 2: switch(MotorState[motor_index -1])
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	4a87      	ldr	r2, [pc, #540]	; (8001818 <SysTick_Handler+0x2d8>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d032      	beq.n	8001666 <SysTick_Handler+0x126>
 8001600:	2b01      	cmp	r3, #1
 8001602:	d000      	beq.n	8001606 <SysTick_Handler+0xc6>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
								   break;

						default: break;
 8001604:	e034      	b.n	8001670 <SysTick_Handler+0x130>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	3b01      	subs	r3, #1
 800160a:	4a84      	ldr	r2, [pc, #528]	; (800181c <SysTick_Handler+0x2dc>)
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <SysTick_Handler+0xd8>
 8001612:	2b01      	cmp	r3, #1
 8001614:	d00a      	beq.n	800162c <SysTick_Handler+0xec>
									   default: break ;
 8001616:	e00a      	b.n	800162e <SysTick_Handler+0xee>
									   case LOW: HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001618:	2108      	movs	r1, #8
 800161a:	4881      	ldr	r0, [pc, #516]	; (8001820 <SysTick_Handler+0x2e0>)
 800161c:	f003 f916 	bl	800484c <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	3b01      	subs	r3, #1
 8001624:	4a7d      	ldr	r2, [pc, #500]	; (800181c <SysTick_Handler+0x2dc>)
 8001626:	2101      	movs	r1, #1
 8001628:	54d1      	strb	r1, [r2, r3]
									   			 break;
 800162a:	e000      	b.n	800162e <SysTick_Handler+0xee>
									   case HIGH: break;
 800162c:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	3b01      	subs	r3, #1
 8001632:	4a7c      	ldr	r2, [pc, #496]	; (8001824 <SysTick_Handler+0x2e4>)
 8001634:	56d3      	ldrsb	r3, [r2, r3]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d013      	beq.n	8001662 <SysTick_Handler+0x122>
 800163a:	2b01      	cmp	r3, #1
 800163c:	d003      	beq.n	8001646 <SysTick_Handler+0x106>
 800163e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001642:	d007      	beq.n	8001654 <SysTick_Handler+0x114>
										default : break;
 8001644:	e00e      	b.n	8001664 <SysTick_Handler+0x124>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800164c:	4876      	ldr	r0, [pc, #472]	; (8001828 <SysTick_Handler+0x2e8>)
 800164e:	f001 f8d9 	bl	8002804 <HAL_GPIO_WritePin>
														break;
 8001652:	e007      	b.n	8001664 <SysTick_Handler+0x124>
										case ANGLE_DOWN: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165a:	4873      	ldr	r0, [pc, #460]	; (8001828 <SysTick_Handler+0x2e8>)
 800165c:	f001 f8d2 	bl	8002804 <HAL_GPIO_WritePin>
														break;
 8001660:	e000      	b.n	8001664 <SysTick_Handler+0x124>
										case ANGLE_HOLD:break;
 8001662:	bf00      	nop
									break;
 8001664:	e004      	b.n	8001670 <SysTick_Handler+0x130>
						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001666:	2108      	movs	r1, #8
 8001668:	486d      	ldr	r0, [pc, #436]	; (8001820 <SysTick_Handler+0x2e0>)
 800166a:	f003 f991 	bl	8004990 <HAL_TIM_PWM_Stop>
								   break;
 800166e:	bf00      	nop
					}

			case 3: switch(MotorState[motor_index -1])
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	3b01      	subs	r3, #1
 8001674:	4a68      	ldr	r2, [pc, #416]	; (8001818 <SysTick_Handler+0x2d8>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d030      	beq.n	80016de <SysTick_Handler+0x19e>
 800167c:	2b01      	cmp	r3, #1
 800167e:	d000      	beq.n	8001682 <SysTick_Handler+0x142>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
								   break;

						default: break;
 8001680:	e032      	b.n	80016e8 <SysTick_Handler+0x1a8>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	3b01      	subs	r3, #1
 8001686:	4a65      	ldr	r2, [pc, #404]	; (800181c <SysTick_Handler+0x2dc>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <SysTick_Handler+0x154>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d00a      	beq.n	80016a8 <SysTick_Handler+0x168>
									   default: break ;
 8001692:	e00a      	b.n	80016aa <SysTick_Handler+0x16a>
									   case LOW: HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001694:	2100      	movs	r1, #0
 8001696:	4862      	ldr	r0, [pc, #392]	; (8001820 <SysTick_Handler+0x2e0>)
 8001698:	f003 f8d8 	bl	800484c <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	3b01      	subs	r3, #1
 80016a0:	4a5e      	ldr	r2, [pc, #376]	; (800181c <SysTick_Handler+0x2dc>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	54d1      	strb	r1, [r2, r3]
									   			 break;
 80016a6:	e000      	b.n	80016aa <SysTick_Handler+0x16a>
									   case HIGH: break;
 80016a8:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	4a5d      	ldr	r2, [pc, #372]	; (8001824 <SysTick_Handler+0x2e4>)
 80016b0:	56d3      	ldrsb	r3, [r2, r3]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d011      	beq.n	80016da <SysTick_Handler+0x19a>
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d003      	beq.n	80016c2 <SysTick_Handler+0x182>
 80016ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016be:	d006      	beq.n	80016ce <SysTick_Handler+0x18e>
										default : break;
 80016c0:	e00c      	b.n	80016dc <SysTick_Handler+0x19c>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2120      	movs	r1, #32
 80016c6:	4859      	ldr	r0, [pc, #356]	; (800182c <SysTick_Handler+0x2ec>)
 80016c8:	f001 f89c 	bl	8002804 <HAL_GPIO_WritePin>
														break;
 80016cc:	e006      	b.n	80016dc <SysTick_Handler+0x19c>
										case ANGLE_DOWN:HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2120      	movs	r1, #32
 80016d2:	4856      	ldr	r0, [pc, #344]	; (800182c <SysTick_Handler+0x2ec>)
 80016d4:	f001 f896 	bl	8002804 <HAL_GPIO_WritePin>
														break;
 80016d8:	e000      	b.n	80016dc <SysTick_Handler+0x19c>
										case ANGLE_HOLD:break;
 80016da:	bf00      	nop
									break;
 80016dc:	e004      	b.n	80016e8 <SysTick_Handler+0x1a8>
						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80016de:	2100      	movs	r1, #0
 80016e0:	484f      	ldr	r0, [pc, #316]	; (8001820 <SysTick_Handler+0x2e0>)
 80016e2:	f003 f955 	bl	8004990 <HAL_TIM_PWM_Stop>
								   break;
 80016e6:	bf00      	nop
					}

			case 4: switch(MotorState[motor_index -1])
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	4a4a      	ldr	r2, [pc, #296]	; (8001818 <SysTick_Handler+0x2d8>)
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d032      	beq.n	800175a <SysTick_Handler+0x21a>
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d000      	beq.n	80016fa <SysTick_Handler+0x1ba>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
								   break;

						default: break;
 80016f8:	e034      	b.n	8001764 <SysTick_Handler+0x224>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	4a47      	ldr	r2, [pc, #284]	; (800181c <SysTick_Handler+0x2dc>)
 8001700:	5cd3      	ldrb	r3, [r2, r3]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <SysTick_Handler+0x1cc>
 8001706:	2b01      	cmp	r3, #1
 8001708:	d00a      	beq.n	8001720 <SysTick_Handler+0x1e0>
									   default: break ;
 800170a:	e00a      	b.n	8001722 <SysTick_Handler+0x1e2>
									   case LOW: HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800170c:	2108      	movs	r1, #8
 800170e:	4848      	ldr	r0, [pc, #288]	; (8001830 <SysTick_Handler+0x2f0>)
 8001710:	f003 f89c 	bl	800484c <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	3b01      	subs	r3, #1
 8001718:	4a40      	ldr	r2, [pc, #256]	; (800181c <SysTick_Handler+0x2dc>)
 800171a:	2101      	movs	r1, #1
 800171c:	54d1      	strb	r1, [r2, r3]
									   			 break;
 800171e:	e000      	b.n	8001722 <SysTick_Handler+0x1e2>
									   case HIGH: break;
 8001720:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	3b01      	subs	r3, #1
 8001726:	4a3f      	ldr	r2, [pc, #252]	; (8001824 <SysTick_Handler+0x2e4>)
 8001728:	56d3      	ldrsb	r3, [r2, r3]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d013      	beq.n	8001756 <SysTick_Handler+0x216>
 800172e:	2b01      	cmp	r3, #1
 8001730:	d003      	beq.n	800173a <SysTick_Handler+0x1fa>
 8001732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001736:	d007      	beq.n	8001748 <SysTick_Handler+0x208>
										default : break;
 8001738:	e00e      	b.n	8001758 <SysTick_Handler+0x218>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001740:	483a      	ldr	r0, [pc, #232]	; (800182c <SysTick_Handler+0x2ec>)
 8001742:	f001 f85f 	bl	8002804 <HAL_GPIO_WritePin>
														break;
 8001746:	e007      	b.n	8001758 <SysTick_Handler+0x218>
										case ANGLE_DOWN: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174e:	4837      	ldr	r0, [pc, #220]	; (800182c <SysTick_Handler+0x2ec>)
 8001750:	f001 f858 	bl	8002804 <HAL_GPIO_WritePin>
														break;
 8001754:	e000      	b.n	8001758 <SysTick_Handler+0x218>
										case ANGLE_HOLD:break;
 8001756:	bf00      	nop
									break;
 8001758:	e004      	b.n	8001764 <SysTick_Handler+0x224>
						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800175a:	2108      	movs	r1, #8
 800175c:	4834      	ldr	r0, [pc, #208]	; (8001830 <SysTick_Handler+0x2f0>)
 800175e:	f003 f917 	bl	8004990 <HAL_TIM_PWM_Stop>
								   break;
 8001762:	bf00      	nop
					}

			case 5: switch(MotorState[motor_index -1])
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	3b01      	subs	r3, #1
 8001768:	4a2b      	ldr	r2, [pc, #172]	; (8001818 <SysTick_Handler+0x2d8>)
 800176a:	5cd3      	ldrb	r3, [r2, r3]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d032      	beq.n	80017d6 <SysTick_Handler+0x296>
 8001770:	2b01      	cmp	r3, #1
 8001772:	d000      	beq.n	8001776 <SysTick_Handler+0x236>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
								   break;

						default: break;
 8001774:	e034      	b.n	80017e0 <SysTick_Handler+0x2a0>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	3b01      	subs	r3, #1
 800177a:	4a28      	ldr	r2, [pc, #160]	; (800181c <SysTick_Handler+0x2dc>)
 800177c:	5cd3      	ldrb	r3, [r2, r3]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <SysTick_Handler+0x248>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d00a      	beq.n	800179c <SysTick_Handler+0x25c>
									   default: break ;
 8001786:	e00a      	b.n	800179e <SysTick_Handler+0x25e>
									   case LOW: HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001788:	2104      	movs	r1, #4
 800178a:	4829      	ldr	r0, [pc, #164]	; (8001830 <SysTick_Handler+0x2f0>)
 800178c:	f003 f85e 	bl	800484c <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	3b01      	subs	r3, #1
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <SysTick_Handler+0x2dc>)
 8001796:	2101      	movs	r1, #1
 8001798:	54d1      	strb	r1, [r2, r3]
									   			 break;
 800179a:	e000      	b.n	800179e <SysTick_Handler+0x25e>
									   case HIGH: break;
 800179c:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	4a20      	ldr	r2, [pc, #128]	; (8001824 <SysTick_Handler+0x2e4>)
 80017a4:	56d3      	ldrsb	r3, [r2, r3]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d013      	beq.n	80017d2 <SysTick_Handler+0x292>
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d003      	beq.n	80017b6 <SysTick_Handler+0x276>
 80017ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b2:	d007      	beq.n	80017c4 <SysTick_Handler+0x284>
										default : break;
 80017b4:	e00e      	b.n	80017d4 <SysTick_Handler+0x294>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017bc:	481a      	ldr	r0, [pc, #104]	; (8001828 <SysTick_Handler+0x2e8>)
 80017be:	f001 f821 	bl	8002804 <HAL_GPIO_WritePin>
														break;
 80017c2:	e007      	b.n	80017d4 <SysTick_Handler+0x294>
										case ANGLE_DOWN: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ca:	4817      	ldr	r0, [pc, #92]	; (8001828 <SysTick_Handler+0x2e8>)
 80017cc:	f001 f81a 	bl	8002804 <HAL_GPIO_WritePin>
														 break;
 80017d0:	e000      	b.n	80017d4 <SysTick_Handler+0x294>
										case ANGLE_HOLD:break;
 80017d2:	bf00      	nop
									break;
 80017d4:	e004      	b.n	80017e0 <SysTick_Handler+0x2a0>
						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80017d6:	2104      	movs	r1, #4
 80017d8:	4815      	ldr	r0, [pc, #84]	; (8001830 <SysTick_Handler+0x2f0>)
 80017da:	f003 f8d9 	bl	8004990 <HAL_TIM_PWM_Stop>
								   break;
 80017de:	bf00      	nop
					}

			case 6: switch(MotorState[motor_index -1])
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <SysTick_Handler+0x2d8>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d040      	beq.n	800186e <SysTick_Handler+0x32e>
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d000      	beq.n	80017f2 <SysTick_Handler+0x2b2>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
								   break;

						default: break;
 80017f0:	e042      	b.n	8001878 <SysTick_Handler+0x338>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <SysTick_Handler+0x2dc>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <SysTick_Handler+0x2c4>
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d018      	beq.n	8001834 <SysTick_Handler+0x2f4>
									   default: break ;
 8001802:	e018      	b.n	8001836 <SysTick_Handler+0x2f6>
									   case LOW: HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001804:	2100      	movs	r1, #0
 8001806:	480a      	ldr	r0, [pc, #40]	; (8001830 <SysTick_Handler+0x2f0>)
 8001808:	f003 f820 	bl	800484c <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	3b01      	subs	r3, #1
 8001810:	4a02      	ldr	r2, [pc, #8]	; (800181c <SysTick_Handler+0x2dc>)
 8001812:	2101      	movs	r1, #1
 8001814:	54d1      	strb	r1, [r2, r3]
									   			 break;
 8001816:	e00e      	b.n	8001836 <SysTick_Handler+0x2f6>
 8001818:	20000004 	.word	0x20000004
 800181c:	200000cc 	.word	0x200000cc
 8001820:	2000016c 	.word	0x2000016c
 8001824:	200000c4 	.word	0x200000c4
 8001828:	40010c00 	.word	0x40010c00
 800182c:	40010800 	.word	0x40010800
 8001830:	200001b4 	.word	0x200001b4
									   case HIGH: break;
 8001834:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	3b01      	subs	r3, #1
 800183a:	4a16      	ldr	r2, [pc, #88]	; (8001894 <SysTick_Handler+0x354>)
 800183c:	56d3      	ldrsb	r3, [r2, r3]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d013      	beq.n	800186a <SysTick_Handler+0x32a>
 8001842:	2b01      	cmp	r3, #1
 8001844:	d003      	beq.n	800184e <SysTick_Handler+0x30e>
 8001846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184a:	d007      	beq.n	800185c <SysTick_Handler+0x31c>
										default : break;
 800184c:	e00e      	b.n	800186c <SysTick_Handler+0x32c>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001854:	4810      	ldr	r0, [pc, #64]	; (8001898 <SysTick_Handler+0x358>)
 8001856:	f000 ffd5 	bl	8002804 <HAL_GPIO_WritePin>
														break;
 800185a:	e007      	b.n	800186c <SysTick_Handler+0x32c>
										case ANGLE_DOWN: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001862:	480d      	ldr	r0, [pc, #52]	; (8001898 <SysTick_Handler+0x358>)
 8001864:	f000 ffce 	bl	8002804 <HAL_GPIO_WritePin>
														break;
 8001868:	e000      	b.n	800186c <SysTick_Handler+0x32c>
										case ANGLE_HOLD:break;
 800186a:	bf00      	nop
									break;
 800186c:	e004      	b.n	8001878 <SysTick_Handler+0x338>
						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800186e:	2100      	movs	r1, #0
 8001870:	480a      	ldr	r0, [pc, #40]	; (800189c <SysTick_Handler+0x35c>)
 8001872:	f003 f88d 	bl	8004990 <HAL_TIM_PWM_Stop>
								   break;
 8001876:	bf00      	nop
	for(uint8_t motor_index = 1 ; motor_index <=6 ; motor_index ++ )
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	3301      	adds	r3, #1
 800187c:	71fb      	strb	r3, [r7, #7]
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2b06      	cmp	r3, #6
 8001882:	f67f ae65 	bls.w	8001550 <SysTick_Handler+0x10>
//	}



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001886:	f000 fb0d 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200000c4 	.word	0x200000c4
 8001898:	40010c00 	.word	0x40010c00
 800189c:	200001b4 	.word	0x200001b4

080018a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80018a4:	2002      	movs	r0, #2
 80018a6:	f000 ffc5 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}

080018ae <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80018b2:	2004      	movs	r0, #4
 80018b4:	f000 ffbe 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80018c0:	2010      	movs	r0, #16
 80018c2:	f000 ffb7 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}

080018ca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80018ce:	2080      	movs	r0, #128	; 0x80
 80018d0:	f000 ffb0 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80018dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018e0:	f000 ffa8 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018e8:	f000 ffa4 	bl	8002834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b096      	sub	sp, #88	; 0x58
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2220      	movs	r2, #32
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f003 ff3e 	bl	80057b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <MX_TIM1_Init+0x168>)
 800193c:	4a4a      	ldr	r2, [pc, #296]	; (8001a68 <MX_TIM1_Init+0x16c>)
 800193e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8001940:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <MX_TIM1_Init+0x168>)
 8001942:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001946:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <MX_TIM1_Init+0x168>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25-1;
 800194e:	4b45      	ldr	r3, [pc, #276]	; (8001a64 <MX_TIM1_Init+0x168>)
 8001950:	2218      	movs	r2, #24
 8001952:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <MX_TIM1_Init+0x168>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800195a:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <MX_TIM1_Init+0x168>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <MX_TIM1_Init+0x168>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001966:	483f      	ldr	r0, [pc, #252]	; (8001a64 <MX_TIM1_Init+0x168>)
 8001968:	f002 fec8 	bl	80046fc <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001972:	f7ff f9d0 	bl	8000d16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800197c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001980:	4619      	mov	r1, r3
 8001982:	4838      	ldr	r0, [pc, #224]	; (8001a64 <MX_TIM1_Init+0x168>)
 8001984:	f003 f926 	bl	8004bd4 <HAL_TIM_ConfigClockSource>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800198e:	f7ff f9c2 	bl	8000d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001992:	4834      	ldr	r0, [pc, #208]	; (8001a64 <MX_TIM1_Init+0x168>)
 8001994:	f002 ff01 	bl	800479a <HAL_TIM_PWM_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800199e:	f7ff f9ba 	bl	8000d16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ae:	4619      	mov	r1, r3
 80019b0:	482c      	ldr	r0, [pc, #176]	; (8001a64 <MX_TIM1_Init+0x168>)
 80019b2:	f003 fc6b 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019bc:	f7ff f9ab 	bl	8000d16 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c0:	2360      	movs	r3, #96	; 0x60
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 18;
 80019c4:	2312      	movs	r3, #18
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019cc:	2300      	movs	r3, #0
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e0:	2200      	movs	r2, #0
 80019e2:	4619      	mov	r1, r3
 80019e4:	481f      	ldr	r0, [pc, #124]	; (8001a64 <MX_TIM1_Init+0x168>)
 80019e6:	f003 f837 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019f0:	f7ff f991 	bl	8000d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	2204      	movs	r2, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4819      	ldr	r0, [pc, #100]	; (8001a64 <MX_TIM1_Init+0x168>)
 80019fe:	f003 f82b 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001a08:	f7ff f985 	bl	8000d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	2208      	movs	r2, #8
 8001a12:	4619      	mov	r1, r3
 8001a14:	4813      	ldr	r0, [pc, #76]	; (8001a64 <MX_TIM1_Init+0x168>)
 8001a16:	f003 f81f 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a20:	f7ff f979 	bl	8000d16 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_TIM1_Init+0x168>)
 8001a48:	f003 fc7e 	bl	8005348 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001a52:	f7ff f960 	bl	8000d16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a56:	4803      	ldr	r0, [pc, #12]	; (8001a64 <MX_TIM1_Init+0x168>)
 8001a58:	f000 f8c6 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 8001a5c:	bf00      	nop
 8001a5e:	3758      	adds	r7, #88	; 0x58
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200001b4 	.word	0x200001b4
 8001a68:	40012c00 	.word	0x40012c00

08001a6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08e      	sub	sp, #56	; 0x38
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	f107 0320 	add.w	r3, r7, #32
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a9c:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001a9e:	4a38      	ldr	r2, [pc, #224]	; (8001b80 <MX_TIM3_Init+0x114>)
 8001aa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8001aa2:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001aa4:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001aa8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25-1;
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001ab2:	2218      	movs	r2, #24
 8001ab4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abc:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ac2:	482e      	ldr	r0, [pc, #184]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001ac4:	f002 fe1a 	bl	80046fc <HAL_TIM_Base_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ace:	f7ff f922 	bl	8000d16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ad8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4827      	ldr	r0, [pc, #156]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001ae0:	f003 f878 	bl	8004bd4 <HAL_TIM_ConfigClockSource>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001aea:	f7ff f914 	bl	8000d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001aee:	4823      	ldr	r0, [pc, #140]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001af0:	f002 fe53 	bl	800479a <HAL_TIM_PWM_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001afa:	f7ff f90c 	bl	8000d16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b06:	f107 0320 	add.w	r3, r7, #32
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	481b      	ldr	r0, [pc, #108]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001b0e:	f003 fbbd 	bl	800528c <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b18:	f7ff f8fd 	bl	8000d16 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1c:	2360      	movs	r3, #96	; 0x60
 8001b1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18;
 8001b20:	2312      	movs	r3, #18
 8001b22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4619      	mov	r1, r3
 8001b32:	4812      	ldr	r0, [pc, #72]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001b34:	f002 ff90 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b3e:	f7ff f8ea 	bl	8000d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2208      	movs	r2, #8
 8001b46:	4619      	mov	r1, r3
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001b4a:	f002 ff85 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b54:	f7ff f8df 	bl	8000d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4807      	ldr	r0, [pc, #28]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001b60:	f002 ff7a 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001b6a:	f7ff f8d4 	bl	8000d16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b6e:	4803      	ldr	r0, [pc, #12]	; (8001b7c <MX_TIM3_Init+0x110>)
 8001b70:	f000 f83a 	bl	8001be8 <HAL_TIM_MspPostInit>

}
 8001b74:	bf00      	nop
 8001b76:	3738      	adds	r7, #56	; 0x38
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	2000016c 	.word	0x2000016c
 8001b80:	40000400 	.word	0x40000400

08001b84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <HAL_TIM_Base_MspInit+0x58>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10c      	bne.n	8001bb0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_TIM_Base_MspInit+0x5c>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <HAL_TIM_Base_MspInit+0x5c>)
 8001b9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ba0:	6193      	str	r3, [r2, #24]
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_TIM_Base_MspInit+0x5c>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bae:	e010      	b.n	8001bd2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_TIM_Base_MspInit+0x60>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_TIM_Base_MspInit+0x5c>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_TIM_Base_MspInit+0x5c>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_TIM_Base_MspInit+0x5c>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	40012c00 	.word	0x40012c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40000400 	.word	0x40000400

08001be8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0318 	add.w	r3, r7, #24
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a2b      	ldr	r2, [pc, #172]	; (8001cb0 <HAL_TIM_MspPostInit+0xc8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d119      	bne.n	8001c3c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_TIM_MspPostInit+0xcc>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a29      	ldr	r2, [pc, #164]	; (8001cb4 <HAL_TIM_MspPostInit+0xcc>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_TIM_MspPostInit+0xcc>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_6_STEP_Pin|MOTOR_5_STEP_Pin|MOTOR_4_STEP_Pin;
 8001c20:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 0318 	add.w	r3, r7, #24
 8001c32:	4619      	mov	r1, r3
 8001c34:	4820      	ldr	r0, [pc, #128]	; (8001cb8 <HAL_TIM_MspPostInit+0xd0>)
 8001c36:	f000 fc8b 	bl	8002550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c3a:	e034      	b.n	8001ca6 <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <HAL_TIM_MspPostInit+0xd4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d12f      	bne.n	8001ca6 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_TIM_MspPostInit+0xcc>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <HAL_TIM_MspPostInit+0xcc>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6193      	str	r3, [r2, #24]
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_TIM_MspPostInit+0xcc>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_TIM_MspPostInit+0xcc>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <HAL_TIM_MspPostInit+0xcc>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	6193      	str	r3, [r2, #24]
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_TIM_MspPostInit+0xcc>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_3_STEP_Pin;
 8001c76:	2340      	movs	r3, #64	; 0x40
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_3_STEP_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	4619      	mov	r1, r3
 8001c88:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <HAL_TIM_MspPostInit+0xd0>)
 8001c8a:	f000 fc61 	bl	8002550 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_2_STEP_Pin|MOTOR_1_STEP_Pin;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2302      	movs	r3, #2
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	f107 0318 	add.w	r3, r7, #24
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <HAL_TIM_MspPostInit+0xd8>)
 8001ca2:	f000 fc55 	bl	8002550 <HAL_GPIO_Init>
}
 8001ca6:	bf00      	nop
 8001ca8:	3728      	adds	r7, #40	; 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40012c00 	.word	0x40012c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010800 	.word	0x40010800
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	40010c00 	.word	0x40010c00

08001cc4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <MX_USART1_UART_Init+0x50>)
 8001ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cea:	220c      	movs	r2, #12
 8001cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_USART1_UART_Init+0x4c>)
 8001cfc:	f003 fb75 	bl	80053ea <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d06:	f7ff f806 	bl	8000d16 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200001fc 	.word	0x200001fc
 8001d14:	40013800 	.word	0x40013800

08001d18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <HAL_UART_MspInit+0xa4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d13d      	bne.n	8001db4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_UART_MspInit+0xa8>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a20      	ldr	r2, [pc, #128]	; (8001dc0 <HAL_UART_MspInit+0xa8>)
 8001d3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_UART_MspInit+0xa8>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_UART_MspInit+0xa8>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a1a      	ldr	r2, [pc, #104]	; (8001dc0 <HAL_UART_MspInit+0xa8>)
 8001d56:	f043 0308 	orr.w	r3, r3, #8
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_UART_MspInit+0xa8>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d68:	2340      	movs	r3, #64	; 0x40
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4812      	ldr	r0, [pc, #72]	; (8001dc4 <HAL_UART_MspInit+0xac>)
 8001d7c:	f000 fbe8 	bl	8002550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <HAL_UART_MspInit+0xac>)
 8001d94:	f000 fbdc 	bl	8002550 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_UART_MspInit+0xb0>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <HAL_UART_MspInit+0xb0>)
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001db4:	bf00      	nop
 8001db6:	3728      	adds	r7, #40	; 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	40010000 	.word	0x40010000

08001dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001dcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001dce:	e003      	b.n	8001dd8 <LoopCopyDataInit>

08001dd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001dd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dd6:	3104      	adds	r1, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001dd8:	480a      	ldr	r0, [pc, #40]	; (8001e04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ddc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001de0:	d3f6      	bcc.n	8001dd0 <CopyDataInit>
  ldr r2, =_sbss
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001de4:	e002      	b.n	8001dec <LoopFillZerobss>

08001de6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001de8:	f842 3b04 	str.w	r3, [r2], #4

08001dec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001dee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001df0:	d3f9      	bcc.n	8001de6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001df2:	f7ff fd7d 	bl	80018f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001df6:	f003 fcaf 	bl	8005758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dfa:	f7fe fe81 	bl	8000b00 <main>
  bx lr
 8001dfe:	4770      	bx	lr
  ldr r3, =_sidata
 8001e00:	080058f8 	.word	0x080058f8
  ldr r0, =_sdata
 8001e04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e08:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8001e0c:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8001e10:	20000240 	.word	0x20000240

08001e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC1_2_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_Init+0x28>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_Init+0x28>)
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 fb4f 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fb30 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fb67 	bl	8002536 <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 fb2f 	bl	80024e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000000c 	.word	0x2000000c
 8001e9c:	20000014 	.word	0x20000014
 8001ea0:	20000010 	.word	0x20000010

08001ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_IncTick+0x1c>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000014 	.word	0x20000014
 8001ec4:	2000023c 	.word	0x2000023c

08001ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <HAL_GetTick+0x10>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	2000023c 	.word	0x2000023c

08001edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff fff0 	bl	8001ec8 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d005      	beq.n	8001f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_Delay+0x40>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f02:	bf00      	nop
 8001f04:	f7ff ffe0 	bl	8001ec8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d8f7      	bhi.n	8001f04 <HAL_Delay+0x28>
  {
  }
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000014 	.word	0x20000014

08001f20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0be      	b.n	80020c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fc4c 	bl	80007fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f9ab 	bl	80022c0 <ADC_ConversionStop_Disable>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 8099 	bne.w	80020ae <HAL_ADC_Init+0x18e>
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 8095 	bne.w	80020ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f8c:	f023 0302 	bic.w	r3, r3, #2
 8001f90:	f043 0202 	orr.w	r2, r3, #2
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fa0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7b1b      	ldrb	r3, [r3, #12]
 8001fa6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fa8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb8:	d003      	beq.n	8001fc2 <HAL_ADC_Init+0xa2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d102      	bne.n	8001fc8 <HAL_ADC_Init+0xa8>
 8001fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc6:	e000      	b.n	8001fca <HAL_ADC_Init+0xaa>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7d1b      	ldrb	r3, [r3, #20]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d119      	bne.n	800200c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7b1b      	ldrb	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	035a      	lsls	r2, r3, #13
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	e00b      	b.n	800200c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	f043 0220 	orr.w	r2, r3, #32
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	430a      	orrs	r2, r1
 800201e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <HAL_ADC_Init+0x1a8>)
 8002028:	4013      	ands	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	430b      	orrs	r3, r1
 8002032:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203c:	d003      	beq.n	8002046 <HAL_ADC_Init+0x126>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d104      	bne.n	8002050 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	3b01      	subs	r3, #1
 800204c:	051b      	lsls	r3, r3, #20
 800204e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	430a      	orrs	r2, r1
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_ADC_Init+0x1ac>)
 800206c:	4013      	ands	r3, r2
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	429a      	cmp	r2, r3
 8002072:	d10b      	bne.n	800208c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800208a:	e018      	b.n	80020be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	f023 0312 	bic.w	r3, r3, #18
 8002094:	f043 0210 	orr.w	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	f043 0201 	orr.w	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020ac:	e007      	b.n	80020be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	f043 0210 	orr.w	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020be:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	ffe1f7fd 	.word	0xffe1f7fd
 80020cc:	ff1f0efe 	.word	0xff1f0efe

080020d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x20>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e0dc      	b.n	80022aa <HAL_ADC_ConfigChannel+0x1da>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b06      	cmp	r3, #6
 80020fe:	d81c      	bhi.n	800213a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b05      	subs	r3, #5
 8002112:	221f      	movs	r2, #31
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	4019      	ands	r1, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3b05      	subs	r3, #5
 800212c:	fa00 f203 	lsl.w	r2, r0, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	635a      	str	r2, [r3, #52]	; 0x34
 8002138:	e03c      	b.n	80021b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d81c      	bhi.n	800217c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	3b23      	subs	r3, #35	; 0x23
 8002154:	221f      	movs	r2, #31
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	4019      	ands	r1, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	3b23      	subs	r3, #35	; 0x23
 800216e:	fa00 f203 	lsl.w	r2, r0, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
 800217a:	e01b      	b.n	80021b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	3b41      	subs	r3, #65	; 0x41
 800218e:	221f      	movs	r2, #31
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	4019      	ands	r1, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b41      	subs	r3, #65	; 0x41
 80021a8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	d91c      	bls.n	80021f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68d9      	ldr	r1, [r3, #12]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	3b1e      	subs	r3, #30
 80021ce:	2207      	movs	r2, #7
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4019      	ands	r1, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6898      	ldr	r0, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	3b1e      	subs	r3, #30
 80021e8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	e019      	b.n	800222a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6919      	ldr	r1, [r3, #16]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	2207      	movs	r2, #7
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	4019      	ands	r1, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6898      	ldr	r0, [r3, #8]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	fa00 f203 	lsl.w	r2, r0, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b10      	cmp	r3, #16
 8002230:	d003      	beq.n	800223a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002236:	2b11      	cmp	r3, #17
 8002238:	d132      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d125      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d126      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002260:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b10      	cmp	r3, #16
 8002268:	d11a      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800226a:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a13      	ldr	r2, [pc, #76]	; (80022bc <HAL_ADC_ConfigChannel+0x1ec>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	0c9a      	lsrs	r2, r3, #18
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002280:	e002      	b.n	8002288 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3b01      	subs	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f9      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x1b2>
 800228e:	e007      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40012400 	.word	0x40012400
 80022b8:	2000000c 	.word	0x2000000c
 80022bc:	431bde83 	.word	0x431bde83

080022c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d127      	bne.n	800232a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0201 	bic.w	r2, r2, #1
 80022e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ea:	f7ff fded 	bl	8001ec8 <HAL_GetTick>
 80022ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022f0:	e014      	b.n	800231c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022f2:	f7ff fde9 	bl	8001ec8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d90d      	bls.n	800231c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	f043 0210 	orr.w	r2, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e007      	b.n	800232c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d0e3      	beq.n	80022f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800235c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002366:	4a04      	ldr	r2, [pc, #16]	; (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4906      	ldr	r1, [pc, #24]	; (80023cc <__NVIC_EnableIRQ+0x34>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	; (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff90 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff2d 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff42 	bl	800237c <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff90 	bl	8002424 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5f 	bl	80023d0 <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff35 	bl	8002398 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa2 	bl	8002488 <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b08b      	sub	sp, #44	; 0x2c
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002562:	e127      	b.n	80027b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002564:	2201      	movs	r2, #1
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	429a      	cmp	r2, r3
 800257e:	f040 8116 	bne.w	80027ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b12      	cmp	r3, #18
 8002588:	d034      	beq.n	80025f4 <HAL_GPIO_Init+0xa4>
 800258a:	2b12      	cmp	r3, #18
 800258c:	d80d      	bhi.n	80025aa <HAL_GPIO_Init+0x5a>
 800258e:	2b02      	cmp	r3, #2
 8002590:	d02b      	beq.n	80025ea <HAL_GPIO_Init+0x9a>
 8002592:	2b02      	cmp	r3, #2
 8002594:	d804      	bhi.n	80025a0 <HAL_GPIO_Init+0x50>
 8002596:	2b00      	cmp	r3, #0
 8002598:	d031      	beq.n	80025fe <HAL_GPIO_Init+0xae>
 800259a:	2b01      	cmp	r3, #1
 800259c:	d01c      	beq.n	80025d8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800259e:	e048      	b.n	8002632 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d043      	beq.n	800262c <HAL_GPIO_Init+0xdc>
 80025a4:	2b11      	cmp	r3, #17
 80025a6:	d01b      	beq.n	80025e0 <HAL_GPIO_Init+0x90>
          break;
 80025a8:	e043      	b.n	8002632 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025aa:	4a89      	ldr	r2, [pc, #548]	; (80027d0 <HAL_GPIO_Init+0x280>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d026      	beq.n	80025fe <HAL_GPIO_Init+0xae>
 80025b0:	4a87      	ldr	r2, [pc, #540]	; (80027d0 <HAL_GPIO_Init+0x280>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d806      	bhi.n	80025c4 <HAL_GPIO_Init+0x74>
 80025b6:	4a87      	ldr	r2, [pc, #540]	; (80027d4 <HAL_GPIO_Init+0x284>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d020      	beq.n	80025fe <HAL_GPIO_Init+0xae>
 80025bc:	4a86      	ldr	r2, [pc, #536]	; (80027d8 <HAL_GPIO_Init+0x288>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01d      	beq.n	80025fe <HAL_GPIO_Init+0xae>
          break;
 80025c2:	e036      	b.n	8002632 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025c4:	4a85      	ldr	r2, [pc, #532]	; (80027dc <HAL_GPIO_Init+0x28c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d019      	beq.n	80025fe <HAL_GPIO_Init+0xae>
 80025ca:	4a85      	ldr	r2, [pc, #532]	; (80027e0 <HAL_GPIO_Init+0x290>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d016      	beq.n	80025fe <HAL_GPIO_Init+0xae>
 80025d0:	4a84      	ldr	r2, [pc, #528]	; (80027e4 <HAL_GPIO_Init+0x294>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d013      	beq.n	80025fe <HAL_GPIO_Init+0xae>
          break;
 80025d6:	e02c      	b.n	8002632 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	623b      	str	r3, [r7, #32]
          break;
 80025de:	e028      	b.n	8002632 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	3304      	adds	r3, #4
 80025e6:	623b      	str	r3, [r7, #32]
          break;
 80025e8:	e023      	b.n	8002632 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	3308      	adds	r3, #8
 80025f0:	623b      	str	r3, [r7, #32]
          break;
 80025f2:	e01e      	b.n	8002632 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	330c      	adds	r3, #12
 80025fa:	623b      	str	r3, [r7, #32]
          break;
 80025fc:	e019      	b.n	8002632 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002606:	2304      	movs	r3, #4
 8002608:	623b      	str	r3, [r7, #32]
          break;
 800260a:	e012      	b.n	8002632 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d105      	bne.n	8002620 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002614:	2308      	movs	r3, #8
 8002616:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	611a      	str	r2, [r3, #16]
          break;
 800261e:	e008      	b.n	8002632 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002620:	2308      	movs	r3, #8
 8002622:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	615a      	str	r2, [r3, #20]
          break;
 800262a:	e002      	b.n	8002632 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800262c:	2300      	movs	r3, #0
 800262e:	623b      	str	r3, [r7, #32]
          break;
 8002630:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2bff      	cmp	r3, #255	; 0xff
 8002636:	d801      	bhi.n	800263c <HAL_GPIO_Init+0xec>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	e001      	b.n	8002640 <HAL_GPIO_Init+0xf0>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	2bff      	cmp	r3, #255	; 0xff
 8002646:	d802      	bhi.n	800264e <HAL_GPIO_Init+0xfe>
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	e002      	b.n	8002654 <HAL_GPIO_Init+0x104>
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	3b08      	subs	r3, #8
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	210f      	movs	r1, #15
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	401a      	ands	r2, r3
 8002666:	6a39      	ldr	r1, [r7, #32]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	431a      	orrs	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8096 	beq.w	80027ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002682:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <HAL_GPIO_Init+0x298>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	4a58      	ldr	r2, [pc, #352]	; (80027e8 <HAL_GPIO_Init+0x298>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6193      	str	r3, [r2, #24]
 800268e:	4b56      	ldr	r3, [pc, #344]	; (80027e8 <HAL_GPIO_Init+0x298>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800269a:	4a54      	ldr	r2, [pc, #336]	; (80027ec <HAL_GPIO_Init+0x29c>)
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	3302      	adds	r3, #2
 80026a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	220f      	movs	r2, #15
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4013      	ands	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4b      	ldr	r2, [pc, #300]	; (80027f0 <HAL_GPIO_Init+0x2a0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_GPIO_Init+0x19e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4a      	ldr	r2, [pc, #296]	; (80027f4 <HAL_GPIO_Init+0x2a4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00d      	beq.n	80026ea <HAL_GPIO_Init+0x19a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a49      	ldr	r2, [pc, #292]	; (80027f8 <HAL_GPIO_Init+0x2a8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <HAL_GPIO_Init+0x196>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a48      	ldr	r2, [pc, #288]	; (80027fc <HAL_GPIO_Init+0x2ac>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_GPIO_Init+0x192>
 80026de:	2303      	movs	r3, #3
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_Init+0x1a0>
 80026e2:	2304      	movs	r3, #4
 80026e4:	e004      	b.n	80026f0 <HAL_GPIO_Init+0x1a0>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e002      	b.n	80026f0 <HAL_GPIO_Init+0x1a0>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_GPIO_Init+0x1a0>
 80026ee:	2300      	movs	r3, #0
 80026f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f2:	f002 0203 	and.w	r2, r2, #3
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	4093      	lsls	r3, r2
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002700:	493a      	ldr	r1, [pc, #232]	; (80027ec <HAL_GPIO_Init+0x29c>)
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	3302      	adds	r3, #2
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800271a:	4b39      	ldr	r3, [pc, #228]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4938      	ldr	r1, [pc, #224]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
 8002726:	e006      	b.n	8002736 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002728:	4b35      	ldr	r3, [pc, #212]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	43db      	mvns	r3, r3
 8002730:	4933      	ldr	r1, [pc, #204]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 8002732:	4013      	ands	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002742:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	492e      	ldr	r1, [pc, #184]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
 800274e:	e006      	b.n	800275e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	43db      	mvns	r3, r3
 8002758:	4929      	ldr	r1, [pc, #164]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 800275a:	4013      	ands	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800276a:	4b25      	ldr	r3, [pc, #148]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	4924      	ldr	r1, [pc, #144]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
 8002776:	e006      	b.n	8002786 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002778:	4b21      	ldr	r3, [pc, #132]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	43db      	mvns	r3, r3
 8002780:	491f      	ldr	r1, [pc, #124]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 8002782:	4013      	ands	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	491a      	ldr	r1, [pc, #104]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	60cb      	str	r3, [r1, #12]
 800279e:	e006      	b.n	80027ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	4915      	ldr	r1, [pc, #84]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	3301      	adds	r3, #1
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f47f aed0 	bne.w	8002564 <HAL_GPIO_Init+0x14>
  }
}
 80027c4:	bf00      	nop
 80027c6:	372c      	adds	r7, #44	; 0x2c
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	10210000 	.word	0x10210000
 80027d4:	10110000 	.word	0x10110000
 80027d8:	10120000 	.word	0x10120000
 80027dc:	10310000 	.word	0x10310000
 80027e0:	10320000 	.word	0x10320000
 80027e4:	10220000 	.word	0x10220000
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40010000 	.word	0x40010000
 80027f0:	40010800 	.word	0x40010800
 80027f4:	40010c00 	.word	0x40010c00
 80027f8:	40011000 	.word	0x40011000
 80027fc:	40011400 	.word	0x40011400
 8002800:	40010400 	.word	0x40010400

08002804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
 8002810:	4613      	mov	r3, r2
 8002812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002820:	e003      	b.n	800282a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	041a      	lsls	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	611a      	str	r2, [r3, #16]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800284a:	4a05      	ldr	r2, [pc, #20]	; (8002860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fa2b 	bl	8000cae <HAL_GPIO_EXTI_Callback>
  }
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40010400 	.word	0x40010400

08002864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e11f      	b.n	8002ab6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe f8e8 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2224      	movs	r2, #36	; 0x24
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028c8:	f001 fe1c 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 80028cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4a7b      	ldr	r2, [pc, #492]	; (8002ac0 <HAL_I2C_Init+0x25c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d807      	bhi.n	80028e8 <HAL_I2C_Init+0x84>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a7a      	ldr	r2, [pc, #488]	; (8002ac4 <HAL_I2C_Init+0x260>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	bf94      	ite	ls
 80028e0:	2301      	movls	r3, #1
 80028e2:	2300      	movhi	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	e006      	b.n	80028f6 <HAL_I2C_Init+0x92>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a77      	ldr	r2, [pc, #476]	; (8002ac8 <HAL_I2C_Init+0x264>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	bf94      	ite	ls
 80028f0:	2301      	movls	r3, #1
 80028f2:	2300      	movhi	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e0db      	b.n	8002ab6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4a72      	ldr	r2, [pc, #456]	; (8002acc <HAL_I2C_Init+0x268>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0c9b      	lsrs	r3, r3, #18
 8002908:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a64      	ldr	r2, [pc, #400]	; (8002ac0 <HAL_I2C_Init+0x25c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d802      	bhi.n	8002938 <HAL_I2C_Init+0xd4>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3301      	adds	r3, #1
 8002936:	e009      	b.n	800294c <HAL_I2C_Init+0xe8>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	4a63      	ldr	r2, [pc, #396]	; (8002ad0 <HAL_I2C_Init+0x26c>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	3301      	adds	r3, #1
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	430b      	orrs	r3, r1
 8002952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800295e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4956      	ldr	r1, [pc, #344]	; (8002ac0 <HAL_I2C_Init+0x25c>)
 8002968:	428b      	cmp	r3, r1
 800296a:	d80d      	bhi.n	8002988 <HAL_I2C_Init+0x124>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e59      	subs	r1, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fbb1 f3f3 	udiv	r3, r1, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	2b04      	cmp	r3, #4
 8002982:	bf38      	it	cc
 8002984:	2304      	movcc	r3, #4
 8002986:	e04f      	b.n	8002a28 <HAL_I2C_Init+0x1c4>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d111      	bne.n	80029b4 <HAL_I2C_Init+0x150>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1e58      	subs	r0, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	440b      	add	r3, r1
 800299e:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e012      	b.n	80029da <HAL_I2C_Init+0x176>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1e58      	subs	r0, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	0099      	lsls	r1, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ca:	3301      	adds	r3, #1
 80029cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bf0c      	ite	eq
 80029d4:	2301      	moveq	r3, #1
 80029d6:	2300      	movne	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Init+0x17e>
 80029de:	2301      	movs	r3, #1
 80029e0:	e022      	b.n	8002a28 <HAL_I2C_Init+0x1c4>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10e      	bne.n	8002a08 <HAL_I2C_Init+0x1a4>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1e58      	subs	r0, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6859      	ldr	r1, [r3, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	440b      	add	r3, r1
 80029f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a06:	e00f      	b.n	8002a28 <HAL_I2C_Init+0x1c4>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e58      	subs	r0, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	0099      	lsls	r1, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	6809      	ldr	r1, [r1, #0]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6911      	ldr	r1, [r2, #16]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68d2      	ldr	r2, [r2, #12]
 8002a62:	4311      	orrs	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	000186a0 	.word	0x000186a0
 8002ac4:	001e847f 	.word	0x001e847f
 8002ac8:	003d08ff 	.word	0x003d08ff
 8002acc:	431bde83 	.word	0x431bde83
 8002ad0:	10624dd3 	.word	0x10624dd3

08002ad4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	817b      	strh	r3, [r7, #10]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff f9ee 	bl	8001ec8 <HAL_GetTick>
 8002aec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	f040 80e0 	bne.w	8002cbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2319      	movs	r3, #25
 8002b02:	2201      	movs	r2, #1
 8002b04:	4970      	ldr	r1, [pc, #448]	; (8002cc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 ff4a 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b12:	2302      	movs	r3, #2
 8002b14:	e0d3      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_I2C_Master_Transmit+0x50>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e0cc      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x1ea>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d007      	beq.n	8002b4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2221      	movs	r2, #33	; 0x21
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2210      	movs	r2, #16
 8002b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	893a      	ldrh	r2, [r7, #8]
 8002b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a50      	ldr	r2, [pc, #320]	; (8002ccc <HAL_I2C_Master_Transmit+0x1f8>)
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b8c:	8979      	ldrh	r1, [r7, #10]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	6a3a      	ldr	r2, [r7, #32]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fd1e 	bl	80035d4 <I2C_MasterRequestWrite>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e08d      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bb8:	e066      	b.n	8002c88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	6a39      	ldr	r1, [r7, #32]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 ffc4 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d107      	bne.n	8002be2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e06b      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	781a      	ldrb	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d11b      	bne.n	8002c5c <HAL_I2C_Master_Transmit+0x188>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d017      	beq.n	8002c5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	6a39      	ldr	r1, [r7, #32]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 ffb4 	bl	8003bce <I2C_WaitOnBTFFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d107      	bne.n	8002c84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e01a      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d194      	bne.n	8002bba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e000      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cbc:	2302      	movs	r3, #2
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	00100002 	.word	0x00100002
 8002ccc:	ffff0000 	.word	0xffff0000

08002cd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08c      	sub	sp, #48	; 0x30
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	460b      	mov	r3, r1
 8002cde:	817b      	strh	r3, [r7, #10]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff f8ee 	bl	8001ec8 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	f040 8238 	bne.w	800316c <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2319      	movs	r3, #25
 8002d02:	2201      	movs	r2, #1
 8002d04:	497e      	ldr	r1, [pc, #504]	; (8002f00 <HAL_I2C_Master_Receive+0x230>)
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fe4a 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
 8002d14:	e22b      	b.n	800316e <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_I2C_Master_Receive+0x54>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e224      	b.n	800316e <HAL_I2C_Master_Receive+0x49e>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d007      	beq.n	8002d4a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2222      	movs	r2, #34	; 0x22
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2210      	movs	r2, #16
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	893a      	ldrh	r2, [r7, #8]
 8002d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4a5e      	ldr	r2, [pc, #376]	; (8002f04 <HAL_I2C_Master_Receive+0x234>)
 8002d8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d8c:	8979      	ldrh	r1, [r7, #10]
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fca0 	bl	80036d8 <I2C_MasterRequestRead>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e1e5      	b.n	800316e <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d113      	bne.n	8002dd2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e1b9      	b.n	8003146 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d11d      	bne.n	8002e16 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e12:	b662      	cpsie	i
 8002e14:	e197      	b.n	8003146 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d11d      	bne.n	8002e5a <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e2e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e56:	b662      	cpsie	i
 8002e58:	e175      	b.n	8003146 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e80:	e161      	b.n	8003146 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	f200 811a 	bhi.w	80030c0 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d123      	bne.n	8002edc <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 fed9 	bl	8003c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e162      	b.n	800316e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eda:	e134      	b.n	8003146 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d150      	bne.n	8002f86 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	2200      	movs	r2, #0
 8002eec:	4906      	ldr	r1, [pc, #24]	; (8002f08 <HAL_I2C_Master_Receive+0x238>)
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fd56 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e137      	b.n	800316e <HAL_I2C_Master_Receive+0x49e>
 8002efe:	bf00      	nop
 8002f00:	00100002 	.word	0x00100002
 8002f04:	ffff0000 	.word	0xffff0000
 8002f08:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f0c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f50:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f84:	e0df      	b.n	8003146 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	497a      	ldr	r1, [pc, #488]	; (8003178 <HAL_I2C_Master_Receive+0x4a8>)
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fd05 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0e6      	b.n	800316e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fe4:	4b65      	ldr	r3, [pc, #404]	; (800317c <HAL_I2C_Master_Receive+0x4ac>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	4a65      	ldr	r2, [pc, #404]	; (8003180 <HAL_I2C_Master_Receive+0x4b0>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	0a1a      	lsrs	r2, r3, #8
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	00da      	lsls	r2, r3, #3
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	3b01      	subs	r3, #1
 8003002:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d117      	bne.n	800303a <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800302c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e099      	b.n	800316e <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b04      	cmp	r3, #4
 8003046:	d1da      	bne.n	8002ffe <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	855a      	strh	r2, [r3, #42]	; 0x2a
 800308a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030be:	e042      	b.n	8003146 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fdc3 	bl	8003c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e04c      	b.n	800316e <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b04      	cmp	r3, #4
 8003112:	d118      	bne.n	8003146 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	f47f ae99 	bne.w	8002e82 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e000      	b.n	800316e <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3728      	adds	r7, #40	; 0x28
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	00010004 	.word	0x00010004
 800317c:	2000000c 	.word	0x2000000c
 8003180:	14f8b589 	.word	0x14f8b589

08003184 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	4608      	mov	r0, r1
 800318e:	4611      	mov	r1, r2
 8003190:	461a      	mov	r2, r3
 8003192:	4603      	mov	r3, r0
 8003194:	817b      	strh	r3, [r7, #10]
 8003196:	460b      	mov	r3, r1
 8003198:	813b      	strh	r3, [r7, #8]
 800319a:	4613      	mov	r3, r2
 800319c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800319e:	f7fe fe93 	bl	8001ec8 <HAL_GetTick>
 80031a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	f040 80d9 	bne.w	8003364 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2319      	movs	r3, #25
 80031b8:	2201      	movs	r2, #1
 80031ba:	496d      	ldr	r1, [pc, #436]	; (8003370 <HAL_I2C_Mem_Write+0x1ec>)
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fbef 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
 80031ca:	e0cc      	b.n	8003366 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_I2C_Mem_Write+0x56>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e0c5      	b.n	8003366 <HAL_I2C_Mem_Write+0x1e2>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d007      	beq.n	8003200 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800320e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2221      	movs	r2, #33	; 0x21
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2240      	movs	r2, #64	; 0x40
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a3a      	ldr	r2, [r7, #32]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003230:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4a4d      	ldr	r2, [pc, #308]	; (8003374 <HAL_I2C_Mem_Write+0x1f0>)
 8003240:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003242:	88f8      	ldrh	r0, [r7, #6]
 8003244:	893a      	ldrh	r2, [r7, #8]
 8003246:	8979      	ldrh	r1, [r7, #10]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	4603      	mov	r3, r0
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fb0e 	bl	8003874 <I2C_RequestMemoryWrite>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d052      	beq.n	8003304 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e081      	b.n	8003366 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fc70 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	2b04      	cmp	r3, #4
 8003278:	d107      	bne.n	800328a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003288:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e06b      	b.n	8003366 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d11b      	bne.n	8003304 <HAL_I2C_Mem_Write+0x180>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d017      	beq.n	8003304 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	781a      	ldrb	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1aa      	bne.n	8003262 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fc5c 	bl	8003bce <I2C_WaitOnBTFFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00d      	beq.n	8003338 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	2b04      	cmp	r3, #4
 8003322:	d107      	bne.n	8003334 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003332:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e016      	b.n	8003366 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	00100002 	.word	0x00100002
 8003374:	ffff0000 	.word	0xffff0000

08003378 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	; 0x28
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	460b      	mov	r3, r1
 8003386:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7fe fd9e 	bl	8001ec8 <HAL_GetTick>
 800338c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800338e:	2301      	movs	r3, #1
 8003390:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b20      	cmp	r3, #32
 800339c:	f040 8111 	bne.w	80035c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2319      	movs	r3, #25
 80033a6:	2201      	movs	r2, #1
 80033a8:	4988      	ldr	r1, [pc, #544]	; (80035cc <HAL_I2C_IsDeviceReady+0x254>)
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 faf8 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
 80033b8:	e104      	b.n	80035c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_I2C_IsDeviceReady+0x50>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e0fd      	b.n	80035c4 <HAL_I2C_IsDeviceReady+0x24c>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d007      	beq.n	80033ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2224      	movs	r2, #36	; 0x24
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a70      	ldr	r2, [pc, #448]	; (80035d0 <HAL_I2C_IsDeviceReady+0x258>)
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003420:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2200      	movs	r2, #0
 800342a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fab6 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00d      	beq.n	8003456 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003448:	d103      	bne.n	8003452 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0b6      	b.n	80035c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003464:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003466:	f7fe fd2f 	bl	8001ec8 <HAL_GetTick>
 800346a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	bf0c      	ite	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	2300      	movne	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003490:	bf0c      	ite	eq
 8003492:	2301      	moveq	r3, #1
 8003494:	2300      	movne	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800349a:	e025      	b.n	80034e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800349c:	f7fe fd14 	bl	8001ec8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d302      	bcc.n	80034b2 <HAL_I2C_IsDeviceReady+0x13a>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	22a0      	movs	r2, #160	; 0xa0
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2ba0      	cmp	r3, #160	; 0xa0
 80034f2:	d005      	beq.n	8003500 <HAL_I2C_IsDeviceReady+0x188>
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <HAL_I2C_IsDeviceReady+0x188>
 80034fa:	7dbb      	ldrb	r3, [r7, #22]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0cd      	beq.n	800349c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	d129      	bne.n	800356a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003524:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2319      	movs	r3, #25
 8003542:	2201      	movs	r2, #1
 8003544:	4921      	ldr	r1, [pc, #132]	; (80035cc <HAL_I2C_IsDeviceReady+0x254>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fa2a 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e036      	b.n	80035c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	e02c      	b.n	80035c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003578:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003582:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2319      	movs	r3, #25
 800358a:	2201      	movs	r2, #1
 800358c:	490f      	ldr	r1, [pc, #60]	; (80035cc <HAL_I2C_IsDeviceReady+0x254>)
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fa06 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e012      	b.n	80035c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	3301      	adds	r3, #1
 80035a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	f4ff af32 	bcc.w	8003412 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
  }
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	00100002 	.word	0x00100002
 80035d0:	ffff0000 	.word	0xffff0000

080035d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	460b      	mov	r3, r1
 80035e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d006      	beq.n	80035fe <I2C_MasterRequestWrite+0x2a>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d003      	beq.n	80035fe <I2C_MasterRequestWrite+0x2a>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035fc:	d108      	bne.n	8003610 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e00b      	b.n	8003628 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	2b12      	cmp	r3, #18
 8003616:	d107      	bne.n	8003628 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003626:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f9b3 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364e:	d103      	bne.n	8003658 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e035      	b.n	80036c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003664:	d108      	bne.n	8003678 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003666:	897b      	ldrh	r3, [r7, #10]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003674:	611a      	str	r2, [r3, #16]
 8003676:	e01b      	b.n	80036b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003678:	897b      	ldrh	r3, [r7, #10]
 800367a:	11db      	asrs	r3, r3, #7
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f003 0306 	and.w	r3, r3, #6
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f063 030f 	orn	r3, r3, #15
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	490e      	ldr	r1, [pc, #56]	; (80036d0 <I2C_MasterRequestWrite+0xfc>)
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f9d9 	bl	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e010      	b.n	80036c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036a6:	897b      	ldrh	r3, [r7, #10]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	4907      	ldr	r1, [pc, #28]	; (80036d4 <I2C_MasterRequestWrite+0x100>)
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f9c9 	bl	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	00010008 	.word	0x00010008
 80036d4:	00010002 	.word	0x00010002

080036d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	607a      	str	r2, [r7, #4]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	460b      	mov	r3, r1
 80036e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d006      	beq.n	8003712 <I2C_MasterRequestRead+0x3a>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d003      	beq.n	8003712 <I2C_MasterRequestRead+0x3a>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003710:	d108      	bne.n	8003724 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e00b      	b.n	800373c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	2b11      	cmp	r3, #17
 800372a:	d107      	bne.n	800373c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f929 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003762:	d103      	bne.n	800376c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e079      	b.n	8003864 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003778:	d108      	bne.n	800378c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	b2da      	uxtb	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	611a      	str	r2, [r3, #16]
 800378a:	e05f      	b.n	800384c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800378c:	897b      	ldrh	r3, [r7, #10]
 800378e:	11db      	asrs	r3, r3, #7
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f003 0306 	and.w	r3, r3, #6
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f063 030f 	orn	r3, r3, #15
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4930      	ldr	r1, [pc, #192]	; (800386c <I2C_MasterRequestRead+0x194>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f94f 	bl	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e054      	b.n	8003864 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ba:	897b      	ldrh	r3, [r7, #10]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	4929      	ldr	r1, [pc, #164]	; (8003870 <I2C_MasterRequestRead+0x198>)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f93f 	bl	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e044      	b.n	8003864 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f8c7 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003826:	d103      	bne.n	8003830 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800382e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e017      	b.n	8003864 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003834:	897b      	ldrh	r3, [r7, #10]
 8003836:	11db      	asrs	r3, r3, #7
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f003 0306 	and.w	r3, r3, #6
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f063 030e 	orn	r3, r3, #14
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4907      	ldr	r1, [pc, #28]	; (8003870 <I2C_MasterRequestRead+0x198>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f8fb 	bl	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	00010008 	.word	0x00010008
 8003870:	00010002 	.word	0x00010002

08003874 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	4608      	mov	r0, r1
 800387e:	4611      	mov	r1, r2
 8003880:	461a      	mov	r2, r3
 8003882:	4603      	mov	r3, r0
 8003884:	817b      	strh	r3, [r7, #10]
 8003886:	460b      	mov	r3, r1
 8003888:	813b      	strh	r3, [r7, #8]
 800388a:	4613      	mov	r3, r2
 800388c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800389c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f878 	bl	80039a0 <I2C_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c4:	d103      	bne.n	80038ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e05f      	b.n	8003992 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038d2:	897b      	ldrh	r3, [r7, #10]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	492d      	ldr	r1, [pc, #180]	; (800399c <I2C_RequestMemoryWrite+0x128>)
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f8b0 	bl	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e04c      	b.n	8003992 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	6a39      	ldr	r1, [r7, #32]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f91a 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b04      	cmp	r3, #4
 8003924:	d107      	bne.n	8003936 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003934:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e02b      	b.n	8003992 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003940:	893b      	ldrh	r3, [r7, #8]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]
 800394a:	e021      	b.n	8003990 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800394c:	893b      	ldrh	r3, [r7, #8]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	b29b      	uxth	r3, r3
 8003952:	b2da      	uxtb	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395c:	6a39      	ldr	r1, [r7, #32]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f8f4 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b04      	cmp	r3, #4
 8003970:	d107      	bne.n	8003982 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003980:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e005      	b.n	8003992 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003986:	893b      	ldrh	r3, [r7, #8]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	00010002 	.word	0x00010002

080039a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b0:	e025      	b.n	80039fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d021      	beq.n	80039fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fe fa85 	bl	8001ec8 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d116      	bne.n	80039fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f043 0220 	orr.w	r2, r3, #32
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e023      	b.n	8003a46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	0c1b      	lsrs	r3, r3, #16
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d10d      	bne.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4013      	ands	r3, r2
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bf0c      	ite	eq
 8003a1a:	2301      	moveq	r3, #1
 8003a1c:	2300      	movne	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	e00c      	b.n	8003a3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	43da      	mvns	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	bf0c      	ite	eq
 8003a36:	2301      	moveq	r3, #1
 8003a38:	2300      	movne	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d0b6      	beq.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a5c:	e051      	b.n	8003b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6c:	d123      	bne.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e046      	b.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d021      	beq.n	8003b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003abe:	f7fe fa03 	bl	8001ec8 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d302      	bcc.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d116      	bne.n	8003b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f043 0220 	orr.w	r2, r3, #32
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e020      	b.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10c      	bne.n	8003b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	43da      	mvns	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4013      	ands	r3, r2
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bf14      	ite	ne
 8003b1e:	2301      	movne	r3, #1
 8003b20:	2300      	moveq	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	e00b      	b.n	8003b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	43da      	mvns	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4013      	ands	r3, r2
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf14      	ite	ne
 8003b38:	2301      	movne	r3, #1
 8003b3a:	2300      	moveq	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d18d      	bne.n	8003a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b58:	e02d      	b.n	8003bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f8ce 	bl	8003cfc <I2C_IsAcknowledgeFailed>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e02d      	b.n	8003bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d021      	beq.n	8003bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fe f9a9 	bl	8001ec8 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d116      	bne.n	8003bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e007      	b.n	8003bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc0:	2b80      	cmp	r3, #128	; 0x80
 8003bc2:	d1ca      	bne.n	8003b5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bda:	e02d      	b.n	8003c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f88d 	bl	8003cfc <I2C_IsAcknowledgeFailed>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e02d      	b.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf2:	d021      	beq.n	8003c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf4:	f7fe f968 	bl	8001ec8 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d302      	bcc.n	8003c0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d116      	bne.n	8003c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e007      	b.n	8003c48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d1ca      	bne.n	8003bdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c5c:	e042      	b.n	8003ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d119      	bne.n	8003ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0210 	mvn.w	r2, #16
 8003c74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e029      	b.n	8003cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca0:	f7fe f912 	bl	8001ec8 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d302      	bcc.n	8003cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d116      	bne.n	8003ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e007      	b.n	8003cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d1b5      	bne.n	8003c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d12:	d11b      	bne.n	8003d4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f043 0204 	orr.w	r2, r3, #4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e26c      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8087 	beq.w	8003e86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d78:	4b92      	ldr	r3, [pc, #584]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d00c      	beq.n	8003d9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d84:	4b8f      	ldr	r3, [pc, #572]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d112      	bne.n	8003db6 <HAL_RCC_OscConfig+0x5e>
 8003d90:	4b8c      	ldr	r3, [pc, #560]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9c:	d10b      	bne.n	8003db6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9e:	4b89      	ldr	r3, [pc, #548]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d06c      	beq.n	8003e84 <HAL_RCC_OscConfig+0x12c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d168      	bne.n	8003e84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e246      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbe:	d106      	bne.n	8003dce <HAL_RCC_OscConfig+0x76>
 8003dc0:	4b80      	ldr	r3, [pc, #512]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a7f      	ldr	r2, [pc, #508]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	e02e      	b.n	8003e2c <HAL_RCC_OscConfig+0xd4>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x98>
 8003dd6:	4b7b      	ldr	r3, [pc, #492]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a7a      	ldr	r2, [pc, #488]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	4b78      	ldr	r3, [pc, #480]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a77      	ldr	r2, [pc, #476]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e01d      	b.n	8003e2c <HAL_RCC_OscConfig+0xd4>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCC_OscConfig+0xbc>
 8003dfa:	4b72      	ldr	r3, [pc, #456]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a71      	ldr	r2, [pc, #452]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	4b6f      	ldr	r3, [pc, #444]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6e      	ldr	r2, [pc, #440]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e00b      	b.n	8003e2c <HAL_RCC_OscConfig+0xd4>
 8003e14:	4b6b      	ldr	r3, [pc, #428]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a6a      	ldr	r2, [pc, #424]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4b68      	ldr	r3, [pc, #416]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a67      	ldr	r2, [pc, #412]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d013      	beq.n	8003e5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fe f848 	bl	8001ec8 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe f844 	bl	8001ec8 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	; 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e1fa      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	4b5d      	ldr	r3, [pc, #372]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0xe4>
 8003e5a:	e014      	b.n	8003e86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe f834 	bl	8001ec8 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e64:	f7fe f830 	bl	8001ec8 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	; 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e1e6      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e76:	4b53      	ldr	r3, [pc, #332]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x10c>
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d063      	beq.n	8003f5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e92:	4b4c      	ldr	r3, [pc, #304]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e9e:	4b49      	ldr	r3, [pc, #292]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d11c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x18c>
 8003eaa:	4b46      	ldr	r3, [pc, #280]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d116      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_RCC_OscConfig+0x176>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d001      	beq.n	8003ece <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e1ba      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ece:	4b3d      	ldr	r3, [pc, #244]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4939      	ldr	r1, [pc, #228]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee2:	e03a      	b.n	8003f5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eec:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef2:	f7fd ffe9 	bl	8001ec8 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efa:	f7fd ffe5 	bl	8001ec8 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e19b      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4927      	ldr	r1, [pc, #156]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]
 8003f2c:	e015      	b.n	8003f5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f2e:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fd ffc8 	bl	8001ec8 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3c:	f7fd ffc4 	bl	8001ec8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e17a      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4e:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d03a      	beq.n	8003fdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d019      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6e:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <HAL_RCC_OscConfig+0x274>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f74:	f7fd ffa8 	bl	8001ec8 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7c:	f7fd ffa4 	bl	8001ec8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e15a      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	f000 fada 	bl	8004554 <RCC_Delay>
 8003fa0:	e01c      	b.n	8003fdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <HAL_RCC_OscConfig+0x274>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa8:	f7fd ff8e 	bl	8001ec8 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fae:	e00f      	b.n	8003fd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fd ff8a 	bl	8001ec8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d908      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e140      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	42420000 	.word	0x42420000
 8003fcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd0:	4b9e      	ldr	r3, [pc, #632]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e9      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80a6 	beq.w	8004136 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fee:	4b97      	ldr	r3, [pc, #604]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10d      	bne.n	8004016 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ffa:	4b94      	ldr	r3, [pc, #592]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	4a93      	ldr	r2, [pc, #588]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004004:	61d3      	str	r3, [r2, #28]
 8004006:	4b91      	ldr	r3, [pc, #580]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004012:	2301      	movs	r3, #1
 8004014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004016:	4b8e      	ldr	r3, [pc, #568]	; (8004250 <HAL_RCC_OscConfig+0x4f8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401e:	2b00      	cmp	r3, #0
 8004020:	d118      	bne.n	8004054 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004022:	4b8b      	ldr	r3, [pc, #556]	; (8004250 <HAL_RCC_OscConfig+0x4f8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a8a      	ldr	r2, [pc, #552]	; (8004250 <HAL_RCC_OscConfig+0x4f8>)
 8004028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402e:	f7fd ff4b 	bl	8001ec8 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004036:	f7fd ff47 	bl	8001ec8 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b64      	cmp	r3, #100	; 0x64
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e0fd      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004048:	4b81      	ldr	r3, [pc, #516]	; (8004250 <HAL_RCC_OscConfig+0x4f8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d106      	bne.n	800406a <HAL_RCC_OscConfig+0x312>
 800405c:	4b7b      	ldr	r3, [pc, #492]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	4a7a      	ldr	r2, [pc, #488]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	6213      	str	r3, [r2, #32]
 8004068:	e02d      	b.n	80040c6 <HAL_RCC_OscConfig+0x36e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10c      	bne.n	800408c <HAL_RCC_OscConfig+0x334>
 8004072:	4b76      	ldr	r3, [pc, #472]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4a75      	ldr	r2, [pc, #468]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	6213      	str	r3, [r2, #32]
 800407e:	4b73      	ldr	r3, [pc, #460]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	4a72      	ldr	r2, [pc, #456]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004084:	f023 0304 	bic.w	r3, r3, #4
 8004088:	6213      	str	r3, [r2, #32]
 800408a:	e01c      	b.n	80040c6 <HAL_RCC_OscConfig+0x36e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	2b05      	cmp	r3, #5
 8004092:	d10c      	bne.n	80040ae <HAL_RCC_OscConfig+0x356>
 8004094:	4b6d      	ldr	r3, [pc, #436]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4a6c      	ldr	r2, [pc, #432]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 800409a:	f043 0304 	orr.w	r3, r3, #4
 800409e:	6213      	str	r3, [r2, #32]
 80040a0:	4b6a      	ldr	r3, [pc, #424]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4a69      	ldr	r2, [pc, #420]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6213      	str	r3, [r2, #32]
 80040ac:	e00b      	b.n	80040c6 <HAL_RCC_OscConfig+0x36e>
 80040ae:	4b67      	ldr	r3, [pc, #412]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	4a66      	ldr	r2, [pc, #408]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	6213      	str	r3, [r2, #32]
 80040ba:	4b64      	ldr	r3, [pc, #400]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4a63      	ldr	r2, [pc, #396]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 80040c0:	f023 0304 	bic.w	r3, r3, #4
 80040c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d015      	beq.n	80040fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ce:	f7fd fefb 	bl	8001ec8 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fd fef7 	bl	8001ec8 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e0ab      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	4b57      	ldr	r3, [pc, #348]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ee      	beq.n	80040d6 <HAL_RCC_OscConfig+0x37e>
 80040f8:	e014      	b.n	8004124 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fa:	f7fd fee5 	bl	8001ec8 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fd fee1 	bl	8001ec8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e095      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004118:	4b4c      	ldr	r3, [pc, #304]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ee      	bne.n	8004102 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d105      	bne.n	8004136 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412a:	4b48      	ldr	r3, [pc, #288]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	4a47      	ldr	r2, [pc, #284]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004134:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8081 	beq.w	8004242 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004140:	4b42      	ldr	r3, [pc, #264]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b08      	cmp	r3, #8
 800414a:	d061      	beq.n	8004210 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d146      	bne.n	80041e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004154:	4b3f      	ldr	r3, [pc, #252]	; (8004254 <HAL_RCC_OscConfig+0x4fc>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415a:	f7fd feb5 	bl	8001ec8 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004162:	f7fd feb1 	bl	8001ec8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e067      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004174:	4b35      	ldr	r3, [pc, #212]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004188:	d108      	bne.n	800419c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800418a:	4b30      	ldr	r3, [pc, #192]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	492d      	ldr	r1, [pc, #180]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004198:	4313      	orrs	r3, r2
 800419a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800419c:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a19      	ldr	r1, [r3, #32]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	430b      	orrs	r3, r1
 80041ae:	4927      	ldr	r1, [pc, #156]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b4:	4b27      	ldr	r3, [pc, #156]	; (8004254 <HAL_RCC_OscConfig+0x4fc>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ba:	f7fd fe85 	bl	8001ec8 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c2:	f7fd fe81 	bl	8001ec8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e037      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041d4:	4b1d      	ldr	r3, [pc, #116]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x46a>
 80041e0:	e02f      	b.n	8004242 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <HAL_RCC_OscConfig+0x4fc>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fd fe6e 	bl	8001ec8 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fd fe6a 	bl	8001ec8 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e020      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x498>
 800420e:	e018      	b.n	8004242 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e013      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_RCC_OscConfig+0x4f4>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	429a      	cmp	r2, r3
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d001      	beq.n	8004242 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000
 8004250:	40007000 	.word	0x40007000
 8004254:	42420060 	.word	0x42420060

08004258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0d0      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800426c:	4b6a      	ldr	r3, [pc, #424]	; (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d910      	bls.n	800429c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b67      	ldr	r3, [pc, #412]	; (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 0207 	bic.w	r2, r3, #7
 8004282:	4965      	ldr	r1, [pc, #404]	; (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b63      	ldr	r3, [pc, #396]	; (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0b8      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d020      	beq.n	80042ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b4:	4b59      	ldr	r3, [pc, #356]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a58      	ldr	r2, [pc, #352]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80042ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042cc:	4b53      	ldr	r3, [pc, #332]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4a52      	ldr	r2, [pc, #328]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d8:	4b50      	ldr	r3, [pc, #320]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	494d      	ldr	r1, [pc, #308]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d040      	beq.n	8004378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	4b47      	ldr	r3, [pc, #284]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d115      	bne.n	8004336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e07f      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d107      	bne.n	8004326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004316:	4b41      	ldr	r3, [pc, #260]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e073      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004326:	4b3d      	ldr	r3, [pc, #244]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e06b      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004336:	4b39      	ldr	r3, [pc, #228]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f023 0203 	bic.w	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4936      	ldr	r1, [pc, #216]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	4313      	orrs	r3, r2
 8004346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004348:	f7fd fdbe 	bl	8001ec8 <HAL_GetTick>
 800434c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	e00a      	b.n	8004366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004350:	f7fd fdba 	bl	8001ec8 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	; 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e053      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004366:	4b2d      	ldr	r3, [pc, #180]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 020c 	and.w	r2, r3, #12
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	429a      	cmp	r2, r3
 8004376:	d1eb      	bne.n	8004350 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004378:	4b27      	ldr	r3, [pc, #156]	; (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d210      	bcs.n	80043a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b24      	ldr	r3, [pc, #144]	; (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0207 	bic.w	r2, r3, #7
 800438e:	4922      	ldr	r1, [pc, #136]	; (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b20      	ldr	r3, [pc, #128]	; (8004418 <HAL_RCC_ClockConfig+0x1c0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e032      	b.n	800440e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b4:	4b19      	ldr	r3, [pc, #100]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4916      	ldr	r1, [pc, #88]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	490e      	ldr	r1, [pc, #56]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043e6:	f000 f821 	bl	800442c <HAL_RCC_GetSysClockFreq>
 80043ea:	4601      	mov	r1, r0
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_RCC_ClockConfig+0x1c4>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <HAL_RCC_ClockConfig+0x1c8>)
 80043f8:	5cd3      	ldrb	r3, [r2, r3]
 80043fa:	fa21 f303 	lsr.w	r3, r1, r3
 80043fe:	4a09      	ldr	r2, [pc, #36]	; (8004424 <HAL_RCC_ClockConfig+0x1cc>)
 8004400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_RCC_ClockConfig+0x1d0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fd fd1c 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40022000 	.word	0x40022000
 800441c:	40021000 	.word	0x40021000
 8004420:	080058d8 	.word	0x080058d8
 8004424:	2000000c 	.word	0x2000000c
 8004428:	20000010 	.word	0x20000010

0800442c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800442c:	b490      	push	{r4, r7}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004432:	4b2a      	ldr	r3, [pc, #168]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004434:	1d3c      	adds	r4, r7, #4
 8004436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004438:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800443c:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004456:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b04      	cmp	r3, #4
 8004464:	d002      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x40>
 8004466:	2b08      	cmp	r3, #8
 8004468:	d003      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x46>
 800446a:	e02d      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800446c:	4b1e      	ldr	r3, [pc, #120]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800446e:	623b      	str	r3, [r7, #32]
      break;
 8004470:	e02d      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	0c9b      	lsrs	r3, r3, #18
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800447e:	4413      	add	r3, r2
 8004480:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004484:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d013      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004490:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	0c5b      	lsrs	r3, r3, #17
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800449e:	4413      	add	r3, r2
 80044a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	4a0f      	ldr	r2, [pc, #60]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044aa:	fb02 f203 	mul.w	r2, r2, r3
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	e004      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4a0c      	ldr	r2, [pc, #48]	; (80044ec <HAL_RCC_GetSysClockFreq+0xc0>)
 80044bc:	fb02 f303 	mul.w	r3, r2, r3
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	623b      	str	r3, [r7, #32]
      break;
 80044c6:	e002      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044ca:	623b      	str	r3, [r7, #32]
      break;
 80044cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ce:	6a3b      	ldr	r3, [r7, #32]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3728      	adds	r7, #40	; 0x28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc90      	pop	{r4, r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	080058c4 	.word	0x080058c4
 80044e0:	080058d4 	.word	0x080058d4
 80044e4:	40021000 	.word	0x40021000
 80044e8:	007a1200 	.word	0x007a1200
 80044ec:	003d0900 	.word	0x003d0900

080044f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f4:	4b02      	ldr	r3, [pc, #8]	; (8004500 <HAL_RCC_GetHCLKFreq+0x10>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr
 8004500:	2000000c 	.word	0x2000000c

08004504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004508:	f7ff fff2 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 800450c:	4601      	mov	r1, r0
 800450e:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4a03      	ldr	r2, [pc, #12]	; (8004528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800451a:	5cd3      	ldrb	r3, [r2, r3]
 800451c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	080058e8 	.word	0x080058e8

0800452c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004530:	f7ff ffde 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004534:	4601      	mov	r1, r0
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	0adb      	lsrs	r3, r3, #11
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4a03      	ldr	r2, [pc, #12]	; (8004550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004542:	5cd3      	ldrb	r3, [r2, r3]
 8004544:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000
 8004550:	080058e8 	.word	0x080058e8

08004554 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <RCC_Delay+0x34>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0a      	ldr	r2, [pc, #40]	; (800458c <RCC_Delay+0x38>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	0a5b      	lsrs	r3, r3, #9
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004570:	bf00      	nop
  }
  while (Delay --);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1e5a      	subs	r2, r3, #1
 8004576:	60fa      	str	r2, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f9      	bne.n	8004570 <RCC_Delay+0x1c>
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	2000000c 	.word	0x2000000c
 800458c:	10624dd3 	.word	0x10624dd3

08004590 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d07d      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80045ac:	2300      	movs	r3, #0
 80045ae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b0:	4b4f      	ldr	r3, [pc, #316]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10d      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045bc:	4b4c      	ldr	r3, [pc, #304]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	4a4b      	ldr	r2, [pc, #300]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c6:	61d3      	str	r3, [r2, #28]
 80045c8:	4b49      	ldr	r3, [pc, #292]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d4:	2301      	movs	r3, #1
 80045d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d8:	4b46      	ldr	r3, [pc, #280]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d118      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045e4:	4b43      	ldr	r3, [pc, #268]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a42      	ldr	r2, [pc, #264]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f0:	f7fd fc6a 	bl	8001ec8 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f6:	e008      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f8:	f7fd fc66 	bl	8001ec8 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b64      	cmp	r3, #100	; 0x64
 8004604:	d901      	bls.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e06d      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460a:	4b3a      	ldr	r3, [pc, #232]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004616:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d02e      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	429a      	cmp	r2, r3
 8004632:	d027      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004634:	4b2e      	ldr	r3, [pc, #184]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800463e:	4b2e      	ldr	r3, [pc, #184]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004644:	4b2c      	ldr	r3, [pc, #176]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800464a:	4a29      	ldr	r2, [pc, #164]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d014      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465a:	f7fd fc35 	bl	8001ec8 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004660:	e00a      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fd fc31 	bl	8001ec8 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d901      	bls.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e036      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ee      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004684:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4917      	ldr	r1, [pc, #92]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004692:	4313      	orrs	r3, r2
 8004694:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d105      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469c:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4a13      	ldr	r2, [pc, #76]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046b4:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	490b      	ldr	r1, [pc, #44]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046d2:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	4904      	ldr	r1, [pc, #16]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40007000 	.word	0x40007000
 80046f8:	42420440 	.word	0x42420440

080046fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e041      	b.n	8004792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fd fa2e 	bl	8001b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f000 fb02 	bl	8004d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e041      	b.n	8004830 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d106      	bne.n	80047c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f839 	bl	8004838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f000 fab3 	bl	8004d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
	...

0800484c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_TIM_PWM_Start+0x24>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	bf14      	ite	ne
 8004868:	2301      	movne	r3, #1
 800486a:	2300      	moveq	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	e022      	b.n	80048b6 <HAL_TIM_PWM_Start+0x6a>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b04      	cmp	r3, #4
 8004874:	d109      	bne.n	800488a <HAL_TIM_PWM_Start+0x3e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b01      	cmp	r3, #1
 8004880:	bf14      	ite	ne
 8004882:	2301      	movne	r3, #1
 8004884:	2300      	moveq	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	e015      	b.n	80048b6 <HAL_TIM_PWM_Start+0x6a>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b08      	cmp	r3, #8
 800488e:	d109      	bne.n	80048a4 <HAL_TIM_PWM_Start+0x58>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e008      	b.n	80048b6 <HAL_TIM_PWM_Start+0x6a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	bf14      	ite	ne
 80048b0:	2301      	movne	r3, #1
 80048b2:	2300      	moveq	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e05e      	b.n	800497c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_PWM_Start+0x82>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048cc:	e013      	b.n	80048f6 <HAL_TIM_PWM_Start+0xaa>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d104      	bne.n	80048de <HAL_TIM_PWM_Start+0x92>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048dc:	e00b      	b.n	80048f6 <HAL_TIM_PWM_Start+0xaa>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d104      	bne.n	80048ee <HAL_TIM_PWM_Start+0xa2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ec:	e003      	b.n	80048f6 <HAL_TIM_PWM_Start+0xaa>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2201      	movs	r2, #1
 80048fc:	6839      	ldr	r1, [r7, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fca0 	bl	8005244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1e      	ldr	r2, [pc, #120]	; (8004984 <HAL_TIM_PWM_Start+0x138>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d107      	bne.n	800491e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a18      	ldr	r2, [pc, #96]	; (8004984 <HAL_TIM_PWM_Start+0x138>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00e      	beq.n	8004946 <HAL_TIM_PWM_Start+0xfa>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d009      	beq.n	8004946 <HAL_TIM_PWM_Start+0xfa>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a14      	ldr	r2, [pc, #80]	; (8004988 <HAL_TIM_PWM_Start+0x13c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_TIM_PWM_Start+0xfa>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a12      	ldr	r2, [pc, #72]	; (800498c <HAL_TIM_PWM_Start+0x140>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d111      	bne.n	800496a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b06      	cmp	r3, #6
 8004956:	d010      	beq.n	800497a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004968:	e007      	b.n	800497a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0201 	orr.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40000400 	.word	0x40000400
 800498c:	40000800 	.word	0x40000800

08004990 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2200      	movs	r2, #0
 80049a0:	6839      	ldr	r1, [r7, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fc4e 	bl	8005244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a29      	ldr	r2, [pc, #164]	; (8004a54 <HAL_TIM_PWM_Stop+0xc4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d117      	bne.n	80049e2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10f      	bne.n	80049e2 <HAL_TIM_PWM_Stop+0x52>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a1a      	ldr	r2, [r3, #32]
 80049c8:	f240 4344 	movw	r3, #1092	; 0x444
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d107      	bne.n	80049e2 <HAL_TIM_PWM_Stop+0x52>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a1a      	ldr	r2, [r3, #32]
 80049e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10f      	bne.n	8004a12 <HAL_TIM_PWM_Stop+0x82>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6a1a      	ldr	r2, [r3, #32]
 80049f8:	f240 4344 	movw	r3, #1092	; 0x444
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d107      	bne.n	8004a12 <HAL_TIM_PWM_Stop+0x82>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_PWM_Stop+0x92>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a20:	e013      	b.n	8004a4a <HAL_TIM_PWM_Stop+0xba>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Stop+0xa2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a30:	e00b      	b.n	8004a4a <HAL_TIM_PWM_Stop+0xba>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Stop+0xb2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a40:	e003      	b.n	8004a4a <HAL_TIM_PWM_Stop+0xba>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40012c00 	.word	0x40012c00

08004a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e0ac      	b.n	8004bcc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b0c      	cmp	r3, #12
 8004a7e:	f200 809f 	bhi.w	8004bc0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004abd 	.word	0x08004abd
 8004a8c:	08004bc1 	.word	0x08004bc1
 8004a90:	08004bc1 	.word	0x08004bc1
 8004a94:	08004bc1 	.word	0x08004bc1
 8004a98:	08004afd 	.word	0x08004afd
 8004a9c:	08004bc1 	.word	0x08004bc1
 8004aa0:	08004bc1 	.word	0x08004bc1
 8004aa4:	08004bc1 	.word	0x08004bc1
 8004aa8:	08004b3f 	.word	0x08004b3f
 8004aac:	08004bc1 	.word	0x08004bc1
 8004ab0:	08004bc1 	.word	0x08004bc1
 8004ab4:	08004bc1 	.word	0x08004bc1
 8004ab8:	08004b7f 	.word	0x08004b7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 f9a0 	bl	8004e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0208 	orr.w	r2, r2, #8
 8004ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0204 	bic.w	r2, r2, #4
 8004ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6999      	ldr	r1, [r3, #24]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	619a      	str	r2, [r3, #24]
      break;
 8004afa:	e062      	b.n	8004bc2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f9e6 	bl	8004ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6999      	ldr	r1, [r3, #24]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	021a      	lsls	r2, r3, #8
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	619a      	str	r2, [r3, #24]
      break;
 8004b3c:	e041      	b.n	8004bc2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fa2f 	bl	8004fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0208 	orr.w	r2, r2, #8
 8004b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0204 	bic.w	r2, r2, #4
 8004b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69d9      	ldr	r1, [r3, #28]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	61da      	str	r2, [r3, #28]
      break;
 8004b7c:	e021      	b.n	8004bc2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fa79 	bl	800507c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69d9      	ldr	r1, [r3, #28]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	021a      	lsls	r2, r3, #8
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	61da      	str	r2, [r3, #28]
      break;
 8004bbe:	e000      	b.n	8004bc2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004bc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_TIM_ConfigClockSource+0x18>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e0a6      	b.n	8004d3a <HAL_TIM_ConfigClockSource+0x166>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d067      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0x120>
 8004c24:	2b40      	cmp	r3, #64	; 0x40
 8004c26:	d80b      	bhi.n	8004c40 <HAL_TIM_ConfigClockSource+0x6c>
 8004c28:	2b10      	cmp	r3, #16
 8004c2a:	d073      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0x140>
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d802      	bhi.n	8004c36 <HAL_TIM_ConfigClockSource+0x62>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d06f      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c34:	e078      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d06c      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0x140>
 8004c3a:	2b30      	cmp	r3, #48	; 0x30
 8004c3c:	d06a      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c3e:	e073      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c40:	2b70      	cmp	r3, #112	; 0x70
 8004c42:	d00d      	beq.n	8004c60 <HAL_TIM_ConfigClockSource+0x8c>
 8004c44:	2b70      	cmp	r3, #112	; 0x70
 8004c46:	d804      	bhi.n	8004c52 <HAL_TIM_ConfigClockSource+0x7e>
 8004c48:	2b50      	cmp	r3, #80	; 0x50
 8004c4a:	d033      	beq.n	8004cb4 <HAL_TIM_ConfigClockSource+0xe0>
 8004c4c:	2b60      	cmp	r3, #96	; 0x60
 8004c4e:	d041      	beq.n	8004cd4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c50:	e06a      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c56:	d066      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x152>
 8004c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5c:	d017      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c5e:	e063      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	6899      	ldr	r1, [r3, #8]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f000 fac9 	bl	8005206 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	609a      	str	r2, [r3, #8]
      break;
 8004c8c:	e04c      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6899      	ldr	r1, [r3, #8]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f000 fab2 	bl	8005206 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cb0:	609a      	str	r2, [r3, #8]
      break;
 8004cb2:	e039      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f000 fa29 	bl	8005118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2150      	movs	r1, #80	; 0x50
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fa80 	bl	80051d2 <TIM_ITRx_SetConfig>
      break;
 8004cd2:	e029      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	6859      	ldr	r1, [r3, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f000 fa47 	bl	8005174 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2160      	movs	r1, #96	; 0x60
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fa70 	bl	80051d2 <TIM_ITRx_SetConfig>
      break;
 8004cf2:	e019      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6859      	ldr	r1, [r3, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	461a      	mov	r2, r3
 8004d02:	f000 fa09 	bl	8005118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2140      	movs	r1, #64	; 0x40
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fa60 	bl	80051d2 <TIM_ITRx_SetConfig>
      break;
 8004d12:	e009      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f000 fa57 	bl	80051d2 <TIM_ITRx_SetConfig>
        break;
 8004d24:	e000      	b.n	8004d28 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <TIM_Base_SetConfig+0xb8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00b      	beq.n	8004d74 <TIM_Base_SetConfig+0x30>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d62:	d007      	beq.n	8004d74 <TIM_Base_SetConfig+0x30>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a26      	ldr	r2, [pc, #152]	; (8004e00 <TIM_Base_SetConfig+0xbc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <TIM_Base_SetConfig+0x30>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a25      	ldr	r2, [pc, #148]	; (8004e04 <TIM_Base_SetConfig+0xc0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d108      	bne.n	8004d86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a1c      	ldr	r2, [pc, #112]	; (8004dfc <TIM_Base_SetConfig+0xb8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_Base_SetConfig+0x62>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d94:	d007      	beq.n	8004da6 <TIM_Base_SetConfig+0x62>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a19      	ldr	r2, [pc, #100]	; (8004e00 <TIM_Base_SetConfig+0xbc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_Base_SetConfig+0x62>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a18      	ldr	r2, [pc, #96]	; (8004e04 <TIM_Base_SetConfig+0xc0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d108      	bne.n	8004db8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a07      	ldr	r2, [pc, #28]	; (8004dfc <TIM_Base_SetConfig+0xb8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d103      	bne.n	8004dec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	615a      	str	r2, [r3, #20]
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40000800 	.word	0x40000800

08004e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f023 0201 	bic.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0303 	bic.w	r3, r3, #3
 8004e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 0302 	bic.w	r3, r3, #2
 8004e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <TIM_OC1_SetConfig+0xc8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d10c      	bne.n	8004e7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f023 0308 	bic.w	r3, r3, #8
 8004e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f023 0304 	bic.w	r3, r3, #4
 8004e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <TIM_OC1_SetConfig+0xc8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d111      	bne.n	8004eaa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	621a      	str	r2, [r3, #32]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40012c00 	.word	0x40012c00

08004ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f023 0210 	bic.w	r2, r3, #16
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0320 	bic.w	r3, r3, #32
 8004f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <TIM_OC2_SetConfig+0xd0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10d      	bne.n	8004f50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <TIM_OC2_SetConfig+0xd0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d113      	bne.n	8004f80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr
 8004fa4:	40012c00 	.word	0x40012c00

08004fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a1d      	ldr	r2, [pc, #116]	; (8005078 <TIM_OC3_SetConfig+0xd0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d10d      	bne.n	8005022 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800500c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a14      	ldr	r2, [pc, #80]	; (8005078 <TIM_OC3_SetConfig+0xd0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d113      	bne.n	8005052 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	621a      	str	r2, [r3, #32]
}
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40012c00 	.word	0x40012c00

0800507c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	031b      	lsls	r3, r3, #12
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a0f      	ldr	r2, [pc, #60]	; (8005114 <TIM_OC4_SetConfig+0x98>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d109      	bne.n	80050f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	019b      	lsls	r3, r3, #6
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	40012c00 	.word	0x40012c00

08005118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0201 	bic.w	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f023 030a 	bic.w	r3, r3, #10
 8005154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f023 0210 	bic.w	r2, r3, #16
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800519e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	031b      	lsls	r3, r3, #12
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f043 0307 	orr.w	r3, r3, #7
 80051f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	609a      	str	r2, [r3, #8]
}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr

08005206 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005206:	b480      	push	{r7}
 8005208:	b087      	sub	sp, #28
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005220:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	021a      	lsls	r2, r3, #8
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	431a      	orrs	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4313      	orrs	r3, r2
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	609a      	str	r2, [r3, #8]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr

08005244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f003 031f 	and.w	r3, r3, #31
 8005256:	2201      	movs	r2, #1
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1a      	ldr	r2, [r3, #32]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	43db      	mvns	r3, r3
 8005266:	401a      	ands	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	fa01 f303 	lsl.w	r3, r1, r3
 800527c:	431a      	orrs	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	bc80      	pop	{r7}
 800528a:	4770      	bx	lr

0800528c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e046      	b.n	8005332 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a16      	ldr	r2, [pc, #88]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00e      	beq.n	8005306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f0:	d009      	beq.n	8005306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a12      	ldr	r2, [pc, #72]	; (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d004      	beq.n	8005306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a10      	ldr	r2, [pc, #64]	; (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d10c      	bne.n	8005320 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	4313      	orrs	r3, r2
 8005316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800

08005348 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005360:	2302      	movs	r3, #2
 8005362:	e03d      	b.n	80053e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e03f      	b.n	800547c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fc fc81 	bl	8001d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2224      	movs	r2, #36	; 0x24
 800541a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800542c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f904 	bl	800563c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005442:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695a      	ldr	r2, [r3, #20]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005452:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005462:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08a      	sub	sp, #40	; 0x28
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	4613      	mov	r3, r2
 8005492:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d17c      	bne.n	800559e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_UART_Transmit+0x2c>
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e075      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Transmit+0x3e>
 80054be:	2302      	movs	r3, #2
 80054c0:	e06e      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2221      	movs	r2, #33	; 0x21
 80054d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80054d8:	f7fc fcf6 	bl	8001ec8 <HAL_GetTick>
 80054dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f2:	d108      	bne.n	8005506 <HAL_UART_Transmit+0x82>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d104      	bne.n	8005506 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	e003      	b.n	800550e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005516:	e02a      	b.n	800556e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2200      	movs	r2, #0
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f840 	bl	80055a8 <UART_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e036      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005546:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	3302      	adds	r3, #2
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	e007      	b.n	8005560 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	781a      	ldrb	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	3301      	adds	r3, #1
 800555e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005572:	b29b      	uxth	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1cf      	bne.n	8005518 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2200      	movs	r2, #0
 8005580:	2140      	movs	r1, #64	; 0x40
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f810 	bl	80055a8 <UART_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e006      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	e000      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800559e:	2302      	movs	r3, #2
  }
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b8:	e02c      	b.n	8005614 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c0:	d028      	beq.n	8005614 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80055c8:	f7fc fc7e 	bl	8001ec8 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d21d      	bcs.n	8005614 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695a      	ldr	r2, [r3, #20]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e00f      	b.n	8005634 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4013      	ands	r3, r2
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	429a      	cmp	r2, r3
 8005622:	bf0c      	ite	eq
 8005624:	2301      	moveq	r3, #1
 8005626:	2300      	movne	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	461a      	mov	r2, r3
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	429a      	cmp	r2, r3
 8005630:	d0c3      	beq.n	80055ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005676:	f023 030c 	bic.w	r3, r3, #12
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	430b      	orrs	r3, r1
 8005682:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a2c      	ldr	r2, [pc, #176]	; (8005750 <UART_SetConfig+0x114>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d103      	bne.n	80056ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056a4:	f7fe ff42 	bl	800452c <HAL_RCC_GetPCLK2Freq>
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	e002      	b.n	80056b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80056ac:	f7fe ff2a 	bl	8004504 <HAL_RCC_GetPCLK1Freq>
 80056b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009a      	lsls	r2, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c8:	4a22      	ldr	r2, [pc, #136]	; (8005754 <UART_SetConfig+0x118>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	0119      	lsls	r1, r3, #4
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	009a      	lsls	r2, r3, #2
 80056dc:	441a      	add	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80056e8:	4b1a      	ldr	r3, [pc, #104]	; (8005754 <UART_SetConfig+0x118>)
 80056ea:	fba3 0302 	umull	r0, r3, r3, r2
 80056ee:	095b      	lsrs	r3, r3, #5
 80056f0:	2064      	movs	r0, #100	; 0x64
 80056f2:	fb00 f303 	mul.w	r3, r0, r3
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	3332      	adds	r3, #50	; 0x32
 80056fc:	4a15      	ldr	r2, [pc, #84]	; (8005754 <UART_SetConfig+0x118>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005708:	4419      	add	r1, r3
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009a      	lsls	r2, r3, #2
 8005714:	441a      	add	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005720:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <UART_SetConfig+0x118>)
 8005722:	fba3 0302 	umull	r0, r3, r3, r2
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	2064      	movs	r0, #100	; 0x64
 800572a:	fb00 f303 	mul.w	r3, r0, r3
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	3332      	adds	r3, #50	; 0x32
 8005734:	4a07      	ldr	r2, [pc, #28]	; (8005754 <UART_SetConfig+0x118>)
 8005736:	fba2 2303 	umull	r2, r3, r2, r3
 800573a:	095b      	lsrs	r3, r3, #5
 800573c:	f003 020f 	and.w	r2, r3, #15
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	440a      	add	r2, r1
 8005746:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005748:	bf00      	nop
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40013800 	.word	0x40013800
 8005754:	51eb851f 	.word	0x51eb851f

08005758 <__libc_init_array>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	2500      	movs	r5, #0
 800575c:	4e0c      	ldr	r6, [pc, #48]	; (8005790 <__libc_init_array+0x38>)
 800575e:	4c0d      	ldr	r4, [pc, #52]	; (8005794 <__libc_init_array+0x3c>)
 8005760:	1ba4      	subs	r4, r4, r6
 8005762:	10a4      	asrs	r4, r4, #2
 8005764:	42a5      	cmp	r5, r4
 8005766:	d109      	bne.n	800577c <__libc_init_array+0x24>
 8005768:	f000 f82e 	bl	80057c8 <_init>
 800576c:	2500      	movs	r5, #0
 800576e:	4e0a      	ldr	r6, [pc, #40]	; (8005798 <__libc_init_array+0x40>)
 8005770:	4c0a      	ldr	r4, [pc, #40]	; (800579c <__libc_init_array+0x44>)
 8005772:	1ba4      	subs	r4, r4, r6
 8005774:	10a4      	asrs	r4, r4, #2
 8005776:	42a5      	cmp	r5, r4
 8005778:	d105      	bne.n	8005786 <__libc_init_array+0x2e>
 800577a:	bd70      	pop	{r4, r5, r6, pc}
 800577c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005780:	4798      	blx	r3
 8005782:	3501      	adds	r5, #1
 8005784:	e7ee      	b.n	8005764 <__libc_init_array+0xc>
 8005786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800578a:	4798      	blx	r3
 800578c:	3501      	adds	r5, #1
 800578e:	e7f2      	b.n	8005776 <__libc_init_array+0x1e>
 8005790:	080058f0 	.word	0x080058f0
 8005794:	080058f0 	.word	0x080058f0
 8005798:	080058f0 	.word	0x080058f0
 800579c:	080058f4 	.word	0x080058f4

080057a0 <memcpy>:
 80057a0:	b510      	push	{r4, lr}
 80057a2:	1e43      	subs	r3, r0, #1
 80057a4:	440a      	add	r2, r1
 80057a6:	4291      	cmp	r1, r2
 80057a8:	d100      	bne.n	80057ac <memcpy+0xc>
 80057aa:	bd10      	pop	{r4, pc}
 80057ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057b4:	e7f7      	b.n	80057a6 <memcpy+0x6>

080057b6 <memset>:
 80057b6:	4603      	mov	r3, r0
 80057b8:	4402      	add	r2, r0
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d100      	bne.n	80057c0 <memset+0xa>
 80057be:	4770      	bx	lr
 80057c0:	f803 1b01 	strb.w	r1, [r3], #1
 80057c4:	e7f9      	b.n	80057ba <memset+0x4>
	...

080057c8 <_init>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	bf00      	nop
 80057cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ce:	bc08      	pop	{r3}
 80057d0:	469e      	mov	lr, r3
 80057d2:	4770      	bx	lr

080057d4 <_fini>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	bf00      	nop
 80057d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057da:	bc08      	pop	{r3}
 80057dc:	469e      	mov	lr, r3
 80057de:	4770      	bx	lr
