
Circle_Software_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009700  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08009810  08009810  00019810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b00  08009b00  0002012c  2**0
                  CONTENTS
  4 .ARM          00000000  08009b00  08009b00  0002012c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b00  08009b00  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b00  08009b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b04  08009b04  00019b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08009b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000012c  08009c34  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08009c34  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012881  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a9b  00000000  00000000  000329d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  00035478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  00036598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ada  00000000  00000000  00037568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f474  00000000  00000000  00051042  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000924d1  00000000  00000000  000604b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2987  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ef0  00000000  00000000  000f2a04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000012c 	.word	0x2000012c
 800012c:	00000000 	.word	0x00000000
 8000130:	080097f8 	.word	0x080097f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000130 	.word	0x20000130
 800014c:	080097f8 	.word	0x080097f8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c14:	f1a2 0201 	sub.w	r2, r2, #1
 8000c18:	d1ed      	bne.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <__aeabi_f2uiz>:
 800114c:	0042      	lsls	r2, r0, #1
 800114e:	d20e      	bcs.n	800116e <__aeabi_f2uiz+0x22>
 8001150:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001154:	d30b      	bcc.n	800116e <__aeabi_f2uiz+0x22>
 8001156:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800115a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115e:	d409      	bmi.n	8001174 <__aeabi_f2uiz+0x28>
 8001160:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001168:	fa23 f002 	lsr.w	r0, r3, r2
 800116c:	4770      	bx	lr
 800116e:	f04f 0000 	mov.w	r0, #0
 8001172:	4770      	bx	lr
 8001174:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001178:	d101      	bne.n	800117e <__aeabi_f2uiz+0x32>
 800117a:	0242      	lsls	r2, r0, #9
 800117c:	d102      	bne.n	8001184 <__aeabi_f2uiz+0x38>
 800117e:	f04f 30ff 	mov.w	r0, #4294967295
 8001182:	4770      	bx	lr
 8001184:	f04f 0000 	mov.w	r0, #0
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_ADC1_Init+0x74>)
 800119e:	4a19      	ldr	r2, [pc, #100]	; (8001204 <MX_ADC1_Init+0x78>)
 80011a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_ADC1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_ADC1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_ADC1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_ADC1_Init+0x74>)
 80011b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_ADC1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_ADC1_Init+0x74>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <MX_ADC1_Init+0x74>)
 80011ca:	f002 fac9 	bl	8003760 <HAL_ADC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011d4:	f000 ffeb 	bl	80021ae <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011dc:	2301      	movs	r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_ADC1_Init+0x74>)
 80011ea:	f002 fb91 	bl	8003910 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011f4:	f000 ffdb 	bl	80021ae <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000298 	.word	0x20000298
 8001204:	40012400 	.word	0x40012400

08001208 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <HAL_ADC_MspInit+0x6c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d121      	bne.n	800126c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <HAL_ADC_MspInit+0x70>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a12      	ldr	r2, [pc, #72]	; (8001278 <HAL_ADC_MspInit+0x70>)
 800122e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_ADC_MspInit+0x70>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HAL_ADC_MspInit+0x70>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <HAL_ADC_MspInit+0x70>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_ADC_MspInit+0x70>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = INPUT_VOLTAGE_FEEDBACK_Pin;
 8001258:	2301      	movs	r3, #1
 800125a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125c:	2303      	movs	r3, #3
 800125e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(INPUT_VOLTAGE_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	4619      	mov	r1, r3
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <HAL_ADC_MspInit+0x74>)
 8001268:	f002 fd92 	bl	8003d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800126c:	bf00      	nop
 800126e:	3720      	adds	r7, #32
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40012400 	.word	0x40012400
 8001278:	40021000 	.word	0x40021000
 800127c:	40010800 	.word	0x40010800

08001280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001294:	4b59      	ldr	r3, [pc, #356]	; (80013fc <MX_GPIO_Init+0x17c>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a58      	ldr	r2, [pc, #352]	; (80013fc <MX_GPIO_Init+0x17c>)
 800129a:	f043 0310 	orr.w	r3, r3, #16
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b56      	ldr	r3, [pc, #344]	; (80013fc <MX_GPIO_Init+0x17c>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ac:	4b53      	ldr	r3, [pc, #332]	; (80013fc <MX_GPIO_Init+0x17c>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a52      	ldr	r2, [pc, #328]	; (80013fc <MX_GPIO_Init+0x17c>)
 80012b2:	f043 0320 	orr.w	r3, r3, #32
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b50      	ldr	r3, [pc, #320]	; (80013fc <MX_GPIO_Init+0x17c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b4d      	ldr	r3, [pc, #308]	; (80013fc <MX_GPIO_Init+0x17c>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a4c      	ldr	r2, [pc, #304]	; (80013fc <MX_GPIO_Init+0x17c>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b4a      	ldr	r3, [pc, #296]	; (80013fc <MX_GPIO_Init+0x17c>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	4b47      	ldr	r3, [pc, #284]	; (80013fc <MX_GPIO_Init+0x17c>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a46      	ldr	r2, [pc, #280]	; (80013fc <MX_GPIO_Init+0x17c>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b44      	ldr	r3, [pc, #272]	; (80013fc <MX_GPIO_Init+0x17c>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fa:	4841      	ldr	r0, [pc, #260]	; (8001400 <MX_GPIO_Init+0x180>)
 80012fc:	f002 fea2 	bl	8004044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_3_DIR_Pin|MOTOR_4_DIR_Pin, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001306:	483f      	ldr	r0, [pc, #252]	; (8001404 <MX_GPIO_Init+0x184>)
 8001308:	f002 fe9c 	bl	8004044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_2_DIR_Pin|MOTOR_1_DIR_Pin|MOTOR_6_DIR_Pin|MOTOR_5_DIR_Pin, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 414c 	mov.w	r1, #52224	; 0xcc00
 8001312:	483d      	ldr	r0, [pc, #244]	; (8001408 <MX_GPIO_Init+0x188>)
 8001314:	f002 fe96 	bl	8004044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2302      	movs	r3, #2
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4619      	mov	r1, r3
 8001330:	4833      	ldr	r0, [pc, #204]	; (8001400 <MX_GPIO_Init+0x180>)
 8001332:	f002 fd2d 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_3_Pin|LIMIT_SWITCH_2_Pin|LIMIT_SWITCH_1_Pin;
 8001336:	2386      	movs	r3, #134	; 0x86
 8001338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <MX_GPIO_Init+0x18c>)
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4619      	mov	r1, r3
 8001348:	482e      	ldr	r0, [pc, #184]	; (8001404 <MX_GPIO_Init+0x184>)
 800134a:	f002 fd21 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_3_DIR_Pin|MOTOR_4_DIR_Pin;
 800134e:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2302      	movs	r3, #2
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4827      	ldr	r0, [pc, #156]	; (8001404 <MX_GPIO_Init+0x184>)
 8001368:	f002 fd12 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_2_DIR_Pin|MOTOR_1_DIR_Pin|MOTOR_6_DIR_Pin|MOTOR_5_DIR_Pin;
 800136c:	f44f 434c 	mov.w	r3, #52224	; 0xcc00
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2302      	movs	r3, #2
 800137c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	4820      	ldr	r0, [pc, #128]	; (8001408 <MX_GPIO_Init+0x188>)
 8001386:	f002 fd03 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_6_Pin|LIMIT_SWITCH_5_Pin|LIMIT_SWITCH_4_Pin;
 800138a:	f243 0310 	movw	r3, #12304	; 0x3010
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_GPIO_Init+0x18c>)
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4619      	mov	r1, r3
 800139e:	481a      	ldr	r0, [pc, #104]	; (8001408 <MX_GPIO_Init+0x188>)
 80013a0:	f002 fcf6 	bl	8003d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2007      	movs	r0, #7
 80013aa:	f002 fcba 	bl	8003d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013ae:	2007      	movs	r0, #7
 80013b0:	f002 fcd3 	bl	8003d5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2008      	movs	r0, #8
 80013ba:	f002 fcb2 	bl	8003d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013be:	2008      	movs	r0, #8
 80013c0:	f002 fccb 	bl	8003d5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	200a      	movs	r0, #10
 80013ca:	f002 fcaa 	bl	8003d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013ce:	200a      	movs	r0, #10
 80013d0:	f002 fcc3 	bl	8003d5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	2017      	movs	r0, #23
 80013da:	f002 fca2 	bl	8003d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013de:	2017      	movs	r0, #23
 80013e0:	f002 fcbb 	bl	8003d5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2028      	movs	r0, #40	; 0x28
 80013ea:	f002 fc9a 	bl	8003d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013ee:	2028      	movs	r0, #40	; 0x28
 80013f0:	f002 fcb3 	bl	8003d5a <HAL_NVIC_EnableIRQ>

}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000
 8001400:	40011000 	.word	0x40011000
 8001404:	40010800 	.word	0x40010800
 8001408:	40010c00 	.word	0x40010c00
 800140c:	10310000 	.word	0x10310000

08001410 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <MX_I2C1_Init+0x50>)
 8001416:	4a13      	ldr	r2, [pc, #76]	; (8001464 <MX_I2C1_Init+0x54>)
 8001418:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_I2C1_Init+0x50>)
 800141c:	4a12      	ldr	r2, [pc, #72]	; (8001468 <MX_I2C1_Init+0x58>)
 800141e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_I2C1_Init+0x50>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_I2C1_Init+0x50>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_I2C1_Init+0x50>)
 800142e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001432:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <MX_I2C1_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_I2C1_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <MX_I2C1_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_I2C1_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <MX_I2C1_Init+0x50>)
 800144e:	f002 fe29 	bl	80040a4 <HAL_I2C_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001458:	f000 fea9 	bl	80021ae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200002c8 	.word	0x200002c8
 8001464:	40005400 	.word	0x40005400
 8001468:	000186a0 	.word	0x000186a0

0800146c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_I2C_MspInit+0x90>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d132      	bne.n	80014f2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_I2C_MspInit+0x94>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <HAL_I2C_MspInit+0x94>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_I2C_MspInit+0x94>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU_9250_I2C_SCL_Pin|MPU_9250_I2C_SDA_Pin;
 80014a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014aa:	2312      	movs	r3, #18
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4812      	ldr	r0, [pc, #72]	; (8001504 <HAL_I2C_MspInit+0x98>)
 80014ba:	f002 fc69 	bl	8003d90 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_I2C_MspInit+0x9c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	f043 0302 	orr.w	r3, r3, #2
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <HAL_I2C_MspInit+0x9c>)
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_I2C_MspInit+0x94>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <HAL_I2C_MspInit+0x94>)
 80014e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_I2C_MspInit+0x94>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40005400 	.word	0x40005400
 8001500:	40021000 	.word	0x40021000
 8001504:	40010c00 	.word	0x40010c00
 8001508:	40010000 	.word	0x40010000
 800150c:	00000000 	.word	0x00000000

08001510 <RotationMatrixUpdate>:
 *  Notes			 			: All the angle setpoints need to be in degrees and shall be converted into radians in the function before being used in the rotation matrix

*/

static void RotationMatrixUpdate()
{
 8001510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
	/*Declare Local Variables*/
	float32_t Y = 0.0174*PoseSetpoint[0]; /*Convert Yaw Setpoint from degrees to radians*/
 8001518:	4be1      	ldr	r3, [pc, #900]	; (80018a0 <RotationMatrixUpdate+0x390>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ff7b 	bl	8000418 <__aeabi_f2d>
 8001522:	a3dd      	add	r3, pc, #884	; (adr r3, 8001898 <RotationMatrixUpdate+0x388>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7fe ffce 	bl	80004c8 <__aeabi_dmul>
 800152c:	4603      	mov	r3, r0
 800152e:	460c      	mov	r4, r1
 8001530:	4618      	mov	r0, r3
 8001532:	4621      	mov	r1, r4
 8001534:	f7ff fac0 	bl	8000ab8 <__aeabi_d2f>
 8001538:	4603      	mov	r3, r0
 800153a:	60fb      	str	r3, [r7, #12]
	float32_t P = 0.0174*PoseSetpoint[1];/*Convert Pitch Setpoint from degrees to radians*/
 800153c:	4bd8      	ldr	r3, [pc, #864]	; (80018a0 <RotationMatrixUpdate+0x390>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ff69 	bl	8000418 <__aeabi_f2d>
 8001546:	a3d4      	add	r3, pc, #848	; (adr r3, 8001898 <RotationMatrixUpdate+0x388>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7fe ffbc 	bl	80004c8 <__aeabi_dmul>
 8001550:	4603      	mov	r3, r0
 8001552:	460c      	mov	r4, r1
 8001554:	4618      	mov	r0, r3
 8001556:	4621      	mov	r1, r4
 8001558:	f7ff faae 	bl	8000ab8 <__aeabi_d2f>
 800155c:	4603      	mov	r3, r0
 800155e:	60bb      	str	r3, [r7, #8]
	float32_t R = 0.0174*PoseSetpoint[2];/*Convert Roll Setpoint from degrees to radians*/
 8001560:	4bcf      	ldr	r3, [pc, #828]	; (80018a0 <RotationMatrixUpdate+0x390>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ff57 	bl	8000418 <__aeabi_f2d>
 800156a:	a3cb      	add	r3, pc, #812	; (adr r3, 8001898 <RotationMatrixUpdate+0x388>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7fe ffaa 	bl	80004c8 <__aeabi_dmul>
 8001574:	4603      	mov	r3, r0
 8001576:	460c      	mov	r4, r1
 8001578:	4618      	mov	r0, r3
 800157a:	4621      	mov	r1, r4
 800157c:	f7ff fa9c 	bl	8000ab8 <__aeabi_d2f>
 8001580:	4603      	mov	r3, r0
 8001582:	607b      	str	r3, [r7, #4]

	RotationMatrix[0][0] = cos(Y)*cos(P);
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7fe ff47 	bl	8000418 <__aeabi_f2d>
 800158a:	4603      	mov	r3, r0
 800158c:	460c      	mov	r4, r1
 800158e:	4618      	mov	r0, r3
 8001590:	4621      	mov	r1, r4
 8001592:	f005 febf 	bl	8007314 <cos>
 8001596:	4604      	mov	r4, r0
 8001598:	460d      	mov	r5, r1
 800159a:	68b8      	ldr	r0, [r7, #8]
 800159c:	f7fe ff3c 	bl	8000418 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f005 feb4 	bl	8007314 <cos>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4620      	mov	r0, r4
 80015b2:	4629      	mov	r1, r5
 80015b4:	f7fe ff88 	bl	80004c8 <__aeabi_dmul>
 80015b8:	4603      	mov	r3, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	4618      	mov	r0, r3
 80015be:	4621      	mov	r1, r4
 80015c0:	f7ff fa7a 	bl	8000ab8 <__aeabi_d2f>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4bb7      	ldr	r3, [pc, #732]	; (80018a4 <RotationMatrixUpdate+0x394>)
 80015c8:	601a      	str	r2, [r3, #0]
	RotationMatrix[0][1] = -(sin(Y)*cos(R)) + (cos(Y)*sin(P)*sin(R));
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f7fe ff24 	bl	8000418 <__aeabi_f2d>
 80015d0:	4603      	mov	r3, r0
 80015d2:	460c      	mov	r4, r1
 80015d4:	4618      	mov	r0, r3
 80015d6:	4621      	mov	r1, r4
 80015d8:	f005 fe9c 	bl	8007314 <cos>
 80015dc:	4604      	mov	r4, r0
 80015de:	460d      	mov	r5, r1
 80015e0:	68b8      	ldr	r0, [r7, #8]
 80015e2:	f7fe ff19 	bl	8000418 <__aeabi_f2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f005 fecb 	bl	8007388 <sin>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7fe ff65 	bl	80004c8 <__aeabi_dmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	460c      	mov	r4, r1
 8001602:	4625      	mov	r5, r4
 8001604:	461c      	mov	r4, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7fe ff06 	bl	8000418 <__aeabi_f2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f005 feb8 	bl	8007388 <sin>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4620      	mov	r0, r4
 800161e:	4629      	mov	r1, r5
 8001620:	f7fe ff52 	bl	80004c8 <__aeabi_dmul>
 8001624:	4603      	mov	r3, r0
 8001626:	460c      	mov	r4, r1
 8001628:	4625      	mov	r5, r4
 800162a:	461c      	mov	r4, r3
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7fe fef3 	bl	8000418 <__aeabi_f2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f005 fea5 	bl	8007388 <sin>
 800163e:	4680      	mov	r8, r0
 8001640:	4689      	mov	r9, r1
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7fe fee8 	bl	8000418 <__aeabi_f2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f005 fe60 	bl	8007314 <cos>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4640      	mov	r0, r8
 800165a:	4649      	mov	r1, r9
 800165c:	f7fe ff34 	bl	80004c8 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4620      	mov	r0, r4
 8001666:	4629      	mov	r1, r5
 8001668:	f7fe fd76 	bl	8000158 <__aeabi_dsub>
 800166c:	4603      	mov	r3, r0
 800166e:	460c      	mov	r4, r1
 8001670:	4618      	mov	r0, r3
 8001672:	4621      	mov	r1, r4
 8001674:	f7ff fa20 	bl	8000ab8 <__aeabi_d2f>
 8001678:	4602      	mov	r2, r0
 800167a:	4b8a      	ldr	r3, [pc, #552]	; (80018a4 <RotationMatrixUpdate+0x394>)
 800167c:	605a      	str	r2, [r3, #4]
	RotationMatrix[0][2] = (sin(Y)*sin(R)) + (cos(Y)*sin(P)*cos(R));
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7fe feca 	bl	8000418 <__aeabi_f2d>
 8001684:	4603      	mov	r3, r0
 8001686:	460c      	mov	r4, r1
 8001688:	4618      	mov	r0, r3
 800168a:	4621      	mov	r1, r4
 800168c:	f005 fe7c 	bl	8007388 <sin>
 8001690:	4604      	mov	r4, r0
 8001692:	460d      	mov	r5, r1
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7fe febf 	bl	8000418 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f005 fe71 	bl	8007388 <sin>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f7fe ff0b 	bl	80004c8 <__aeabi_dmul>
 80016b2:	4603      	mov	r3, r0
 80016b4:	460c      	mov	r4, r1
 80016b6:	4625      	mov	r5, r4
 80016b8:	461c      	mov	r4, r3
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f7fe feac 	bl	8000418 <__aeabi_f2d>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f005 fe24 	bl	8007314 <cos>
 80016cc:	4680      	mov	r8, r0
 80016ce:	4689      	mov	r9, r1
 80016d0:	68b8      	ldr	r0, [r7, #8]
 80016d2:	f7fe fea1 	bl	8000418 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f005 fe53 	bl	8007388 <sin>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4640      	mov	r0, r8
 80016e8:	4649      	mov	r1, r9
 80016ea:	f7fe feed 	bl	80004c8 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4690      	mov	r8, r2
 80016f4:	4699      	mov	r9, r3
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7fe fe8e 	bl	8000418 <__aeabi_f2d>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f005 fe06 	bl	8007314 <cos>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4640      	mov	r0, r8
 800170e:	4649      	mov	r1, r9
 8001710:	f7fe feda 	bl	80004c8 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4620      	mov	r0, r4
 800171a:	4629      	mov	r1, r5
 800171c:	f7fe fd1e 	bl	800015c <__adddf3>
 8001720:	4603      	mov	r3, r0
 8001722:	460c      	mov	r4, r1
 8001724:	4618      	mov	r0, r3
 8001726:	4621      	mov	r1, r4
 8001728:	f7ff f9c6 	bl	8000ab8 <__aeabi_d2f>
 800172c:	4602      	mov	r2, r0
 800172e:	4b5d      	ldr	r3, [pc, #372]	; (80018a4 <RotationMatrixUpdate+0x394>)
 8001730:	609a      	str	r2, [r3, #8]
	RotationMatrix[1][0] = sin(Y)*cos(P);
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7fe fe70 	bl	8000418 <__aeabi_f2d>
 8001738:	4603      	mov	r3, r0
 800173a:	460c      	mov	r4, r1
 800173c:	4618      	mov	r0, r3
 800173e:	4621      	mov	r1, r4
 8001740:	f005 fe22 	bl	8007388 <sin>
 8001744:	4604      	mov	r4, r0
 8001746:	460d      	mov	r5, r1
 8001748:	68b8      	ldr	r0, [r7, #8]
 800174a:	f7fe fe65 	bl	8000418 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f005 fddd 	bl	8007314 <cos>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe feb1 	bl	80004c8 <__aeabi_dmul>
 8001766:	4603      	mov	r3, r0
 8001768:	460c      	mov	r4, r1
 800176a:	4618      	mov	r0, r3
 800176c:	4621      	mov	r1, r4
 800176e:	f7ff f9a3 	bl	8000ab8 <__aeabi_d2f>
 8001772:	4602      	mov	r2, r0
 8001774:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <RotationMatrixUpdate+0x394>)
 8001776:	60da      	str	r2, [r3, #12]
	RotationMatrix[1][1] = (cos(Y)*cos(R)) + (sin(Y)*sin(P)*sin(R));
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f7fe fe4d 	bl	8000418 <__aeabi_f2d>
 800177e:	4603      	mov	r3, r0
 8001780:	460c      	mov	r4, r1
 8001782:	4618      	mov	r0, r3
 8001784:	4621      	mov	r1, r4
 8001786:	f005 fdc5 	bl	8007314 <cos>
 800178a:	4604      	mov	r4, r0
 800178c:	460d      	mov	r5, r1
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7fe fe42 	bl	8000418 <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f005 fdba 	bl	8007314 <cos>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe fe8e 	bl	80004c8 <__aeabi_dmul>
 80017ac:	4603      	mov	r3, r0
 80017ae:	460c      	mov	r4, r1
 80017b0:	4625      	mov	r5, r4
 80017b2:	461c      	mov	r4, r3
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f7fe fe2f 	bl	8000418 <__aeabi_f2d>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f005 fde1 	bl	8007388 <sin>
 80017c6:	4680      	mov	r8, r0
 80017c8:	4689      	mov	r9, r1
 80017ca:	68b8      	ldr	r0, [r7, #8]
 80017cc:	f7fe fe24 	bl	8000418 <__aeabi_f2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f005 fdd6 	bl	8007388 <sin>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4640      	mov	r0, r8
 80017e2:	4649      	mov	r1, r9
 80017e4:	f7fe fe70 	bl	80004c8 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4690      	mov	r8, r2
 80017ee:	4699      	mov	r9, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7fe fe11 	bl	8000418 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f005 fdc3 	bl	8007388 <sin>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4640      	mov	r0, r8
 8001808:	4649      	mov	r1, r9
 800180a:	f7fe fe5d 	bl	80004c8 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	f7fe fca1 	bl	800015c <__adddf3>
 800181a:	4603      	mov	r3, r0
 800181c:	460c      	mov	r4, r1
 800181e:	4618      	mov	r0, r3
 8001820:	4621      	mov	r1, r4
 8001822:	f7ff f949 	bl	8000ab8 <__aeabi_d2f>
 8001826:	4602      	mov	r2, r0
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <RotationMatrixUpdate+0x394>)
 800182a:	611a      	str	r2, [r3, #16]
	RotationMatrix[1][2] = -(cos(Y)*sin(R)) + (sin(Y)*sin(P)*cos(R));
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f7fe fdf3 	bl	8000418 <__aeabi_f2d>
 8001832:	4603      	mov	r3, r0
 8001834:	460c      	mov	r4, r1
 8001836:	4618      	mov	r0, r3
 8001838:	4621      	mov	r1, r4
 800183a:	f005 fda5 	bl	8007388 <sin>
 800183e:	4604      	mov	r4, r0
 8001840:	460d      	mov	r5, r1
 8001842:	68b8      	ldr	r0, [r7, #8]
 8001844:	f7fe fde8 	bl	8000418 <__aeabi_f2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f005 fd9a 	bl	8007388 <sin>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4620      	mov	r0, r4
 800185a:	4629      	mov	r1, r5
 800185c:	f7fe fe34 	bl	80004c8 <__aeabi_dmul>
 8001860:	4603      	mov	r3, r0
 8001862:	460c      	mov	r4, r1
 8001864:	4625      	mov	r5, r4
 8001866:	461c      	mov	r4, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7fe fdd5 	bl	8000418 <__aeabi_f2d>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f005 fd4d 	bl	8007314 <cos>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4620      	mov	r0, r4
 8001880:	4629      	mov	r1, r5
 8001882:	f7fe fe21 	bl	80004c8 <__aeabi_dmul>
 8001886:	4603      	mov	r3, r0
 8001888:	460c      	mov	r4, r1
 800188a:	4625      	mov	r5, r4
 800188c:	461c      	mov	r4, r3
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7fe fdc2 	bl	8000418 <__aeabi_f2d>
 8001894:	e008      	b.n	80018a8 <RotationMatrixUpdate+0x398>
 8001896:	bf00      	nop
 8001898:	3bcd35a8 	.word	0x3bcd35a8
 800189c:	3f91d14e 	.word	0x3f91d14e
 80018a0:	20000148 	.word	0x20000148
 80018a4:	20000160 	.word	0x20000160
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f005 fd30 	bl	8007314 <cos>
 80018b4:	4680      	mov	r8, r0
 80018b6:	4689      	mov	r9, r1
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7fe fdad 	bl	8000418 <__aeabi_f2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f005 fd5f 	bl	8007388 <sin>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4640      	mov	r0, r8
 80018d0:	4649      	mov	r1, r9
 80018d2:	f7fe fdf9 	bl	80004c8 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe fc3b 	bl	8000158 <__aeabi_dsub>
 80018e2:	4603      	mov	r3, r0
 80018e4:	460c      	mov	r4, r1
 80018e6:	4618      	mov	r0, r3
 80018e8:	4621      	mov	r1, r4
 80018ea:	f7ff f8e5 	bl	8000ab8 <__aeabi_d2f>
 80018ee:	4602      	mov	r2, r0
 80018f0:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <RotationMatrixUpdate+0x4a4>)
 80018f2:	615a      	str	r2, [r3, #20]
	RotationMatrix[2][0] = -sin(P);
 80018f4:	68b8      	ldr	r0, [r7, #8]
 80018f6:	f7fe fd8f 	bl	8000418 <__aeabi_f2d>
 80018fa:	4603      	mov	r3, r0
 80018fc:	460c      	mov	r4, r1
 80018fe:	4618      	mov	r0, r3
 8001900:	4621      	mov	r1, r4
 8001902:	f005 fd41 	bl	8007388 <sin>
 8001906:	4603      	mov	r3, r0
 8001908:	460c      	mov	r4, r1
 800190a:	4618      	mov	r0, r3
 800190c:	4621      	mov	r1, r4
 800190e:	f7ff f8d3 	bl	8000ab8 <__aeabi_d2f>
 8001912:	4603      	mov	r3, r0
 8001914:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001918:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <RotationMatrixUpdate+0x4a4>)
 800191a:	6193      	str	r3, [r2, #24]
	RotationMatrix[2][1] = cos(P)*sin(R);
 800191c:	68b8      	ldr	r0, [r7, #8]
 800191e:	f7fe fd7b 	bl	8000418 <__aeabi_f2d>
 8001922:	4603      	mov	r3, r0
 8001924:	460c      	mov	r4, r1
 8001926:	4618      	mov	r0, r3
 8001928:	4621      	mov	r1, r4
 800192a:	f005 fcf3 	bl	8007314 <cos>
 800192e:	4604      	mov	r4, r0
 8001930:	460d      	mov	r5, r1
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7fe fd70 	bl	8000418 <__aeabi_f2d>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f005 fd22 	bl	8007388 <sin>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4620      	mov	r0, r4
 800194a:	4629      	mov	r1, r5
 800194c:	f7fe fdbc 	bl	80004c8 <__aeabi_dmul>
 8001950:	4603      	mov	r3, r0
 8001952:	460c      	mov	r4, r1
 8001954:	4618      	mov	r0, r3
 8001956:	4621      	mov	r1, r4
 8001958:	f7ff f8ae 	bl	8000ab8 <__aeabi_d2f>
 800195c:	4602      	mov	r2, r0
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <RotationMatrixUpdate+0x4a4>)
 8001960:	61da      	str	r2, [r3, #28]
	RotationMatrix[2][2] = cos(P)*cos(R);
 8001962:	68b8      	ldr	r0, [r7, #8]
 8001964:	f7fe fd58 	bl	8000418 <__aeabi_f2d>
 8001968:	4603      	mov	r3, r0
 800196a:	460c      	mov	r4, r1
 800196c:	4618      	mov	r0, r3
 800196e:	4621      	mov	r1, r4
 8001970:	f005 fcd0 	bl	8007314 <cos>
 8001974:	4604      	mov	r4, r0
 8001976:	460d      	mov	r5, r1
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7fe fd4d 	bl	8000418 <__aeabi_f2d>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f005 fcc5 	bl	8007314 <cos>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4620      	mov	r0, r4
 8001990:	4629      	mov	r1, r5
 8001992:	f7fe fd99 	bl	80004c8 <__aeabi_dmul>
 8001996:	4603      	mov	r3, r0
 8001998:	460c      	mov	r4, r1
 800199a:	4618      	mov	r0, r3
 800199c:	4621      	mov	r1, r4
 800199e:	f7ff f88b 	bl	8000ab8 <__aeabi_d2f>
 80019a2:	4602      	mov	r2, r0
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <RotationMatrixUpdate+0x4a4>)
 80019a6:	621a      	str	r2, [r3, #32]
}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019b2:	bf00      	nop
 80019b4:	20000160 	.word	0x20000160

080019b8 <TranslationVectorUpdate>:
 * Called by					: all the units are in mm
 *  Notes			 			:
*/

static void TranslationVectorUpdate()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	TranslationVector[0][0] =  PoseSetpoint[3];
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <TranslationVectorUpdate+0x2c>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <TranslationVectorUpdate+0x30>)
 80019c2:	6013      	str	r3, [r2, #0]
	TranslationVector[1][0] =  PoseSetpoint[4];
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <TranslationVectorUpdate+0x2c>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <TranslationVectorUpdate+0x30>)
 80019ca:	6053      	str	r3, [r2, #4]
	TranslationVector[2][0] =  PoseSetpoint[5] + HOME_POSITION_Z_OFFSET;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <TranslationVectorUpdate+0x2c>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	4906      	ldr	r1, [pc, #24]	; (80019ec <TranslationVectorUpdate+0x34>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f8c6 	bl	8000b64 <__addsf3>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <TranslationVectorUpdate+0x30>)
 80019de:	609a      	str	r2, [r3, #8]
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000148 	.word	0x20000148
 80019e8:	20000184 	.word	0x20000184
 80019ec:	4302a3d7 	.word	0x4302a3d7

080019f0 <EffectiveLinkLengthCalculationVectorized>:
 * Called by					:
 *  Notes			 			:
*/

static void EffectiveLinkLengthCalculationVectorized()
{
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b0e2      	sub	sp, #392	; 0x188
 80019f4:	af02      	add	r7, sp, #8
	/*Declare Local Variables*/
	float32_t ee_coordinates_transposed [3][6] = {{0,0,0,0,0,0},
 80019f6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80019fa:	2248      	movs	r2, #72	; 0x48
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f005 faf4 	bl	8006fec <memset>
												  {0,0,0,0,0,0},
												  {0,0,0,0,0,0}};


	float32_t base_coordinates_transposed [3][6] = {{0,0,0,0,0,0},
 8001a04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a08:	2248      	movs	r2, #72	; 0x48
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f005 faed 	bl	8006fec <memset>
													{0,0,0,0,0,0},
													{0,0,0,0,0,0}};


	float32_t effective_link_vectors[3][6] = {{0,0,0,0,0,0},
 8001a12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a16:	2248      	movs	r2, #72	; 0x48
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fae6 	bl	8006fec <memset>
											  {0,0,0,0,0,0},
											  {0,0,0,0,0,0}};

	float32_t translation_vector_broadcast[3][6] = {{0,0,0,0,0,0},
 8001a20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a24:	4618      	mov	r0, r3
 8001a26:	2348      	movs	r3, #72	; 0x48
 8001a28:	461a      	mov	r2, r3
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	f005 fade 	bl	8006fec <memset>
													{0,0,0,0,0,0},
													{0,0,0,0,0,0}};

	uint32_t link_length_calc_vector_size[2] = {3,6};
 8001a30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a34:	4a6b      	ldr	r2, [pc, #428]	; (8001be4 <EffectiveLinkLengthCalculationVectorized+0x1f4>)
 8001a36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a3a:	e883 0003 	stmia.w	r3, {r0, r1}

	float32_t temp_matrix_1[3][6] = {{0,0,0,0,0,0},
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	4618      	mov	r0, r3
 8001a42:	2348      	movs	r3, #72	; 0x48
 8001a44:	461a      	mov	r2, r3
 8001a46:	2100      	movs	r1, #0
 8001a48:	f005 fad0 	bl	8006fec <memset>
									 {0,0,0,0,0,0}};


    /*Transpose End Effector coordinate matrix and Base Frame Matrix*/

	MatrixTranspose(EndEffectorCoordinatesSize, EndEffectorCoordinates,ee_coordinates_transposed);
 8001a4c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001a50:	461a      	mov	r2, r3
 8001a52:	4965      	ldr	r1, [pc, #404]	; (8001be8 <EffectiveLinkLengthCalculationVectorized+0x1f8>)
 8001a54:	4865      	ldr	r0, [pc, #404]	; (8001bec <EffectiveLinkLengthCalculationVectorized+0x1fc>)
 8001a56:	f000 fd5c 	bl	8002512 <MatrixTranspose>
	MatrixTranspose(BaseCoordinatesSize, BaseCoordinates,base_coordinates_transposed);
 8001a5a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4963      	ldr	r1, [pc, #396]	; (8001bf0 <EffectiveLinkLengthCalculationVectorized+0x200>)
 8001a62:	4864      	ldr	r0, [pc, #400]	; (8001bf4 <EffectiveLinkLengthCalculationVectorized+0x204>)
 8001a64:	f000 fd55 	bl	8002512 <MatrixTranspose>

	/*Build translation_vector_broadcast*/
	for (uint8_t col_index = 0; col_index<link_length_calc_vector_size[1]; col_index ++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8001a6e:	e026      	b.n	8001abe <EffectiveLinkLengthCalculationVectorized+0xce>
	{
		for(uint8_t row_index = 0; row_index< link_length_calc_vector_size[0]; row_index ++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8001a76:	e016      	b.n	8001aa6 <EffectiveLinkLengthCalculationVectorized+0xb6>
		{
			translation_vector_broadcast[row_index][col_index] = TranslationVector[row_index][0];
 8001a78:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8001a7c:	f897 217e 	ldrb.w	r2, [r7, #382]	; 0x17e
 8001a80:	f897 417f 	ldrb.w	r4, [r7, #383]	; 0x17f
 8001a84:	495c      	ldr	r1, [pc, #368]	; (8001bf8 <EffectiveLinkLengthCalculationVectorized+0x208>)
 8001a86:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001a8a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4423      	add	r3, r4
 8001a98:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		for(uint8_t row_index = 0; row_index< link_length_calc_vector_size[0]; row_index ++)
 8001a9c:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8001aa6:	f897 217e 	ldrb.w	r2, [r7, #382]	; 0x17e
 8001aaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3e1      	bcc.n	8001a78 <EffectiveLinkLengthCalculationVectorized+0x88>
	for (uint8_t col_index = 0; col_index<link_length_calc_vector_size[1]; col_index ++)
 8001ab4:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8001abe:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8001ac2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d3d1      	bcc.n	8001a70 <EffectiveLinkLengthCalculationVectorized+0x80>
		}
	}

	/*Calculation of effective link vectors*/
	MatrixMultiply(RotationMatrixSize, link_length_calc_vector_size ,RotationMatrix, ee_coordinates_transposed, temp_matrix_1);
 8001acc:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8001ad0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	4a48      	ldr	r2, [pc, #288]	; (8001bfc <EffectiveLinkLengthCalculationVectorized+0x20c>)
 8001adc:	4848      	ldr	r0, [pc, #288]	; (8001c00 <EffectiveLinkLengthCalculationVectorized+0x210>)
 8001ade:	f000 fc7c 	bl	80023da <MatrixMultiply>
	MatrixAdd(link_length_calc_vector_size,link_length_calc_vector_size,translation_vector_broadcast,temp_matrix_1,EndEffectorCordTransform);
 8001ae2:	1d3c      	adds	r4, r7, #4
 8001ae4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001ae8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001aec:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001af0:	4b44      	ldr	r3, [pc, #272]	; (8001c04 <EffectiveLinkLengthCalculationVectorized+0x214>)
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	4623      	mov	r3, r4
 8001af6:	f000 fb5e 	bl	80021b6 <MatrixAdd>
	MatrixSubtract(link_length_calc_vector_size,link_length_calc_vector_size,EndEffectorCordTransform,base_coordinates_transposed,effective_link_vectors);
 8001afa:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001afe:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001b02:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001b06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	4a3d      	ldr	r2, [pc, #244]	; (8001c04 <EffectiveLinkLengthCalculationVectorized+0x214>)
 8001b10:	f000 fbda 	bl	80022c8 <MatrixSubtract>


    /*Calculate value of effective links*/

    for (uint8_t link_index = 0; link_index < EffectiveLinkLengthMatrixLength ; link_index ++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8001b1a:	e057      	b.n	8001bcc <EffectiveLinkLengthCalculationVectorized+0x1dc>
    {
    	uint32_t comp_sum = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

    	for (uint8_t comp_index = 0; comp_index <3 ; comp_index ++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8001b28:	e031      	b.n	8001b8e <EffectiveLinkLengthCalculationVectorized+0x19e>
    	{
    		comp_sum +=  pow(effective_link_vectors[comp_index][link_index],2);
 8001b2a:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8001b2e:	f897 117d 	ldrb.w	r1, [r7, #381]	; 0x17d
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	440b      	add	r3, r1
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001b42:	4413      	add	r3, r2
 8001b44:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fc65 	bl	8000418 <__aeabi_f2d>
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b56:	f005 fca5 	bl	80074a4 <pow>
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	460d      	mov	r5, r1
 8001b5e:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8001b62:	f7fe fc37 	bl	80003d4 <__aeabi_ui2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	f7fe faf5 	bl	800015c <__adddf3>
 8001b72:	4603      	mov	r3, r0
 8001b74:	460c      	mov	r4, r1
 8001b76:	4618      	mov	r0, r3
 8001b78:	4621      	mov	r1, r4
 8001b7a:	f7fe ff7d 	bl	8000a78 <__aeabi_d2uiz>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    	for (uint8_t comp_index = 0; comp_index <3 ; comp_index ++)
 8001b84:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8001b8e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d9c9      	bls.n	8001b2a <EffectiveLinkLengthCalculationVectorized+0x13a>
    	}

    	EffectiveLinkLengthMatrix[link_index] = sqrt(comp_sum);
 8001b96:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8001b9a:	f7fe fc1b 	bl	80003d4 <__aeabi_ui2d>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	460c      	mov	r4, r1
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	f005 fdd9 	bl	800775c <sqrt>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	f897 417d 	ldrb.w	r4, [r7, #381]	; 0x17d
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7fe ff7f 	bl	8000ab8 <__aeabi_d2f>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <EffectiveLinkLengthCalculationVectorized+0x218>)
 8001bbe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    for (uint8_t link_index = 0; link_index < EffectiveLinkLengthMatrixLength ; link_index ++)
 8001bc2:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8001bcc:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <EffectiveLinkLengthCalculationVectorized+0x21c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d3a1      	bcc.n	8001b1c <EffectiveLinkLengthCalculationVectorized+0x12c>
    }
}
 8001bd8:	bf00      	nop
 8001bda:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bdb0      	pop	{r4, r5, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	08009810 	.word	0x08009810
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000048 	.word	0x20000048
 8001bf0:	20000050 	.word	0x20000050
 8001bf4:	20000098 	.word	0x20000098
 8001bf8:	20000184 	.word	0x20000184
 8001bfc:	20000160 	.word	0x20000160
 8001c00:	200000a0 	.word	0x200000a0
 8001c04:	200001a8 	.word	0x200001a8
 8001c08:	20000190 	.word	0x20000190
 8001c0c:	200000a8 	.word	0x200000a8

08001c10 <MotorAngleUpdate>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void MotorAngleUpdate()
{
 8001c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c14:	b08c      	sub	sp, #48	; 0x30
 8001c16:	af00      	add	r7, sp, #0

 uint8_t motor_index = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

 float32_t temp = 0;
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
 float32_t temp_L = 0;
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
 float32_t temp_M = 0;
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
 float32_t temp_N = 0;
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]

 float32_t x_e = 0;
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
 float32_t x_b = 0;
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 float32_t y_e = 0;
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
 float32_t y_b = 0;
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 float32_t z_e = 0;
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
 float32_t z_b = 0;
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 float32_t motor_plane_angle = 0;
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	603b      	str	r3, [r7, #0]

 for (motor_index = 1; motor_index <=6 ; motor_index++)
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001c66:	e169      	b.n	8001f3c <MotorAngleUpdate+0x32c>
 {
	 x_e = EndEffectorCordTransform[0][motor_index -1];
 8001c68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	4abe      	ldr	r2, [pc, #760]	; (8001f68 <MotorAngleUpdate+0x358>)
 8001c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c74:	61bb      	str	r3, [r7, #24]
	 y_e = EndEffectorCordTransform[1][motor_index -1];
 8001c76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	4aba      	ldr	r2, [pc, #744]	; (8001f68 <MotorAngleUpdate+0x358>)
 8001c7e:	3306      	adds	r3, #6
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	613b      	str	r3, [r7, #16]
	 z_e = EndEffectorCordTransform[2][motor_index -1];
 8001c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	4ab6      	ldr	r2, [pc, #728]	; (8001f68 <MotorAngleUpdate+0x358>)
 8001c8e:	330c      	adds	r3, #12
 8001c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c94:	60bb      	str	r3, [r7, #8]


	 x_b = BaseCoordinates[motor_index -1][0];
 8001c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c9a:	1e5a      	subs	r2, r3, #1
 8001c9c:	49b3      	ldr	r1, [pc, #716]	; (8001f6c <MotorAngleUpdate+0x35c>)
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	617b      	str	r3, [r7, #20]
	 y_b = BaseCoordinates[motor_index -1][1];
 8001cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	49ae      	ldr	r1, [pc, #696]	; (8001f6c <MotorAngleUpdate+0x35c>)
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]
	 z_b = BaseCoordinates[motor_index -1][2];
 8001cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	49a8      	ldr	r1, [pc, #672]	; (8001f6c <MotorAngleUpdate+0x35c>)
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	607b      	str	r3, [r7, #4]

	 motor_plane_angle = MotorPlaneAngle[motor_index - 1];
 8001cdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	4aa3      	ldr	r2, [pc, #652]	; (8001f70 <MotorAngleUpdate+0x360>)
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	603b      	str	r3, [r7, #0]

	 temp_L = pow(EffectiveLinkLengthMatrix[motor_index -1],2) - ( pow(SS_LINK_LENGTH,2) - pow(MOTOR_COUPLER_LENGTH,2));
 8001cea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	4aa0      	ldr	r2, [pc, #640]	; (8001f74 <MotorAngleUpdate+0x364>)
 8001cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fb8e 	bl	8000418 <__aeabi_f2d>
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d04:	f005 fbce 	bl	80074a4 <pow>
 8001d08:	a391      	add	r3, pc, #580	; (adr r3, 8001f50 <MotorAngleUpdate+0x340>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fa23 	bl	8000158 <__aeabi_dsub>
 8001d12:	4603      	mov	r3, r0
 8001d14:	460c      	mov	r4, r1
 8001d16:	4618      	mov	r0, r3
 8001d18:	4621      	mov	r1, r4
 8001d1a:	f7fe fecd 	bl	8000ab8 <__aeabi_d2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24

	 temp_M = 2*MOTOR_COUPLER_LENGTH*(z_e - z_b);
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	68b8      	ldr	r0, [r7, #8]
 8001d26:	f7fe ff1b 	bl	8000b60 <__aeabi_fsub>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4992      	ldr	r1, [pc, #584]	; (8001f78 <MotorAngleUpdate+0x368>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f820 	bl	8000d74 <__aeabi_fmul>
 8001d34:	4603      	mov	r3, r0
 8001d36:	623b      	str	r3, [r7, #32]

	 temp_N = 2*MOTOR_COUPLER_LENGTH*(((cos(motor_plane_angle))*(x_e - x_b)) + (sin(motor_plane_angle)*(y_e - y_b)));
 8001d38:	6838      	ldr	r0, [r7, #0]
 8001d3a:	f7fe fb6d 	bl	8000418 <__aeabi_f2d>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460c      	mov	r4, r1
 8001d42:	4618      	mov	r0, r3
 8001d44:	4621      	mov	r1, r4
 8001d46:	f005 fae5 	bl	8007314 <cos>
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	460d      	mov	r5, r1
 8001d4e:	6979      	ldr	r1, [r7, #20]
 8001d50:	69b8      	ldr	r0, [r7, #24]
 8001d52:	f7fe ff05 	bl	8000b60 <__aeabi_fsub>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fb5d 	bl	8000418 <__aeabi_f2d>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4620      	mov	r0, r4
 8001d64:	4629      	mov	r1, r5
 8001d66:	f7fe fbaf 	bl	80004c8 <__aeabi_dmul>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	460c      	mov	r4, r1
 8001d6e:	4625      	mov	r5, r4
 8001d70:	461c      	mov	r4, r3
 8001d72:	6838      	ldr	r0, [r7, #0]
 8001d74:	f7fe fb50 	bl	8000418 <__aeabi_f2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f005 fb02 	bl	8007388 <sin>
 8001d84:	4680      	mov	r8, r0
 8001d86:	4689      	mov	r9, r1
 8001d88:	68f9      	ldr	r1, [r7, #12]
 8001d8a:	6938      	ldr	r0, [r7, #16]
 8001d8c:	f7fe fee8 	bl	8000b60 <__aeabi_fsub>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fb40 	bl	8000418 <__aeabi_f2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4640      	mov	r0, r8
 8001d9e:	4649      	mov	r1, r9
 8001da0:	f7fe fb92 	bl	80004c8 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f7fe f9d6 	bl	800015c <__adddf3>
 8001db0:	4603      	mov	r3, r0
 8001db2:	460c      	mov	r4, r1
 8001db4:	4618      	mov	r0, r3
 8001db6:	4621      	mov	r1, r4
 8001db8:	a367      	add	r3, pc, #412	; (adr r3, 8001f58 <MotorAngleUpdate+0x348>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	f7fe fb83 	bl	80004c8 <__aeabi_dmul>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460c      	mov	r4, r1
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	4621      	mov	r1, r4
 8001dca:	f7fe fe75 	bl	8000ab8 <__aeabi_d2f>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	61fb      	str	r3, [r7, #28]

	 temp = temp_L/sqrt(pow(temp_M,2) + pow(temp_N,2));
 8001dd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dd4:	f7fe fb20 	bl	8000418 <__aeabi_f2d>
 8001dd8:	4604      	mov	r4, r0
 8001dda:	460d      	mov	r5, r1
 8001ddc:	6a38      	ldr	r0, [r7, #32]
 8001dde:	f7fe fb1b 	bl	8000418 <__aeabi_f2d>
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dea:	f005 fb5b 	bl	80074a4 <pow>
 8001dee:	4680      	mov	r8, r0
 8001df0:	4689      	mov	r9, r1
 8001df2:	69f8      	ldr	r0, [r7, #28]
 8001df4:	f7fe fb10 	bl	8000418 <__aeabi_f2d>
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e00:	f005 fb50 	bl	80074a4 <pow>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4640      	mov	r0, r8
 8001e0a:	4649      	mov	r1, r9
 8001e0c:	f7fe f9a6 	bl	800015c <__adddf3>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f005 fca0 	bl	800775c <sqrt>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4620      	mov	r0, r4
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7fe fc7a 	bl	800071c <__aeabi_ddiv>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	4621      	mov	r1, r4
 8001e30:	f7fe fe42 	bl	8000ab8 <__aeabi_d2f>
 8001e34:	4603      	mov	r3, r0
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28

	 /*for Odd Legs*/
	 if (motor_index%2 != 0)
 8001e38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d037      	beq.n	8001eb6 <MotorAngleUpdate+0x2a6>
	 {
		 MotorTargetAngle[motor_index - 1] = -1 *((asin(temp) - atan(temp_N/temp_M))/0.0174);
 8001e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e48:	f7fe fae6 	bl	8000418 <__aeabi_f2d>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	460c      	mov	r4, r1
 8001e50:	4618      	mov	r0, r3
 8001e52:	4621      	mov	r1, r4
 8001e54:	f005 fad2 	bl	80073fc <asin>
 8001e58:	4604      	mov	r4, r0
 8001e5a:	460d      	mov	r5, r1
 8001e5c:	6a39      	ldr	r1, [r7, #32]
 8001e5e:	69f8      	ldr	r0, [r7, #28]
 8001e60:	f7ff f83c 	bl	8000edc <__aeabi_fdiv>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fad6 	bl	8000418 <__aeabi_f2d>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f005 f8c4 	bl	8007000 <atan>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe f96a 	bl	8000158 <__aeabi_dsub>
 8001e84:	4603      	mov	r3, r0
 8001e86:	460c      	mov	r4, r1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	a334      	add	r3, pc, #208	; (adr r3, 8001f60 <MotorAngleUpdate+0x350>)
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	f7fe fc43 	bl	800071c <__aeabi_ddiv>
 8001e96:	4603      	mov	r3, r0
 8001e98:	460c      	mov	r4, r1
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	f7fe fe0b 	bl	8000ab8 <__aeabi_d2f>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8001eae:	4933      	ldr	r1, [pc, #204]	; (8001f7c <MotorAngleUpdate+0x36c>)
 8001eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001eb4:	e03d      	b.n	8001f32 <MotorAngleUpdate+0x322>
	 }

	 /*For Even Legs*/
	 else if (motor_index%2 == 0)
 8001eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d136      	bne.n	8001f32 <MotorAngleUpdate+0x322>
	 {
	 MotorTargetAngle[motor_index - 1] = (asin(temp) - atan(temp_N/temp_M))/0.0174;
 8001ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ec6:	f7fe faa7 	bl	8000418 <__aeabi_f2d>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	460c      	mov	r4, r1
 8001ece:	4618      	mov	r0, r3
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	f005 fa93 	bl	80073fc <asin>
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	460d      	mov	r5, r1
 8001eda:	6a39      	ldr	r1, [r7, #32]
 8001edc:	69f8      	ldr	r0, [r7, #28]
 8001ede:	f7fe fffd 	bl	8000edc <__aeabi_fdiv>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fa97 	bl	8000418 <__aeabi_f2d>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f005 f885 	bl	8007000 <atan>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4620      	mov	r0, r4
 8001efc:	4629      	mov	r1, r5
 8001efe:	f7fe f92b 	bl	8000158 <__aeabi_dsub>
 8001f02:	4603      	mov	r3, r0
 8001f04:	460c      	mov	r4, r1
 8001f06:	4618      	mov	r0, r3
 8001f08:	4621      	mov	r1, r4
 8001f0a:	a315      	add	r3, pc, #84	; (adr r3, 8001f60 <MotorAngleUpdate+0x350>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe fc04 	bl	800071c <__aeabi_ddiv>
 8001f14:	4603      	mov	r3, r0
 8001f16:	460c      	mov	r4, r1
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4622      	mov	r2, r4
 8001f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f20:	1e5c      	subs	r4, r3, #1
 8001f22:	4608      	mov	r0, r1
 8001f24:	4611      	mov	r1, r2
 8001f26:	f7fe fdc7 	bl	8000ab8 <__aeabi_d2f>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <MotorAngleUpdate+0x36c>)
 8001f2e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 for (motor_index = 1; motor_index <=6 ; motor_index++)
 8001f32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f36:	3301      	adds	r3, #1
 8001f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f40:	2b06      	cmp	r3, #6
 8001f42:	f67f ae91 	bls.w	8001c68 <MotorAngleUpdate+0x58>
		 ;
	 }

 }

}
 8001f46:	bf00      	nop
 8001f48:	3730      	adds	r7, #48	; 0x30
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f50:	904bd07c 	.word	0x904bd07c
 8001f54:	40d3b338 	.word	0x40d3b338
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	4050e7ae 	.word	0x4050e7ae
 8001f60:	3bcd35a8 	.word	0x3bcd35a8
 8001f64:	3f91d14e 	.word	0x3f91d14e
 8001f68:	200001a8 	.word	0x200001a8
 8001f6c:	20000050 	.word	0x20000050
 8001f70:	08009868 	.word	0x08009868
 8001f74:	20000190 	.word	0x20000190
 8001f78:	42873d71 	.word	0x42873d71
 8001f7c:	20000200 	.word	0x20000200

08001f80 <SolveKinematics>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void SolveKinematics(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	RotationMatrixUpdate();
 8001f84:	f7ff fac4 	bl	8001510 <RotationMatrixUpdate>
	TranslationVectorUpdate();
 8001f88:	f7ff fd16 	bl	80019b8 <TranslationVectorUpdate>
	EffectiveLinkLengthCalculationVectorized();
 8001f8c:	f7ff fd30 	bl	80019f0 <EffectiveLinkLengthCalculationVectorized>
	MotorAngleUpdate();
 8001f90:	f7ff fe3e 	bl	8001c10 <MotorAngleUpdate>
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b090      	sub	sp, #64	; 0x40
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

/*Test*/
char MPUStatus1[] = "MPU 9250 Connected\n";
 8001f9e:	4b36      	ldr	r3, [pc, #216]	; (8002078 <main+0xe0>)
 8001fa0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001fa4:	461d      	mov	r5, r3
 8001fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001faa:	682b      	ldr	r3, [r5, #0]
 8001fac:	6023      	str	r3, [r4, #0]
char MPUStatus2[] = "MPU 9250 Not Connected\n";
 8001fae:	4b33      	ldr	r3, [pc, #204]	; (800207c <main+0xe4>)
 8001fb0:	f107 0410 	add.w	r4, r7, #16
 8001fb4:	461d      	mov	r5, r3
 8001fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fbe:	e884 0003 	stmia.w	r4, {r0, r1}
char MPUStatus3[] = "MPU 9250 Error\n";
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <main+0xe8>)
 8001fc4:	463c      	mov	r4, r7
 8001fc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fcc:	f001 fb44 	bl	8003658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd0:	f000 f85e 	bl	8002090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd4:	f7ff f954 	bl	8001280 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001fd8:	f7ff fa1a 	bl	8001410 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001fdc:	f001 f966 	bl	80032ac <MX_TIM3_Init>
  MX_TIM1_Init();
 8001fe0:	f001 f8ac 	bl	800313c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001fe4:	f001 fa8e 	bl	8003504 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001fe8:	f7ff f8d0 	bl	800118c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /*Start Motor Timers*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);		/* Start timer of motor 1*/
 8001fec:	210c      	movs	r1, #12
 8001fee:	4825      	ldr	r0, [pc, #148]	; (8002084 <main+0xec>)
 8001ff0:	f004 f84c 	bl	800608c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		/* Start timer of motor 2*/
 8001ff4:	2108      	movs	r1, #8
 8001ff6:	4823      	ldr	r0, [pc, #140]	; (8002084 <main+0xec>)
 8001ff8:	f004 f848 	bl	800608c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		/* Start timer of motor 3*/
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4821      	ldr	r0, [pc, #132]	; (8002084 <main+0xec>)
 8002000:	f004 f844 	bl	800608c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		/* Start timer of motor 4*/
 8002004:	2108      	movs	r1, #8
 8002006:	4820      	ldr	r0, [pc, #128]	; (8002088 <main+0xf0>)
 8002008:	f004 f840 	bl	800608c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);		/* Start timer of motor 6*/
 800200c:	2100      	movs	r1, #0
 800200e:	481e      	ldr	r0, [pc, #120]	; (8002088 <main+0xf0>)
 8002010:	f004 f83c 	bl	800608c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);		/* Start timer of motor 5*/
 8002014:	2104      	movs	r1, #4
 8002016:	481c      	ldr	r0, [pc, #112]	; (8002088 <main+0xf0>)
 8002018:	f004 f838 	bl	800608c <HAL_TIM_PWM_Start>


  /*Initialize Inertial Measurement Unit*/
  MPU9250Init();
 800201c:	f000 fb92 	bl	8002744 <MPU9250Init>
  AK8963Init();
 8002020:	f000 fc14 	bl	800284c <AK8963Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  bool MPU9250Status = MPU9250IsConnected();
 8002024:	f000 face 	bl	80025c4 <MPU9250IsConnected>
 8002028:	4603      	mov	r3, r0
 800202a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	  if (MPU9250Status == true)
 800202e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <main+0xae>
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t *)MPUStatus1, sizeof(MPUStatus1),100);
 8002036:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800203a:	2364      	movs	r3, #100	; 0x64
 800203c:	2214      	movs	r2, #20
 800203e:	4813      	ldr	r0, [pc, #76]	; (800208c <main+0xf4>)
 8002040:	f004 fe40 	bl	8006cc4 <HAL_UART_Transmit>
 8002044:	e014      	b.n	8002070 <main+0xd8>
	  }

	  else if (MPU9250Status == false)
 8002046:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800204a:	f083 0301 	eor.w	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <main+0xcc>
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t *)MPUStatus2, sizeof(MPUStatus2),100);
 8002054:	f107 0110 	add.w	r1, r7, #16
 8002058:	2364      	movs	r3, #100	; 0x64
 800205a:	2218      	movs	r2, #24
 800205c:	480b      	ldr	r0, [pc, #44]	; (800208c <main+0xf4>)
 800205e:	f004 fe31 	bl	8006cc4 <HAL_UART_Transmit>
 8002062:	e005      	b.n	8002070 <main+0xd8>
	  }

	  else
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t *)MPUStatus3, sizeof(MPUStatus3),100);
 8002064:	4639      	mov	r1, r7
 8002066:	2364      	movs	r3, #100	; 0x64
 8002068:	2210      	movs	r2, #16
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <main+0xf4>)
 800206c:	f004 fe2a 	bl	8006cc4 <HAL_UART_Transmit>
	  }




	  HAL_Delay(100);
 8002070:	2064      	movs	r0, #100	; 0x64
 8002072:	f001 fb53 	bl	800371c <HAL_Delay>
  {
 8002076:	e7d5      	b.n	8002024 <main+0x8c>
 8002078:	08009818 	.word	0x08009818
 800207c:	0800982c 	.word	0x0800982c
 8002080:	08009844 	.word	0x08009844
 8002084:	20000320 	.word	0x20000320
 8002088:	20000368 	.word	0x20000368
 800208c:	200003b0 	.word	0x200003b0

08002090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b094      	sub	sp, #80	; 0x50
 8002094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800209a:	2228      	movs	r2, #40	; 0x28
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f004 ffa4 	bl	8006fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020c0:	2301      	movs	r3, #1
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80020ca:	2300      	movs	r3, #0
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ce:	2301      	movs	r3, #1
 80020d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020d2:	2302      	movs	r3, #2
 80020d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80020e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 fa56 	bl	8005598 <HAL_RCC_OscConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80020f2:	f000 f85c 	bl	80021ae <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020f6:	230f      	movs	r3, #15
 80020f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020fa:	2302      	movs	r3, #2
 80020fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002106:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2102      	movs	r1, #2
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fcc0 	bl	8005a98 <HAL_RCC_ClockConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800211e:	f000 f846 	bl	80021ae <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002122:	2302      	movs	r3, #2
 8002124:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800212a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fe4e 	bl	8005dd0 <HAL_RCCEx_PeriphCLKConfig>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800213a:	f000 f838 	bl	80021ae <Error_Handler>
  }
}
 800213e:	bf00      	nop
 8002140:	3750      	adds	r7, #80	; 0x50
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_GPIO_EXTI_Callback>:
	__NOP();
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)			/*Callback Function for all the external interrupt functions for limit switches 1-6*/
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	2b10      	cmp	r3, #16
 8002154:	d01b      	beq.n	800218e <HAL_GPIO_EXTI_Callback+0x48>
 8002156:	2b10      	cmp	r3, #16
 8002158:	dc04      	bgt.n	8002164 <HAL_GPIO_EXTI_Callback+0x1e>
 800215a:	2b02      	cmp	r3, #2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_EXTI_Callback+0x40>
 800215e:	2b04      	cmp	r3, #4
 8002160:	d00d      	beq.n	800217e <HAL_GPIO_EXTI_Callback+0x38>
					  break;

	case GPIO_PIN_13: LimitSwitchStateDetect(6)	;		/* Limit Switch 6 State Update */
					  break;

	default: 		  break;
 8002162:	e020      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0x60>
	switch(GPIO_Pin)
 8002164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002168:	d015      	beq.n	8002196 <HAL_GPIO_EXTI_Callback+0x50>
 800216a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800216e:	d016      	beq.n	800219e <HAL_GPIO_EXTI_Callback+0x58>
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d000      	beq.n	8002176 <HAL_GPIO_EXTI_Callback+0x30>
	default: 		  break;
 8002174:	e017      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_7 : LimitSwitchStateDetect(1);		/* Limit Switch 1 State Update*/
 8002176:	2001      	movs	r0, #1
 8002178:	f000 fbe0 	bl	800293c <LimitSwitchStateDetect>
					  break;
 800217c:	e013      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_2	: LimitSwitchStateDetect(2)	;		/* Limit Switch 2 State Update */
 800217e:	2002      	movs	r0, #2
 8002180:	f000 fbdc 	bl	800293c <LimitSwitchStateDetect>
					  break;
 8002184:	e00f      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_1	: LimitSwitchStateDetect(3)	;		/* Limit Switch 3 State Update */
 8002186:	2003      	movs	r0, #3
 8002188:	f000 fbd8 	bl	800293c <LimitSwitchStateDetect>
					  break;
 800218c:	e00b      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_4 : LimitSwitchStateDetect(4)	;		/* Limit Switch 4 State Update */
 800218e:	2004      	movs	r0, #4
 8002190:	f000 fbd4 	bl	800293c <LimitSwitchStateDetect>
					  break;
 8002194:	e007      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_12: LimitSwitchStateDetect(5)	;		/* Limit Switch 5 State Update */
 8002196:	2005      	movs	r0, #5
 8002198:	f000 fbd0 	bl	800293c <LimitSwitchStateDetect>
					  break;
 800219c:	e003      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_13: LimitSwitchStateDetect(6)	;		/* Limit Switch 6 State Update */
 800219e:	2006      	movs	r0, #6
 80021a0:	f000 fbcc 	bl	800293c <LimitSwitchStateDetect>
					  break;
 80021a4:	bf00      	nop

	}
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b2:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <Error_Handler+0x6>

080021b6 <MatrixAdd>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

 void MatrixAdd( uint32_t matrix_1_size[2], uint32_t matrix_2_size[2], float32_t matrix_1[matrix_1_size[0]][matrix_1_size[1]] , float32_t matrix_2[matrix_2_size[0]][matrix_2_size[1]] , float32_t result_matrix[matrix_1_size[0]][matrix_1_size[1]])
{
 80021b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b8:	b091      	sub	sp, #68	; 0x44
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6178      	str	r0, [r7, #20]
 80021be:	6139      	str	r1, [r7, #16]
 80021c0:	60fa      	str	r2, [r7, #12]
 80021c2:	60bb      	str	r3, [r7, #8]
 void MatrixAdd( uint32_t matrix_1_size[2], uint32_t matrix_2_size[2], float32_t matrix_1[matrix_1_size[0]][matrix_1_size[1]] , float32_t matrix_2[matrix_2_size[0]][matrix_2_size[1]] , float32_t result_matrix[matrix_1_size[0]][matrix_1_size[1]])
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3304      	adds	r3, #4
 80021c8:	681d      	ldr	r5, [r3, #0]
 80021ca:	462b      	mov	r3, r5
 80021cc:	3b01      	subs	r3, #1
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d0:	4629      	mov	r1, r5
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	f04f 0400 	mov.w	r4, #0
 80021de:	0154      	lsls	r4, r2, #5
 80021e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021e4:	014b      	lsls	r3, r1, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	3304      	adds	r3, #4
 80021ea:	681e      	ldr	r6, [r3, #0]
 80021ec:	4633      	mov	r3, r6
 80021ee:	3b01      	subs	r3, #1
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
 80021f2:	4631      	mov	r1, r6
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	f04f 0400 	mov.w	r4, #0
 8002200:	0154      	lsls	r4, r2, #5
 8002202:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002206:	014b      	lsls	r3, r1, #5
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3304      	adds	r3, #4
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	3b01      	subs	r3, #1
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002216:	4613      	mov	r3, r2
 8002218:	f04f 0400 	mov.w	r4, #0
 800221c:	4619      	mov	r1, r3
 800221e:	4622      	mov	r2, r4
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	f04f 0400 	mov.w	r4, #0
 8002228:	0154      	lsls	r4, r2, #5
 800222a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800222e:	014b      	lsls	r3, r1, #5
	uint32_t mat_1_row = matrix_1_size[0];
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t mat_1_col = matrix_1_size[1];
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t mat_2_row = matrix_2_size[0];
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	623b      	str	r3, [r7, #32]
	uint32_t mat_2_col = matrix_2_size[1];
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61fb      	str	r3, [r7, #28]


	if ((mat_1_row == mat_2_row)&&(mat_1_col == mat_2_col))
 8002248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	429a      	cmp	r2, r3
 800224e:	d137      	bne.n	80022c0 <MatrixAdd+0x10a>
 8002250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	429a      	cmp	r2, r3
 8002256:	d133      	bne.n	80022c0 <MatrixAdd+0x10a>
	{
		for (uint32_t row_index = 0; row_index <=mat_1_row ; row_index ++ )
 8002258:	2300      	movs	r3, #0
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
 800225c:	e02c      	b.n	80022b8 <MatrixAdd+0x102>
		{
			for (uint32_t col_index = 0; col_index <=mat_1_col ; col_index++)
 800225e:	2300      	movs	r3, #0
 8002260:	63bb      	str	r3, [r7, #56]	; 0x38
 8002262:	e022      	b.n	80022aa <MatrixAdd+0xf4>
			{
				result_matrix[row_index][col_index] = matrix_1[row_index][col_index]+ matrix_2[row_index][col_index];
 8002264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002266:	fb03 f305 	mul.w	r3, r3, r5
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002272:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002278:	fb03 f306 	mul.w	r3, r3, r6
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	4413      	add	r3, r2
 8002282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	fb03 f302 	mul.w	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002294:	18d4      	adds	r4, r2, r3
 8002296:	f7fe fc65 	bl	8000b64 <__addsf3>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for (uint32_t col_index = 0; col_index <=mat_1_col ; col_index++)
 80022a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a6:	3301      	adds	r3, #1
 80022a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80022aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d9d8      	bls.n	8002264 <MatrixAdd+0xae>
		for (uint32_t row_index = 0; row_index <=mat_1_row ; row_index ++ )
 80022b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b4:	3301      	adds	r3, #1
 80022b6:	637b      	str	r3, [r7, #52]	; 0x34
 80022b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	429a      	cmp	r2, r3
 80022be:	d9ce      	bls.n	800225e <MatrixAdd+0xa8>
	else
	{
		;
	}

}
 80022c0:	bf00      	nop
 80022c2:	3744      	adds	r7, #68	; 0x44
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022c8 <MatrixSubtract>:
  * Version No.		 Date			Author 					Email				Description
  * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
 */

 void MatrixSubtract( uint32_t matrix_1_size[2], uint32_t matrix_2_size[2], float32_t matrix_1[matrix_1_size[0]][matrix_1_size[1]] , float32_t matrix_2[matrix_2_size[0]][matrix_2_size[1]] , float32_t result_matrix[matrix_1_size[0]][matrix_1_size[1]])
{
 80022c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ca:	b091      	sub	sp, #68	; 0x44
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6178      	str	r0, [r7, #20]
 80022d0:	6139      	str	r1, [r7, #16]
 80022d2:	60fa      	str	r2, [r7, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
 void MatrixSubtract( uint32_t matrix_1_size[2], uint32_t matrix_2_size[2], float32_t matrix_1[matrix_1_size[0]][matrix_1_size[1]] , float32_t matrix_2[matrix_2_size[0]][matrix_2_size[1]] , float32_t result_matrix[matrix_1_size[0]][matrix_1_size[1]])
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3304      	adds	r3, #4
 80022da:	681d      	ldr	r5, [r3, #0]
 80022dc:	462b      	mov	r3, r5
 80022de:	3b01      	subs	r3, #1
 80022e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e2:	4629      	mov	r1, r5
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	f04f 0400 	mov.w	r4, #0
 80022f0:	0154      	lsls	r4, r2, #5
 80022f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022f6:	014b      	lsls	r3, r1, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	3304      	adds	r3, #4
 80022fc:	681e      	ldr	r6, [r3, #0]
 80022fe:	4633      	mov	r3, r6
 8002300:	3b01      	subs	r3, #1
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
 8002304:	4631      	mov	r1, r6
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	f04f 0400 	mov.w	r4, #0
 8002312:	0154      	lsls	r4, r2, #5
 8002314:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002318:	014b      	lsls	r3, r1, #5
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3304      	adds	r3, #4
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	3b01      	subs	r3, #1
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002328:	4613      	mov	r3, r2
 800232a:	f04f 0400 	mov.w	r4, #0
 800232e:	4619      	mov	r1, r3
 8002330:	4622      	mov	r2, r4
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	f04f 0400 	mov.w	r4, #0
 800233a:	0154      	lsls	r4, r2, #5
 800233c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002340:	014b      	lsls	r3, r1, #5
	uint32_t mat_1_row = matrix_1_size[0];
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t mat_1_col = matrix_1_size[1];
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t mat_2_row = matrix_2_size[0];
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	623b      	str	r3, [r7, #32]
	uint32_t mat_2_col = matrix_2_size[1];
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	61fb      	str	r3, [r7, #28]


	if ((mat_1_row == mat_2_row)&&(mat_1_col == mat_2_col))
 800235a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	429a      	cmp	r2, r3
 8002360:	d137      	bne.n	80023d2 <MatrixSubtract+0x10a>
 8002362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	429a      	cmp	r2, r3
 8002368:	d133      	bne.n	80023d2 <MatrixSubtract+0x10a>
	{
		for (uint32_t row_index = 0; row_index <mat_1_row ; row_index ++ )
 800236a:	2300      	movs	r3, #0
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
 800236e:	e02c      	b.n	80023ca <MatrixSubtract+0x102>
		{
			for (uint32_t col_index = 0; col_index <mat_1_col ; col_index++)
 8002370:	2300      	movs	r3, #0
 8002372:	63bb      	str	r3, [r7, #56]	; 0x38
 8002374:	e022      	b.n	80023bc <MatrixSubtract+0xf4>
			{
				result_matrix[row_index][col_index] = matrix_1[row_index][col_index]- matrix_2[row_index][col_index];
 8002376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002378:	fb03 f305 	mul.w	r3, r3, r5
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4413      	add	r3, r2
 8002382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002384:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238a:	fb03 f306 	mul.w	r3, r3, r6
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	4413      	add	r3, r2
 8002394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002396:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800239a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	fb03 f302 	mul.w	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023a6:	18d4      	adds	r4, r2, r3
 80023a8:	f7fe fbda 	bl	8000b60 <__aeabi_fsub>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b2:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
			for (uint32_t col_index = 0; col_index <mat_1_col ; col_index++)
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	3301      	adds	r3, #1
 80023ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80023bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d3d8      	bcc.n	8002376 <MatrixSubtract+0xae>
		for (uint32_t row_index = 0; row_index <mat_1_row ; row_index ++ )
 80023c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c6:	3301      	adds	r3, #1
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
 80023ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d3ce      	bcc.n	8002370 <MatrixSubtract+0xa8>
			}
		}
	}

}
 80023d2:	bf00      	nop
 80023d4:	3744      	adds	r7, #68	; 0x44
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023da <MatrixMultiply>:
  * Change Log
  * Version No.		 Date			Author 					Email				Description
  * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
 */
 void MatrixMultiply (uint32_t matrix_1_size[2], uint32_t matrix_2_size[2], float32_t matrix_1[matrix_1_size[0]][matrix_1_size[1]] , float32_t matrix_2[matrix_2_size[0]][matrix_2_size[1]] , float32_t result_matrix[matrix_1_size[0]][matrix_2_size[1]])
{
 80023da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023dc:	b095      	sub	sp, #84	; 0x54
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6178      	str	r0, [r7, #20]
 80023e2:	6139      	str	r1, [r7, #16]
 80023e4:	60fa      	str	r2, [r7, #12]
 80023e6:	60bb      	str	r3, [r7, #8]
 void MatrixMultiply (uint32_t matrix_1_size[2], uint32_t matrix_2_size[2], float32_t matrix_1[matrix_1_size[0]][matrix_1_size[1]] , float32_t matrix_2[matrix_2_size[0]][matrix_2_size[1]] , float32_t result_matrix[matrix_1_size[0]][matrix_2_size[1]])
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3304      	adds	r3, #4
 80023ec:	681d      	ldr	r5, [r3, #0]
 80023ee:	462b      	mov	r3, r5
 80023f0:	3b01      	subs	r3, #1
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f4:	4629      	mov	r1, r5
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	f04f 0400 	mov.w	r4, #0
 8002402:	0154      	lsls	r4, r2, #5
 8002404:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002408:	014b      	lsls	r3, r1, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	3304      	adds	r3, #4
 800240e:	681e      	ldr	r6, [r3, #0]
 8002410:	4633      	mov	r3, r6
 8002412:	3b01      	subs	r3, #1
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
 8002416:	4631      	mov	r1, r6
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	f04f 0400 	mov.w	r4, #0
 8002424:	0154      	lsls	r4, r2, #5
 8002426:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800242a:	014b      	lsls	r3, r1, #5
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	3304      	adds	r3, #4
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	3b01      	subs	r3, #1
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
 800243a:	4613      	mov	r3, r2
 800243c:	f04f 0400 	mov.w	r4, #0
 8002440:	4619      	mov	r1, r3
 8002442:	4622      	mov	r2, r4
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	f04f 0400 	mov.w	r4, #0
 800244c:	0154      	lsls	r4, r2, #5
 800244e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002452:	014b      	lsls	r3, r1, #5
	uint32_t mat_1_row = matrix_1_size[0];
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mat_1_col = matrix_1_size[1];
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t mat_2_row = matrix_2_size[0];
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t mat_2_col = matrix_2_size[1];
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	627b      	str	r3, [r7, #36]	; 0x24


	if (mat_2_row == mat_1_col)
 800246c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	429a      	cmp	r2, r3
 8002472:	d14a      	bne.n	800250a <MatrixMultiply+0x130>
	{
		for (uint32_t row_index = 0; row_index <mat_1_row ; row_index ++ )
 8002474:	2300      	movs	r3, #0
 8002476:	643b      	str	r3, [r7, #64]	; 0x40
 8002478:	e043      	b.n	8002502 <MatrixMultiply+0x128>
			{
				for (uint32_t col_index = 0; col_index <mat_2_col ; col_index++)
 800247a:	2300      	movs	r3, #0
 800247c:	647b      	str	r3, [r7, #68]	; 0x44
 800247e:	e039      	b.n	80024f4 <MatrixMultiply+0x11a>
					{

						float32_t temp_sum = 0;
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	64bb      	str	r3, [r7, #72]	; 0x48

						for (uint32_t temp_index = 0; temp_index <mat_1_col ; temp_index ++)
 8002486:	2300      	movs	r3, #0
 8002488:	64fb      	str	r3, [r7, #76]	; 0x4c
 800248a:	e021      	b.n	80024d0 <MatrixMultiply+0xf6>
						{
							float32_t temp_val_1 = matrix_1[row_index][temp_index];
 800248c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248e:	fb03 f305 	mul.w	r3, r3, r5
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249e:	623b      	str	r3, [r7, #32]
							float32_t temp_val_2 = matrix_2[temp_index][col_index];
 80024a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a2:	fb03 f306 	mul.w	r3, r3, r6
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	4413      	add	r3, r2
 80024ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b2:	61fb      	str	r3, [r7, #28]
							temp_sum = temp_sum + (temp_val_1*temp_val_2);
 80024b4:	69f9      	ldr	r1, [r7, #28]
 80024b6:	6a38      	ldr	r0, [r7, #32]
 80024b8:	f7fe fc5c 	bl	8000d74 <__aeabi_fmul>
 80024bc:	4603      	mov	r3, r0
 80024be:	4619      	mov	r1, r3
 80024c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80024c2:	f7fe fb4f 	bl	8000b64 <__addsf3>
 80024c6:	4603      	mov	r3, r0
 80024c8:	64bb      	str	r3, [r7, #72]	; 0x48
						for (uint32_t temp_index = 0; temp_index <mat_1_col ; temp_index ++)
 80024ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024cc:	3301      	adds	r3, #1
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d3d9      	bcc.n	800248c <MatrixMultiply+0xb2>
						}

						result_matrix[row_index][col_index] = temp_sum ;
 80024d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	fb03 f302 	mul.w	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80024e4:	4413      	add	r3, r2
 80024e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80024ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (uint32_t col_index = 0; col_index <mat_2_col ; col_index++)
 80024ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f0:	3301      	adds	r3, #1
 80024f2:	647b      	str	r3, [r7, #68]	; 0x44
 80024f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d3c1      	bcc.n	8002480 <MatrixMultiply+0xa6>
		for (uint32_t row_index = 0; row_index <mat_1_row ; row_index ++ )
 80024fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024fe:	3301      	adds	r3, #1
 8002500:	643b      	str	r3, [r7, #64]	; 0x40
 8002502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	429a      	cmp	r2, r3
 8002508:	d3b7      	bcc.n	800247a <MatrixMultiply+0xa0>
	else
	{
		;
	}

}
 800250a:	bf00      	nop
 800250c:	3754      	adds	r7, #84	; 0x54
 800250e:	46bd      	mov	sp, r7
 8002510:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002512 <MatrixTranspose>:
  * Version No.		 Date			Author 					Email				Description
  * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
 */

 void MatrixTranspose(uint32_t matrix_size[2], float32_t matrix[matrix_size[0]][matrix_size[1]] , float32_t result_matrix[matrix_size[1]][matrix_size[0]])
{
 8002512:	b4b0      	push	{r4, r5, r7}
 8002514:	b08b      	sub	sp, #44	; 0x2c
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 void MatrixTranspose(uint32_t matrix_size[2], float32_t matrix[matrix_size[0]][matrix_size[1]] , float32_t result_matrix[matrix_size[1]][matrix_size[0]])
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3304      	adds	r3, #4
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	4603      	mov	r3, r0
 8002526:	3b01      	subs	r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	4601      	mov	r1, r0
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	f04f 0400 	mov.w	r4, #0
 8002538:	0154      	lsls	r4, r2, #5
 800253a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800253e:	014b      	lsls	r3, r1, #5
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681d      	ldr	r5, [r3, #0]
 8002544:	462b      	mov	r3, r5
 8002546:	3b01      	subs	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	4629      	mov	r1, r5
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	f04f 0400 	mov.w	r4, #0
 8002558:	0154      	lsls	r4, r2, #5
 800255a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800255e:	014b      	lsls	r3, r1, #5
	uint32_t mat_row = matrix_size[0];
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	617b      	str	r3, [r7, #20]
	uint32_t mat_col = matrix_size[1];
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	613b      	str	r3, [r7, #16]


	for (uint32_t row_index = 0; row_index <mat_row ; row_index ++ )
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	e01e      	b.n	80025b0 <MatrixTranspose+0x9e>
		{
			for (uint32_t col_index = 0; col_index <mat_col ; col_index++)
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
 8002576:	e014      	b.n	80025a2 <MatrixTranspose+0x90>
				{
					result_matrix[col_index][row_index] = matrix[row_index][col_index];
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	fb03 f300 	mul.w	r3, r3, r0
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	441a      	add	r2, r3
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	fb03 f305 	mul.w	r3, r3, r5
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	440b      	add	r3, r1
 8002590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002592:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002596:	6a3a      	ldr	r2, [r7, #32]
 8002598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (uint32_t col_index = 0; col_index <mat_col ; col_index++)
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	3301      	adds	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3e6      	bcc.n	8002578 <MatrixTranspose+0x66>
	for (uint32_t row_index = 0; row_index <mat_row ; row_index ++ )
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	3301      	adds	r3, #1
 80025ae:	623b      	str	r3, [r7, #32]
 80025b0:	6a3a      	ldr	r2, [r7, #32]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d3dc      	bcc.n	8002572 <MatrixTranspose+0x60>
				}
		}

}
 80025b8:	bf00      	nop
 80025ba:	372c      	adds	r7, #44	; 0x2c
 80025bc:	46bd      	mov	sp, r7
 80025be:	bcb0      	pop	{r4, r5, r7}
 80025c0:	4770      	bx	lr
	...

080025c4 <MPU9250IsConnected>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com		Basic function using HAL_I2C_IsDeviceReady function
*/

bool  MPU9250IsConnected()
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1,MPU9250_ADDRESS,MPU9250_I2C_COMM_CHECK_TRY, MPU9250_I2C_COMM_CHECK_TIMEOUT) == HAL_OK)
 80025c8:	230a      	movs	r3, #10
 80025ca:	2201      	movs	r2, #1
 80025cc:	21d0      	movs	r1, #208	; 0xd0
 80025ce:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MPU9250IsConnected+0x20>)
 80025d0:	f002 faf2 	bl	8004bb8 <HAL_I2C_IsDeviceReady>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <MPU9250IsConnected+0x1a>
		{
			return true;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <MPU9250IsConnected+0x1c>
		}
	else
		{
			return false;
 80025de:	2300      	movs	r3, #0
		}

}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	200002c8 	.word	0x200002c8

080025e8 <I2CWrite>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com		Basic routine using HAL_I2C_Mem_Write function
*/

static void I2CWrite(uint8_t *data,uint8_t device_address ,uint8_t write_address , uint16_t num_bytes)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af04      	add	r7, sp, #16
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	70fb      	strb	r3, [r7, #3]
 80025fa:	460b      	mov	r3, r1
 80025fc:	70bb      	strb	r3, [r7, #2]
 80025fe:	4613      	mov	r3, r2
 8002600:	803b      	strh	r3, [r7, #0]
	MPUReturnStatus = HAL_I2C_Mem_Write(&hi2c1, device_address, write_address, I2C_MEMADD_SIZE_8BIT, data, num_bytes, HAL_MAX_DELAY);
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	b299      	uxth	r1, r3
 8002606:	78bb      	ldrb	r3, [r7, #2]
 8002608:	b29a      	uxth	r2, r3
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	9302      	str	r3, [sp, #8]
 8002610:	883b      	ldrh	r3, [r7, #0]
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2301      	movs	r3, #1
 800261a:	4805      	ldr	r0, [pc, #20]	; (8002630 <I2CWrite+0x48>)
 800261c:	f002 f9d2 	bl	80049c4 <HAL_I2C_Mem_Write>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <I2CWrite+0x4c>)
 8002626:	701a      	strb	r2, [r3, #0]

	/*Insert Error Handling Routine*/


}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200002c8 	.word	0x200002c8
 8002634:	2000031c 	.word	0x2000031c

08002638 <I2CRead>:
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com		Basic routine using HAL_I2C_Master_Transmit
 * 	  																			and HAL_I2C_Master_Receive function
*/

static void I2CRead(uint8_t *data_recieve_buffer,uint8_t device_address ,uint8_t read_address, uint16_t num_bytes_to_read)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af02      	add	r7, sp, #8
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	4608      	mov	r0, r1
 8002642:	4611      	mov	r1, r2
 8002644:	461a      	mov	r2, r3
 8002646:	4603      	mov	r3, r0
 8002648:	70fb      	strb	r3, [r7, #3]
 800264a:	460b      	mov	r3, r1
 800264c:	70bb      	strb	r3, [r7, #2]
 800264e:	4613      	mov	r3, r2
 8002650:	803b      	strh	r3, [r7, #0]

	uint8_t data_send = read_address;
 8002652:	78bb      	ldrb	r3, [r7, #2]
 8002654:	73fb      	strb	r3, [r7, #15]

	/*Transmit the register address(to be read) in the MPU 9250*/
	MPUReturnStatus = HAL_I2C_Master_Transmit(&hi2c1 , device_address, &data_send , 1 , HAL_MAX_DELAY);
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	b299      	uxth	r1, r3
 800265a:	f107 020f 	add.w	r2, r7, #15
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2301      	movs	r3, #1
 8002666:	480d      	ldr	r0, [pc, #52]	; (800269c <I2CRead+0x64>)
 8002668:	f001 fe54 	bl	8004314 <HAL_I2C_Master_Transmit>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <I2CRead+0x68>)
 8002672:	701a      	strb	r2, [r3, #0]

	/*Insert Error Handling Routine*/


	/* Recieve data in the register in MPU9250 and store it in data_recieve_buffer*/
	MPUReturnStatus = HAL_I2C_Master_Receive(&hi2c1 , device_address, data_recieve_buffer, num_bytes_to_read , HAL_MAX_DELAY);
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	b299      	uxth	r1, r3
 8002678:	883a      	ldrh	r2, [r7, #0]
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4805      	ldr	r0, [pc, #20]	; (800269c <I2CRead+0x64>)
 8002686:	f001 ff43 	bl	8004510 <HAL_I2C_Master_Receive>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <I2CRead+0x68>)
 8002690:	701a      	strb	r2, [r3, #0]

}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200002c8 	.word	0x200002c8
 80026a0:	2000031c 	.word	0x2000031c

080026a4 <WriteMPURegister>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void WriteMPURegister(uint8_t register_address , uint8_t data)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	460a      	mov	r2, r1
 80026ae:	71fb      	strb	r3, [r7, #7]
 80026b0:	4613      	mov	r3, r2
 80026b2:	71bb      	strb	r3, [r7, #6]
	I2CWrite(&data,MPU9250_ADDRESS,register_address, sizeof(data));
 80026b4:	79fa      	ldrb	r2, [r7, #7]
 80026b6:	1db8      	adds	r0, r7, #6
 80026b8:	2301      	movs	r3, #1
 80026ba:	21d0      	movs	r1, #208	; 0xd0
 80026bc:	f7ff ff94 	bl	80025e8 <I2CWrite>
	HAL_Delay(10);
 80026c0:	200a      	movs	r0, #10
 80026c2:	f001 f82b 	bl	800371c <HAL_Delay>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <ReadMPURegister>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void ReadMPURegister(uint8_t register_address , uint8_t* data_buffer, uint8_t data_size)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	6039      	str	r1, [r7, #0]
 80026d8:	71fb      	strb	r3, [r7, #7]
 80026da:	4613      	mov	r3, r2
 80026dc:	71bb      	strb	r3, [r7, #6]
	I2CRead(data_buffer ,MPU9250_ADDRESS	 ,register_address, data_size);
 80026de:	79bb      	ldrb	r3, [r7, #6]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	79fa      	ldrb	r2, [r7, #7]
 80026e4:	21d0      	movs	r1, #208	; 0xd0
 80026e6:	6838      	ldr	r0, [r7, #0]
 80026e8:	f7ff ffa6 	bl	8002638 <I2CRead>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <WriteAK8963Register>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void WriteAK8963Register(uint8_t register_address , uint8_t data)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	460a      	mov	r2, r1
 80026fe:	71fb      	strb	r3, [r7, #7]
 8002700:	4613      	mov	r3, r2
 8002702:	71bb      	strb	r3, [r7, #6]
	I2CWrite(&data,AK8963_ADDRESS,register_address, sizeof(data));
 8002704:	79fa      	ldrb	r2, [r7, #7]
 8002706:	1db8      	adds	r0, r7, #6
 8002708:	2301      	movs	r3, #1
 800270a:	2118      	movs	r1, #24
 800270c:	f7ff ff6c 	bl	80025e8 <I2CWrite>
	HAL_Delay(10);
 8002710:	200a      	movs	r0, #10
 8002712:	f001 f803 	bl	800371c <HAL_Delay>

}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <ReadAK8963Register>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void ReadAK8963Register(uint8_t register_address, uint8_t* data_buffer, uint8_t data_size)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	6039      	str	r1, [r7, #0]
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	4613      	mov	r3, r2
 800272c:	71bb      	strb	r3, [r7, #6]

	I2CRead(data_buffer ,AK8963_ADDRESS,register_address, data_size);
 800272e:	79bb      	ldrb	r3, [r7, #6]
 8002730:	b29b      	uxth	r3, r3
 8002732:	79fa      	ldrb	r2, [r7, #7]
 8002734:	2118      	movs	r1, #24
 8002736:	6838      	ldr	r0, [r7, #0]
 8002738:	f7ff ff7e 	bl	8002638 <I2CRead>
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <MPU9250Init>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void MPU9250Init()
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
	WriteMPURegister(PWR_MGMT_1,0x00);
 800274a:	2100      	movs	r1, #0
 800274c:	206b      	movs	r0, #107	; 0x6b
 800274e:	f7ff ffa9 	bl	80026a4 <WriteMPURegister>
	HAL_Delay(100);
 8002752:	2064      	movs	r0, #100	; 0x64
 8002754:	f000 ffe2 	bl	800371c <HAL_Delay>
	WriteMPURegister(PWR_MGMT_1,0x01);
 8002758:	2101      	movs	r1, #1
 800275a:	206b      	movs	r0, #107	; 0x6b
 800275c:	f7ff ffa2 	bl	80026a4 <WriteMPURegister>
	HAL_Delay(200);
 8002760:	20c8      	movs	r0, #200	; 0xc8
 8002762:	f000 ffdb 	bl	800371c <HAL_Delay>
	WriteMPURegister(CONFIG,0x03);
 8002766:	2103      	movs	r1, #3
 8002768:	201a      	movs	r0, #26
 800276a:	f7ff ff9b 	bl	80026a4 <WriteMPURegister>
	WriteMPURegister(SMPLRT_DIV,0x04);
 800276e:	2104      	movs	r1, #4
 8002770:	2019      	movs	r0, #25
 8002772:	f7ff ff97 	bl	80026a4 <WriteMPURegister>

	/*Set Gyroscope Scale Configuration*/
	uint8_t gyro_config = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	70fb      	strb	r3, [r7, #3]
	uint8_t* gyro_config_addr = &gyro_config;
 800277a:	1cfb      	adds	r3, r7, #3
 800277c:	60fb      	str	r3, [r7, #12]
	ReadMPURegister(GYRO_CONFIG,gyro_config_addr,sizeof(gyro_config));
 800277e:	2201      	movs	r2, #1
 8002780:	68f9      	ldr	r1, [r7, #12]
 8002782:	201b      	movs	r0, #27
 8002784:	f7ff ffa3 	bl	80026ce <ReadMPURegister>
	gyro_config = gyro_config &~0x02;
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	f023 0302 	bic.w	r3, r3, #2
 800278e:	b2db      	uxtb	r3, r3
 8002790:	70fb      	strb	r3, [r7, #3]
	gyro_config = gyro_config &~0x18;
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	f023 0318 	bic.w	r3, r3, #24
 8002798:	b2db      	uxtb	r3, r3
 800279a:	70fb      	strb	r3, [r7, #3]
	gyro_config = gyro_config|GScale << 3;
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <MPU9250Init+0x100>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	b25a      	sxtb	r2, r3
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	70fb      	strb	r3, [r7, #3]
	/*gyro_config = gyro_config|0x00;*/
	WriteMPURegister(GYRO_CONFIG,gyro_config);
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	4619      	mov	r1, r3
 80027b4:	201b      	movs	r0, #27
 80027b6:	f7ff ff75 	bl	80026a4 <WriteMPURegister>

	/*Set Accelerometer Scale Configuration*/
	uint8_t accel_config = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	70bb      	strb	r3, [r7, #2]
	uint8_t* accel_config_addr = &accel_config;
 80027be:	1cbb      	adds	r3, r7, #2
 80027c0:	60bb      	str	r3, [r7, #8]
	ReadMPURegister(ACCEL_CONFIG,accel_config_addr,sizeof(accel_config));
 80027c2:	2201      	movs	r2, #1
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	201c      	movs	r0, #28
 80027c8:	f7ff ff81 	bl	80026ce <ReadMPURegister>
	/*accel_config = accel_config &~0xE0;*/
	accel_config = accel_config &~0x18;
 80027cc:	78bb      	ldrb	r3, [r7, #2]
 80027ce:	f023 0318 	bic.w	r3, r3, #24
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	70bb      	strb	r3, [r7, #2]
	accel_config = accel_config | AScale << 3;
 80027d6:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <MPU9250Init+0x104>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	b25a      	sxtb	r2, r3
 80027de:	78bb      	ldrb	r3, [r7, #2]
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	4313      	orrs	r3, r2
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	70bb      	strb	r3, [r7, #2]
	WriteMPURegister(ACCEL_CONFIG,accel_config);
 80027ea:	78bb      	ldrb	r3, [r7, #2]
 80027ec:	4619      	mov	r1, r3
 80027ee:	201c      	movs	r0, #28
 80027f0:	f7ff ff58 	bl	80026a4 <WriteMPURegister>

	/*Set accelerometer sample rate configuration*/
	uint8_t accel_config_2 = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	707b      	strb	r3, [r7, #1]
	uint8_t* accel_config_2_addr = &accel_config_2;
 80027f8:	1c7b      	adds	r3, r7, #1
 80027fa:	607b      	str	r3, [r7, #4]
	ReadMPURegister(ACCEL_CONFIG2,accel_config_2_addr,sizeof(accel_config_2));
 80027fc:	2201      	movs	r2, #1
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	201d      	movs	r0, #29
 8002802:	f7ff ff64 	bl	80026ce <ReadMPURegister>
	accel_config = accel_config_2 &~0x0F;
 8002806:	787b      	ldrb	r3, [r7, #1]
 8002808:	f023 030f 	bic.w	r3, r3, #15
 800280c:	b2db      	uxtb	r3, r3
 800280e:	70bb      	strb	r3, [r7, #2]
	accel_config = accel_config_2 | 0x03;
 8002810:	787b      	ldrb	r3, [r7, #1]
 8002812:	f043 0303 	orr.w	r3, r3, #3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	70bb      	strb	r3, [r7, #2]
	WriteMPURegister(ACCEL_CONFIG2,accel_config_2);
 800281a:	787b      	ldrb	r3, [r7, #1]
 800281c:	4619      	mov	r1, r3
 800281e:	201d      	movs	r0, #29
 8002820:	f7ff ff40 	bl	80026a4 <WriteMPURegister>

	WriteMPURegister(INT_PIN_CFG,0x22);
 8002824:	2122      	movs	r1, #34	; 0x22
 8002826:	2037      	movs	r0, #55	; 0x37
 8002828:	f7ff ff3c 	bl	80026a4 <WriteMPURegister>
	WriteMPURegister(INT_ENABLE,0x01);
 800282c:	2101      	movs	r1, #1
 800282e:	2038      	movs	r0, #56	; 0x38
 8002830:	f7ff ff38 	bl	80026a4 <WriteMPURegister>
	HAL_Delay(100);
 8002834:	2064      	movs	r0, #100	; 0x64
 8002836:	f000 ff71 	bl	800371c <HAL_Delay>
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200001fd 	.word	0x200001fd
 8002848:	200001fc 	.word	0x200001fc

0800284c <AK8963Init>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void AK8963Init()
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
	uint8_t raw_data[3];
	WriteAK8963Register( AK8963_CNTL,0x00);
 8002852:	2100      	movs	r1, #0
 8002854:	200a      	movs	r0, #10
 8002856:	f7ff ff4d 	bl	80026f4 <WriteAK8963Register>
	HAL_Delay(100);
 800285a:	2064      	movs	r0, #100	; 0x64
 800285c:	f000 ff5e 	bl	800371c <HAL_Delay>
	WriteAK8963Register( AK8963_CNTL,0x0F);
 8002860:	210f      	movs	r1, #15
 8002862:	200a      	movs	r0, #10
 8002864:	f7ff ff46 	bl	80026f4 <WriteAK8963Register>
	HAL_Delay(100);
 8002868:	2064      	movs	r0, #100	; 0x64
 800286a:	f000 ff57 	bl	800371c <HAL_Delay>
	ReadAK8963Register(AK8963_ASAX, &raw_data[0], sizeof(raw_data));
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	2203      	movs	r2, #3
 8002872:	4619      	mov	r1, r3
 8002874:	2010      	movs	r0, #16
 8002876:	f7ff ff52 	bl	800271e <ReadAK8963Register>

	MagBiasFactory[0] = (float)(raw_data[0] - 128)/256.0f +1.0f;
 800287a:	793b      	ldrb	r3, [r7, #4]
 800287c:	3b80      	subs	r3, #128	; 0x80
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fa24 	bl	8000ccc <__aeabi_i2f>
 8002884:	4603      	mov	r3, r0
 8002886:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fb26 	bl	8000edc <__aeabi_fdiv>
 8002890:	4603      	mov	r3, r0
 8002892:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe f964 	bl	8000b64 <__addsf3>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	4b23      	ldr	r3, [pc, #140]	; (8002930 <AK8963Init+0xe4>)
 80028a2:	601a      	str	r2, [r3, #0]
	MagBiasFactory[1] = (float)(raw_data[1] - 128)/256.0f +1.0f;
 80028a4:	797b      	ldrb	r3, [r7, #5]
 80028a6:	3b80      	subs	r3, #128	; 0x80
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe fa0f 	bl	8000ccc <__aeabi_i2f>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fb11 	bl	8000edc <__aeabi_fdiv>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe f94f 	bl	8000b64 <__addsf3>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b19      	ldr	r3, [pc, #100]	; (8002930 <AK8963Init+0xe4>)
 80028cc:	605a      	str	r2, [r3, #4]
	MagBiasFactory[2] = (float)(raw_data[2] - 128)/256.0f +1.0f;
 80028ce:	79bb      	ldrb	r3, [r7, #6]
 80028d0:	3b80      	subs	r3, #128	; 0x80
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe f9fa 	bl	8000ccc <__aeabi_i2f>
 80028d8:	4603      	mov	r3, r0
 80028da:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fafc 	bl	8000edc <__aeabi_fdiv>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe f93a 	bl	8000b64 <__addsf3>
 80028f0:	4603      	mov	r3, r0
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <AK8963Init+0xe4>)
 80028f6:	609a      	str	r2, [r3, #8]

	WriteAK8963Register(AK8963_CNTL,0x00);
 80028f8:	2100      	movs	r1, #0
 80028fa:	200a      	movs	r0, #10
 80028fc:	f7ff fefa 	bl	80026f4 <WriteAK8963Register>
	HAL_Delay(100);
 8002900:	2064      	movs	r0, #100	; 0x64
 8002902:	f000 ff0b 	bl	800371c <HAL_Delay>

	WriteAK8963Register(AK8963_CNTL,MScale <<4|MMode);
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <AK8963Init+0xe8>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	b25a      	sxtb	r2, r3
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <AK8963Init+0xec>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	b25b      	sxtb	r3, r3
 8002914:	4313      	orrs	r3, r2
 8002916:	b25b      	sxtb	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	4619      	mov	r1, r3
 800291c:	200a      	movs	r0, #10
 800291e:	f7ff fee9 	bl	80026f4 <WriteAK8963Register>
	HAL_Delay(100);
 8002922:	2064      	movs	r0, #100	; 0x64
 8002924:	f000 fefa 	bl	800371c <HAL_Delay>
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	200001f0 	.word	0x200001f0
 8002934:	200000ad 	.word	0x200000ad
 8002938:	200000ac 	.word	0x200000ac

0800293c <LimitSwitchStateDetect>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-03-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void LimitSwitchStateDetect(uint32_t limit_switch_index)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	switch (LimitSwitchState[limit_switch_index -1]) /*Every time the function is triggered from the external interrupt, the updated value is the opposite of the old value*/
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <LimitSwitchStateDetect+0x3c>)
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <LimitSwitchStateDetect+0x1a>
 8002950:	2b01      	cmp	r3, #1
 8002952:	d006      	beq.n	8002962 <LimitSwitchStateDetect+0x26>
						  	  	  	  	  	 break;

						  	  	  case HIGH: LimitSwitchState[limit_switch_index -1] = LOW;
						  	  	  	  	  	 break;

						  	  	  default: break;
 8002954:	e00b      	b.n	800296e <LimitSwitchStateDetect+0x32>
						  	  	  case LOW:  LimitSwitchState[limit_switch_index -1] = HIGH;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3b01      	subs	r3, #1
 800295a:	4a07      	ldr	r2, [pc, #28]	; (8002978 <LimitSwitchStateDetect+0x3c>)
 800295c:	2101      	movs	r1, #1
 800295e:	54d1      	strb	r1, [r2, r3]
						  	  	  	  	  	 break;
 8002960:	e005      	b.n	800296e <LimitSwitchStateDetect+0x32>
						  	  	  case HIGH: LimitSwitchState[limit_switch_index -1] = LOW;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3b01      	subs	r3, #1
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <LimitSwitchStateDetect+0x3c>)
 8002968:	2100      	movs	r1, #0
 800296a:	54d1      	strb	r1, [r2, r3]
						  	  	  	  	  	 break;
 800296c:	bf00      	nop
								  }
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	20000290 	.word	0x20000290

0800297c <MotorRotateAbsolute>:
 * Called by					:
 *  Notes			 			: This function is being executed in the Systick handler for this project. However if you use this in another loop, please update MOTOR_LOOP_UPDATE_FREQUENCY configuration parameter
*/

static void MotorRotateAbsolute(uint8_t motor_index)
{	/*Declare Local variables*/
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
	float32_t delta_motor_angle = 0;
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]

	switch(MotorTagetAngleSet[motor_index -1])
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	3b01      	subs	r3, #1
 8002990:	4aaa      	ldr	r2, [pc, #680]	; (8002c3c <MotorRotateAbsolute+0x2c0>)
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <MotorRotateAbsolute+0x22>
 8002998:	2b01      	cmp	r3, #1
 800299a:	d07c      	beq.n	8002a96 <MotorRotateAbsolute+0x11a>
					}
				}

				break;

	default :  break;
 800299c:	e149      	b.n	8002c32 <MotorRotateAbsolute+0x2b6>
				MotorTargetStepCount[motor_index -1] = (uint32_t)(MotorTargetAngle[motor_index-1]/MOTOR_STEP_ANGLE);
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	4aa7      	ldr	r2, [pc, #668]	; (8002c40 <MotorRotateAbsolute+0x2c4>)
 80029a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a8:	49a6      	ldr	r1, [pc, #664]	; (8002c44 <MotorRotateAbsolute+0x2c8>)
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fa96 	bl	8000edc <__aeabi_fdiv>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	1e5c      	subs	r4, r3, #1
 80029b8:	4610      	mov	r0, r2
 80029ba:	f7fe fbc7 	bl	800114c <__aeabi_f2uiz>
 80029be:	4602      	mov	r2, r0
 80029c0:	4ba1      	ldr	r3, [pc, #644]	; (8002c48 <MotorRotateAbsolute+0x2cc>)
 80029c2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				delta_motor_angle = MotorTargetAngle[motor_index -1]  - MotorTargetAnglePrevious[motor_index -1];
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	4a9d      	ldr	r2, [pc, #628]	; (8002c40 <MotorRotateAbsolute+0x2c4>)
 80029cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	4a9d      	ldr	r2, [pc, #628]	; (8002c4c <MotorRotateAbsolute+0x2d0>)
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	4619      	mov	r1, r3
 80029dc:	f7fe f8c0 	bl	8000b60 <__aeabi_fsub>
 80029e0:	4603      	mov	r3, r0
 80029e2:	60fb      	str	r3, [r7, #12]
				test = delta_motor_angle;
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7fe fb8b 	bl	8001100 <__aeabi_f2iz>
 80029ea:	4603      	mov	r3, r0
 80029ec:	b25a      	sxtb	r2, r3
 80029ee:	4b98      	ldr	r3, [pc, #608]	; (8002c50 <MotorRotateAbsolute+0x2d4>)
 80029f0:	701a      	strb	r2, [r3, #0]
				if (delta_motor_angle > 0)
 80029f2:	f04f 0100 	mov.w	r1, #0
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f7fe fb78 	bl	80010ec <__aeabi_fcmpgt>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00f      	beq.n	8002a22 <MotorRotateAbsolute+0xa6>
				  MotorDirection[motor_index-1] = ANGLE_UP;
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	4a93      	ldr	r2, [pc, #588]	; (8002c54 <MotorRotateAbsolute+0x2d8>)
 8002a08:	2101      	movs	r1, #1
 8002a0a:	54d1      	strb	r1, [r2, r3]
				  MotorState[motor_index-1] = HIGH;
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	4a91      	ldr	r2, [pc, #580]	; (8002c58 <MotorRotateAbsolute+0x2dc>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	54d1      	strb	r1, [r2, r3]
				  MotorHighStateSetFlag[motor_index -1] = LOW;
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	4a90      	ldr	r2, [pc, #576]	; (8002c5c <MotorRotateAbsolute+0x2e0>)
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	54d1      	strb	r1, [r2, r3]
 8002a20:	e029      	b.n	8002a76 <MotorRotateAbsolute+0xfa>
				else if (delta_motor_angle < 0)
 8002a22:	f04f 0100 	mov.w	r1, #0
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7fe fb42 	bl	80010b0 <__aeabi_fcmplt>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00f      	beq.n	8002a52 <MotorRotateAbsolute+0xd6>
					MotorDirection[motor_index-1] = ANGLE_DOWN;
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	4a87      	ldr	r2, [pc, #540]	; (8002c54 <MotorRotateAbsolute+0x2d8>)
 8002a38:	21ff      	movs	r1, #255	; 0xff
 8002a3a:	54d1      	strb	r1, [r2, r3]
					MotorState[motor_index-1] = HIGH;
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	4a85      	ldr	r2, [pc, #532]	; (8002c58 <MotorRotateAbsolute+0x2dc>)
 8002a42:	2101      	movs	r1, #1
 8002a44:	54d1      	strb	r1, [r2, r3]
					MotorHighStateSetFlag[motor_index -1] = LOW;
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	4a84      	ldr	r2, [pc, #528]	; (8002c5c <MotorRotateAbsolute+0x2e0>)
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	54d1      	strb	r1, [r2, r3]
 8002a50:	e011      	b.n	8002a76 <MotorRotateAbsolute+0xfa>
				else if (delta_motor_angle == 0)
 8002a52:	f04f 0100 	mov.w	r1, #0
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7fe fb20 	bl	800109c <__aeabi_fcmpeq>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <MotorRotateAbsolute+0xfa>
					MotorDirection[motor_index-1] = ANGLE_HOLD;
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	4a7b      	ldr	r2, [pc, #492]	; (8002c54 <MotorRotateAbsolute+0x2d8>)
 8002a68:	2100      	movs	r1, #0
 8002a6a:	54d1      	strb	r1, [r2, r3]
					MotorState[motor_index-1] = LOW;
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	4a79      	ldr	r2, [pc, #484]	; (8002c58 <MotorRotateAbsolute+0x2dc>)
 8002a72:	2100      	movs	r1, #0
 8002a74:	54d1      	strb	r1, [r2, r3]
				MotorTargetAnglePrevious[motor_index -1] = MotorTargetAngle[motor_index -1];
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	1e5a      	subs	r2, r3, #1
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	4970      	ldr	r1, [pc, #448]	; (8002c40 <MotorRotateAbsolute+0x2c4>)
 8002a80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a84:	4971      	ldr	r1, [pc, #452]	; (8002c4c <MotorRotateAbsolute+0x2d0>)
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				MotorTagetAngleSet[motor_index -1] = TRUE;
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	4a6b      	ldr	r2, [pc, #428]	; (8002c3c <MotorRotateAbsolute+0x2c0>)
 8002a90:	2101      	movs	r1, #1
 8002a92:	54d1      	strb	r1, [r2, r3]
				break;
 8002a94:	e0cd      	b.n	8002c32 <MotorRotateAbsolute+0x2b6>
				if (MotorTargetAngle[motor_index -1] != MotorTargetAnglePrevious[motor_index -1]) /*Condition for target angle change*/
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	4a69      	ldr	r2, [pc, #420]	; (8002c40 <MotorRotateAbsolute+0x2c4>)
 8002a9c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	4a69      	ldr	r2, [pc, #420]	; (8002c4c <MotorRotateAbsolute+0x2d0>)
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7fe faf6 	bl	800109c <__aeabi_fcmpeq>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d105      	bne.n	8002ac2 <MotorRotateAbsolute+0x146>
				  MotorTagetAngleSet[motor_index -1] = FALSE;
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	4a60      	ldr	r2, [pc, #384]	; (8002c3c <MotorRotateAbsolute+0x2c0>)
 8002abc:	2100      	movs	r1, #0
 8002abe:	54d1      	strb	r1, [r2, r3]
				  break;
 8002ac0:	e0b7      	b.n	8002c32 <MotorRotateAbsolute+0x2b6>
					switch(MotorDirection[motor_index -1])
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	4a63      	ldr	r2, [pc, #396]	; (8002c54 <MotorRotateAbsolute+0x2d8>)
 8002ac8:	56d3      	ldrsb	r3, [r2, r3]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d044      	beq.n	8002b58 <MotorRotateAbsolute+0x1dc>
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d003      	beq.n	8002ada <MotorRotateAbsolute+0x15e>
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d01c      	beq.n	8002b12 <MotorRotateAbsolute+0x196>
						default		   : break;
 8002ad8:	e03f      	b.n	8002b5a <MotorRotateAbsolute+0x1de>
						case ANGLE_UP:	 MotorCurrentStepCount[motor_index -1] = MotorCurrentStepCount[motor_index -1] + (uint32_t)(MOTOR_PWM_TIMER_FREQUENCY/MOTOR_LOOP_UPDATE_FREQUENCY);
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	4a60      	ldr	r2, [pc, #384]	; (8002c60 <MotorRotateAbsolute+0x2e4>)
 8002ae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	3204      	adds	r2, #4
 8002aea:	495d      	ldr	r1, [pc, #372]	; (8002c60 <MotorRotateAbsolute+0x2e4>)
 8002aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
										 MotorCurrentAngle[motor_index -1] += (MOTOR_PWM_TIMER_FREQUENCY/MOTOR_LOOP_UPDATE_FREQUENCY)*MOTOR_STEP_ANGLE;
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	4a5b      	ldr	r2, [pc, #364]	; (8002c64 <MotorRotateAbsolute+0x2e8>)
 8002af6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	1e5c      	subs	r4, r3, #1
 8002afe:	495a      	ldr	r1, [pc, #360]	; (8002c68 <MotorRotateAbsolute+0x2ec>)
 8002b00:	4610      	mov	r0, r2
 8002b02:	f7fe f82f 	bl	8000b64 <__addsf3>
 8002b06:	4603      	mov	r3, r0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b56      	ldr	r3, [pc, #344]	; (8002c64 <MotorRotateAbsolute+0x2e8>)
 8002b0c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
										 break;
 8002b10:	e023      	b.n	8002b5a <MotorRotateAbsolute+0x1de>
						case ANGLE_DOWN: if(MotorCurrentStepCount[motor_index -1] <= 0) /*Temporary fix to the variable range overshoot bug - will be solved later*/
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	4a52      	ldr	r2, [pc, #328]	; (8002c60 <MotorRotateAbsolute+0x2e4>)
 8002b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <MotorRotateAbsolute+0x1ba>
											  MotorCurrentStepCount[motor_index -1] = MotorCurrentStepCount[motor_index -1] - (uint32_t)(MOTOR_PWM_TIMER_FREQUENCY/MOTOR_LOOP_UPDATE_FREQUENCY);
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	4a4e      	ldr	r2, [pc, #312]	; (8002c60 <MotorRotateAbsolute+0x2e4>)
 8002b26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	3a04      	subs	r2, #4
 8002b30:	494b      	ldr	r1, [pc, #300]	; (8002c60 <MotorRotateAbsolute+0x2e4>)
 8002b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
										 MotorCurrentAngle[motor_index -1] -= (MOTOR_PWM_TIMER_FREQUENCY/MOTOR_LOOP_UPDATE_FREQUENCY)*MOTOR_STEP_ANGLE;
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <MotorRotateAbsolute+0x2e8>)
 8002b3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	1e5c      	subs	r4, r3, #1
 8002b44:	4948      	ldr	r1, [pc, #288]	; (8002c68 <MotorRotateAbsolute+0x2ec>)
 8002b46:	4610      	mov	r0, r2
 8002b48:	f7fe f80a 	bl	8000b60 <__aeabi_fsub>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b44      	ldr	r3, [pc, #272]	; (8002c64 <MotorRotateAbsolute+0x2e8>)
 8002b52:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
										 break;
 8002b56:	e000      	b.n	8002b5a <MotorRotateAbsolute+0x1de>
						case ANGLE_HOLD: break;
 8002b58:	bf00      	nop
				if (MotorCurrentAngle[motor_index -1] >= MotorTargetAngle[motor_index -1])
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	4a41      	ldr	r2, [pc, #260]	; (8002c64 <MotorRotateAbsolute+0x2e8>)
 8002b60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	4a35      	ldr	r2, [pc, #212]	; (8002c40 <MotorRotateAbsolute+0x2c4>)
 8002b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f7fe fab2 	bl	80010d8 <__aeabi_fcmpge>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d024      	beq.n	8002bc4 <MotorRotateAbsolute+0x248>
					switch(MotorDirection[motor_index -1])
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	4a35      	ldr	r2, [pc, #212]	; (8002c54 <MotorRotateAbsolute+0x2d8>)
 8002b80:	56d3      	ldrsb	r3, [r2, r3]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b86:	d01c      	beq.n	8002bc2 <MotorRotateAbsolute+0x246>
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d000      	beq.n	8002b8e <MotorRotateAbsolute+0x212>
					 default : break;
 8002b8c:	e01a      	b.n	8002bc4 <MotorRotateAbsolute+0x248>
					 case ANGLE_UP:	MotorState[motor_index -1] = LOW;
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	4a31      	ldr	r2, [pc, #196]	; (8002c58 <MotorRotateAbsolute+0x2dc>)
 8002b94:	2100      	movs	r1, #0
 8002b96:	54d1      	strb	r1, [r2, r3]
									MotorTargetAnglePrevious[motor_index -1] = MotorTargetAngle[motor_index -1];
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	1e5a      	subs	r2, r3, #1
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	4927      	ldr	r1, [pc, #156]	; (8002c40 <MotorRotateAbsolute+0x2c4>)
 8002ba2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002ba6:	4929      	ldr	r1, [pc, #164]	; (8002c4c <MotorRotateAbsolute+0x2d0>)
 8002ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
									MotorDirection[motor_index -1] = ANGLE_HOLD;
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	4a28      	ldr	r2, [pc, #160]	; (8002c54 <MotorRotateAbsolute+0x2d8>)
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	54d1      	strb	r1, [r2, r3]
									MotorTagetAngleSet[motor_index -1] = FALSE;
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	4a20      	ldr	r2, [pc, #128]	; (8002c3c <MotorRotateAbsolute+0x2c0>)
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	54d1      	strb	r1, [r2, r3]
									break;
 8002bc0:	e000      	b.n	8002bc4 <MotorRotateAbsolute+0x248>
					 case ANGLE_DOWN: break;
 8002bc2:	bf00      	nop
				if (MotorCurrentAngle[motor_index -1] <= MotorTargetAngle[motor_index -1])
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	4a26      	ldr	r2, [pc, #152]	; (8002c64 <MotorRotateAbsolute+0x2e8>)
 8002bca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <MotorRotateAbsolute+0x2c4>)
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f7fe fa73 	bl	80010c4 <__aeabi_fcmple>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d100      	bne.n	8002be6 <MotorRotateAbsolute+0x26a>
				break;
 8002be4:	e024      	b.n	8002c30 <MotorRotateAbsolute+0x2b4>
					switch(MotorDirection[motor_index -1])
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <MotorRotateAbsolute+0x2d8>)
 8002bec:	56d3      	ldrsb	r3, [r2, r3]
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d002      	beq.n	8002bfa <MotorRotateAbsolute+0x27e>
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d01a      	beq.n	8002c2e <MotorRotateAbsolute+0x2b2>
					 default : break;
 8002bf8:	e01a      	b.n	8002c30 <MotorRotateAbsolute+0x2b4>
					 case ANGLE_DOWN: MotorState[motor_index -1] = LOW;
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <MotorRotateAbsolute+0x2dc>)
 8002c00:	2100      	movs	r1, #0
 8002c02:	54d1      	strb	r1, [r2, r3]
									  MotorTargetAnglePrevious[motor_index -1] = MotorTargetAngle[motor_index -1];
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	1e5a      	subs	r2, r3, #1
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	490c      	ldr	r1, [pc, #48]	; (8002c40 <MotorRotateAbsolute+0x2c4>)
 8002c0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002c12:	490e      	ldr	r1, [pc, #56]	; (8002c4c <MotorRotateAbsolute+0x2d0>)
 8002c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
									  MotorDirection[motor_index -1] = ANGLE_HOLD;
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <MotorRotateAbsolute+0x2d8>)
 8002c1e:	2100      	movs	r1, #0
 8002c20:	54d1      	strb	r1, [r2, r3]
									  MotorTagetAngleSet[motor_index -1] = FALSE;
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	4a05      	ldr	r2, [pc, #20]	; (8002c3c <MotorRotateAbsolute+0x2c0>)
 8002c28:	2100      	movs	r1, #0
 8002c2a:	54d1      	strb	r1, [r2, r3]
									  break;
 8002c2c:	e000      	b.n	8002c30 <MotorRotateAbsolute+0x2b4>
					 case ANGLE_UP:	break;
 8002c2e:	bf00      	nop
				break;
 8002c30:	bf00      	nop

	}

}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd90      	pop	{r4, r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000230 	.word	0x20000230
 8002c40:	20000200 	.word	0x20000200
 8002c44:	3e666666 	.word	0x3e666666
 8002c48:	20000250 	.word	0x20000250
 8002c4c:	20000218 	.word	0x20000218
 8002c50:	20000296 	.word	0x20000296
 8002c54:	20000280 	.word	0x20000280
 8002c58:	200000b0 	.word	0x200000b0
 8002c5c:	20000288 	.word	0x20000288
 8002c60:	20000268 	.word	0x20000268
 8002c64:	20000238 	.word	0x20000238
 8002c68:	3f666666 	.word	0x3f666666

08002c6c <MotorActuate>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-03-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void MotorActuate()
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
	for(uint8_t motor_index = 1 ; motor_index <=6 ; motor_index ++)
 8002c72:	2301      	movs	r3, #1
 8002c74:	71fb      	strb	r3, [r7, #7]
 8002c76:	e006      	b.n	8002c86 <MotorActuate+0x1a>
	{
		MotorRotateAbsolute(motor_index);
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fe7e 	bl	800297c <MotorRotateAbsolute>
	for(uint8_t motor_index = 1 ; motor_index <=6 ; motor_index ++)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	3301      	adds	r3, #1
 8002c84:	71fb      	strb	r3, [r7, #7]
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	2b06      	cmp	r3, #6
 8002c8a:	d9f5      	bls.n	8002c78 <MotorActuate+0xc>
	}
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <HAL_MspInit+0x5c>)
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <HAL_MspInit+0x5c>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6193      	str	r3, [r2, #24]
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_MspInit+0x5c>)
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_MspInit+0x5c>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <HAL_MspInit+0x5c>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	61d3      	str	r3, [r2, #28]
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_MspInit+0x5c>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_MspInit+0x60>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <HAL_MspInit+0x60>)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010000 	.word	0x40010000

08002cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <NMI_Handler+0x4>

08002cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d02:	e7fe      	b.n	8002d02 <HardFault_Handler+0x4>

08002d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <MemManage_Handler+0x4>

08002d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0e:	e7fe      	b.n	8002d0e <BusFault_Handler+0x4>

08002d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <UsageFault_Handler+0x4>

08002d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
	...

08002d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



	PoseSetpoint[0] = 0;  /*Yaw*/
 8002d42:	4bac      	ldr	r3, [pc, #688]	; (8002ff4 <SysTick_Handler+0x2b8>)
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
	PoseSetpoint[1] = 0;  /*Pitch*/
 8002d4a:	4baa      	ldr	r3, [pc, #680]	; (8002ff4 <SysTick_Handler+0x2b8>)
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	605a      	str	r2, [r3, #4]
	PoseSetpoint[2] = 0;  /*Roll*/
 8002d52:	4ba8      	ldr	r3, [pc, #672]	; (8002ff4 <SysTick_Handler+0x2b8>)
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
	PoseSetpoint[3] = 0;  /*delx*/
 8002d5a:	4ba6      	ldr	r3, [pc, #664]	; (8002ff4 <SysTick_Handler+0x2b8>)
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
	PoseSetpoint[4] = 0;  /*dely*/
 8002d62:	4ba4      	ldr	r3, [pc, #656]	; (8002ff4 <SysTick_Handler+0x2b8>)
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]
	PoseSetpoint[5] = 10; /*delz*/
 8002d6a:	4ba2      	ldr	r3, [pc, #648]	; (8002ff4 <SysTick_Handler+0x2b8>)
 8002d6c:	4aa2      	ldr	r2, [pc, #648]	; (8002ff8 <SysTick_Handler+0x2bc>)
 8002d6e:	615a      	str	r2, [r3, #20]

	SolveKinematics();
 8002d70:	f7ff f906 	bl	8001f80 <SolveKinematics>
//	MotorTargetAngle[1] = 30;
//	MotorTargetAngle[2] = -30;
//	MotorTargetAngle[3] = 30;
//	MotorTargetAngle[4] = -30;
//	MotorTargetAngle[5] = 30;
	MotorActuate();
 8002d74:	f7ff ff7a 	bl	8002c6c <MotorActuate>

	/*Hardware level control of motor direction pins and motor timers*/

	for(uint8_t motor_index = 1 ; motor_index <=6 ; motor_index ++ )
 8002d78:	2301      	movs	r3, #1
 8002d7a:	71fb      	strb	r3, [r7, #7]
 8002d7c:	e19b      	b.n	80030b6 <SysTick_Handler+0x37a>
	{
		switch(motor_index)
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	f200 8194 	bhi.w	80030b0 <SysTick_Handler+0x374>
 8002d88:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <SysTick_Handler+0x54>)
 8002d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8e:	bf00      	nop
 8002d90:	08002da9 	.word	0x08002da9
 8002d94:	08002e25 	.word	0x08002e25
 8002d98:	08002ea1 	.word	0x08002ea1
 8002d9c:	08002f19 	.word	0x08002f19
 8002da0:	08002f95 	.word	0x08002f95
 8002da4:	08003035 	.word	0x08003035
		{
			case 1: switch(MotorState[motor_index -1])
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	4a93      	ldr	r2, [pc, #588]	; (8002ffc <SysTick_Handler+0x2c0>)
 8002dae:	5cd3      	ldrb	r3, [r2, r3]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d032      	beq.n	8002e1a <SysTick_Handler+0xde>
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d000      	beq.n	8002dba <SysTick_Handler+0x7e>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
								   break;

						default:  break;
 8002db8:	e034      	b.n	8002e24 <SysTick_Handler+0xe8>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	4a90      	ldr	r2, [pc, #576]	; (8003000 <SysTick_Handler+0x2c4>)
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <SysTick_Handler+0x90>
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d00a      	beq.n	8002de0 <SysTick_Handler+0xa4>
									   default: break ;
 8002dca:	e00a      	b.n	8002de2 <SysTick_Handler+0xa6>
									   case LOW: HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002dcc:	210c      	movs	r1, #12
 8002dce:	488d      	ldr	r0, [pc, #564]	; (8003004 <SysTick_Handler+0x2c8>)
 8002dd0:	f003 f95c 	bl	800608c <HAL_TIM_PWM_Start>
									   	   	   	 MotorHighStateSetFlag[motor_index -1] = HIGH;
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	4a89      	ldr	r2, [pc, #548]	; (8003000 <SysTick_Handler+0x2c4>)
 8002dda:	2101      	movs	r1, #1
 8002ddc:	54d1      	strb	r1, [r2, r3]
									   			 break;
 8002dde:	e000      	b.n	8002de2 <SysTick_Handler+0xa6>
									   case HIGH: break;
 8002de0:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	4a88      	ldr	r2, [pc, #544]	; (8003008 <SysTick_Handler+0x2cc>)
 8002de8:	56d3      	ldrsb	r3, [r2, r3]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d013      	beq.n	8002e16 <SysTick_Handler+0xda>
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d003      	beq.n	8002dfa <SysTick_Handler+0xbe>
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df6:	d007      	beq.n	8002e08 <SysTick_Handler+0xcc>
										default : break;
 8002df8:	e00e      	b.n	8002e18 <SysTick_Handler+0xdc>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e00:	4882      	ldr	r0, [pc, #520]	; (800300c <SysTick_Handler+0x2d0>)
 8002e02:	f001 f91f 	bl	8004044 <HAL_GPIO_WritePin>
													    break;
 8002e06:	e007      	b.n	8002e18 <SysTick_Handler+0xdc>
										case ANGLE_DOWN:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e0e:	487f      	ldr	r0, [pc, #508]	; (800300c <SysTick_Handler+0x2d0>)
 8002e10:	f001 f918 	bl	8004044 <HAL_GPIO_WritePin>
														break;
 8002e14:	e000      	b.n	8002e18 <SysTick_Handler+0xdc>
										case ANGLE_HOLD:break;
 8002e16:	bf00      	nop
									break;
 8002e18:	e004      	b.n	8002e24 <SysTick_Handler+0xe8>
						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002e1a:	210c      	movs	r1, #12
 8002e1c:	4879      	ldr	r0, [pc, #484]	; (8003004 <SysTick_Handler+0x2c8>)
 8002e1e:	f003 f9d7 	bl	80061d0 <HAL_TIM_PWM_Stop>
								   break;
 8002e22:	bf00      	nop
					}

			case 2: switch(MotorState[motor_index -1])
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	4a74      	ldr	r2, [pc, #464]	; (8002ffc <SysTick_Handler+0x2c0>)
 8002e2a:	5cd3      	ldrb	r3, [r2, r3]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d032      	beq.n	8002e96 <SysTick_Handler+0x15a>
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d000      	beq.n	8002e36 <SysTick_Handler+0xfa>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
								   break;

						default: break;
 8002e34:	e034      	b.n	8002ea0 <SysTick_Handler+0x164>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	4a71      	ldr	r2, [pc, #452]	; (8003000 <SysTick_Handler+0x2c4>)
 8002e3c:	5cd3      	ldrb	r3, [r2, r3]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <SysTick_Handler+0x10c>
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d00a      	beq.n	8002e5c <SysTick_Handler+0x120>
									   default: break ;
 8002e46:	e00a      	b.n	8002e5e <SysTick_Handler+0x122>
									   case LOW: HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002e48:	2108      	movs	r1, #8
 8002e4a:	486e      	ldr	r0, [pc, #440]	; (8003004 <SysTick_Handler+0x2c8>)
 8002e4c:	f003 f91e 	bl	800608c <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	4a6a      	ldr	r2, [pc, #424]	; (8003000 <SysTick_Handler+0x2c4>)
 8002e56:	2101      	movs	r1, #1
 8002e58:	54d1      	strb	r1, [r2, r3]
									   			 break;
 8002e5a:	e000      	b.n	8002e5e <SysTick_Handler+0x122>
									   case HIGH: break;
 8002e5c:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	4a69      	ldr	r2, [pc, #420]	; (8003008 <SysTick_Handler+0x2cc>)
 8002e64:	56d3      	ldrsb	r3, [r2, r3]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d013      	beq.n	8002e92 <SysTick_Handler+0x156>
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d003      	beq.n	8002e76 <SysTick_Handler+0x13a>
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d007      	beq.n	8002e84 <SysTick_Handler+0x148>
										default : break;
 8002e74:	e00e      	b.n	8002e94 <SysTick_Handler+0x158>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002e76:	2200      	movs	r2, #0
 8002e78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e7c:	4863      	ldr	r0, [pc, #396]	; (800300c <SysTick_Handler+0x2d0>)
 8002e7e:	f001 f8e1 	bl	8004044 <HAL_GPIO_WritePin>
														break;
 8002e82:	e007      	b.n	8002e94 <SysTick_Handler+0x158>
										case ANGLE_DOWN: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002e84:	2201      	movs	r2, #1
 8002e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e8a:	4860      	ldr	r0, [pc, #384]	; (800300c <SysTick_Handler+0x2d0>)
 8002e8c:	f001 f8da 	bl	8004044 <HAL_GPIO_WritePin>
														break;
 8002e90:	e000      	b.n	8002e94 <SysTick_Handler+0x158>
										case ANGLE_HOLD:break;
 8002e92:	bf00      	nop
									break;
 8002e94:	e004      	b.n	8002ea0 <SysTick_Handler+0x164>
						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002e96:	2108      	movs	r1, #8
 8002e98:	485a      	ldr	r0, [pc, #360]	; (8003004 <SysTick_Handler+0x2c8>)
 8002e9a:	f003 f999 	bl	80061d0 <HAL_TIM_PWM_Stop>
								   break;
 8002e9e:	bf00      	nop
					}

			case 3: switch(MotorState[motor_index -1])
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	4a55      	ldr	r2, [pc, #340]	; (8002ffc <SysTick_Handler+0x2c0>)
 8002ea6:	5cd3      	ldrb	r3, [r2, r3]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d030      	beq.n	8002f0e <SysTick_Handler+0x1d2>
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d000      	beq.n	8002eb2 <SysTick_Handler+0x176>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
								   break;

						default: break;
 8002eb0:	e032      	b.n	8002f18 <SysTick_Handler+0x1dc>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	4a52      	ldr	r2, [pc, #328]	; (8003000 <SysTick_Handler+0x2c4>)
 8002eb8:	5cd3      	ldrb	r3, [r2, r3]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <SysTick_Handler+0x188>
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d00a      	beq.n	8002ed8 <SysTick_Handler+0x19c>
									   default: break ;
 8002ec2:	e00a      	b.n	8002eda <SysTick_Handler+0x19e>
									   case LOW: HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	484f      	ldr	r0, [pc, #316]	; (8003004 <SysTick_Handler+0x2c8>)
 8002ec8:	f003 f8e0 	bl	800608c <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	4a4b      	ldr	r2, [pc, #300]	; (8003000 <SysTick_Handler+0x2c4>)
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	54d1      	strb	r1, [r2, r3]
									   			 break;
 8002ed6:	e000      	b.n	8002eda <SysTick_Handler+0x19e>
									   case HIGH: break;
 8002ed8:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	4a4a      	ldr	r2, [pc, #296]	; (8003008 <SysTick_Handler+0x2cc>)
 8002ee0:	56d3      	ldrsb	r3, [r2, r3]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d011      	beq.n	8002f0a <SysTick_Handler+0x1ce>
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d003      	beq.n	8002ef2 <SysTick_Handler+0x1b6>
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eee:	d006      	beq.n	8002efe <SysTick_Handler+0x1c2>
										default : break;
 8002ef0:	e00c      	b.n	8002f0c <SysTick_Handler+0x1d0>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	2120      	movs	r1, #32
 8002ef6:	4846      	ldr	r0, [pc, #280]	; (8003010 <SysTick_Handler+0x2d4>)
 8002ef8:	f001 f8a4 	bl	8004044 <HAL_GPIO_WritePin>
														break;
 8002efc:	e006      	b.n	8002f0c <SysTick_Handler+0x1d0>
										case ANGLE_DOWN:HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2120      	movs	r1, #32
 8002f02:	4843      	ldr	r0, [pc, #268]	; (8003010 <SysTick_Handler+0x2d4>)
 8002f04:	f001 f89e 	bl	8004044 <HAL_GPIO_WritePin>
														break;
 8002f08:	e000      	b.n	8002f0c <SysTick_Handler+0x1d0>
										case ANGLE_HOLD:break;
 8002f0a:	bf00      	nop
									break;
 8002f0c:	e004      	b.n	8002f18 <SysTick_Handler+0x1dc>
						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002f0e:	2100      	movs	r1, #0
 8002f10:	483c      	ldr	r0, [pc, #240]	; (8003004 <SysTick_Handler+0x2c8>)
 8002f12:	f003 f95d 	bl	80061d0 <HAL_TIM_PWM_Stop>
								   break;
 8002f16:	bf00      	nop
					}

			case 4: switch(MotorState[motor_index -1])
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	4a37      	ldr	r2, [pc, #220]	; (8002ffc <SysTick_Handler+0x2c0>)
 8002f1e:	5cd3      	ldrb	r3, [r2, r3]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d032      	beq.n	8002f8a <SysTick_Handler+0x24e>
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d000      	beq.n	8002f2a <SysTick_Handler+0x1ee>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
								   break;

						default: break;
 8002f28:	e034      	b.n	8002f94 <SysTick_Handler+0x258>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	4a34      	ldr	r2, [pc, #208]	; (8003000 <SysTick_Handler+0x2c4>)
 8002f30:	5cd3      	ldrb	r3, [r2, r3]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <SysTick_Handler+0x200>
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d00a      	beq.n	8002f50 <SysTick_Handler+0x214>
									   default: break ;
 8002f3a:	e00a      	b.n	8002f52 <SysTick_Handler+0x216>
									   case LOW: HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002f3c:	2108      	movs	r1, #8
 8002f3e:	4835      	ldr	r0, [pc, #212]	; (8003014 <SysTick_Handler+0x2d8>)
 8002f40:	f003 f8a4 	bl	800608c <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	4a2d      	ldr	r2, [pc, #180]	; (8003000 <SysTick_Handler+0x2c4>)
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	54d1      	strb	r1, [r2, r3]
									   			 break;
 8002f4e:	e000      	b.n	8002f52 <SysTick_Handler+0x216>
									   case HIGH: break;
 8002f50:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	4a2c      	ldr	r2, [pc, #176]	; (8003008 <SysTick_Handler+0x2cc>)
 8002f58:	56d3      	ldrsb	r3, [r2, r3]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d013      	beq.n	8002f86 <SysTick_Handler+0x24a>
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d003      	beq.n	8002f6a <SysTick_Handler+0x22e>
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d007      	beq.n	8002f78 <SysTick_Handler+0x23c>
										default : break;
 8002f68:	e00e      	b.n	8002f88 <SysTick_Handler+0x24c>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f70:	4827      	ldr	r0, [pc, #156]	; (8003010 <SysTick_Handler+0x2d4>)
 8002f72:	f001 f867 	bl	8004044 <HAL_GPIO_WritePin>
														break;
 8002f76:	e007      	b.n	8002f88 <SysTick_Handler+0x24c>
										case ANGLE_DOWN: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f7e:	4824      	ldr	r0, [pc, #144]	; (8003010 <SysTick_Handler+0x2d4>)
 8002f80:	f001 f860 	bl	8004044 <HAL_GPIO_WritePin>
														break;
 8002f84:	e000      	b.n	8002f88 <SysTick_Handler+0x24c>
										case ANGLE_HOLD:break;
 8002f86:	bf00      	nop
									break;
 8002f88:	e004      	b.n	8002f94 <SysTick_Handler+0x258>
						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002f8a:	2108      	movs	r1, #8
 8002f8c:	4821      	ldr	r0, [pc, #132]	; (8003014 <SysTick_Handler+0x2d8>)
 8002f8e:	f003 f91f 	bl	80061d0 <HAL_TIM_PWM_Stop>
								   break;
 8002f92:	bf00      	nop
					}

			case 5: switch(MotorState[motor_index -1])
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <SysTick_Handler+0x2c0>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d044      	beq.n	800302a <SysTick_Handler+0x2ee>
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d000      	beq.n	8002fa6 <SysTick_Handler+0x26a>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
								   break;

						default: break;
 8002fa4:	e046      	b.n	8003034 <SysTick_Handler+0x2f8>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	4a15      	ldr	r2, [pc, #84]	; (8003000 <SysTick_Handler+0x2c4>)
 8002fac:	5cd3      	ldrb	r3, [r2, r3]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <SysTick_Handler+0x27c>
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d00a      	beq.n	8002fcc <SysTick_Handler+0x290>
									   default: break ;
 8002fb6:	e00a      	b.n	8002fce <SysTick_Handler+0x292>
									   case LOW: HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002fb8:	2104      	movs	r1, #4
 8002fba:	4816      	ldr	r0, [pc, #88]	; (8003014 <SysTick_Handler+0x2d8>)
 8002fbc:	f003 f866 	bl	800608c <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <SysTick_Handler+0x2c4>)
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	54d1      	strb	r1, [r2, r3]
									   			 break;
 8002fca:	e000      	b.n	8002fce <SysTick_Handler+0x292>
									   case HIGH: break;
 8002fcc:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	4a0d      	ldr	r2, [pc, #52]	; (8003008 <SysTick_Handler+0x2cc>)
 8002fd4:	56d3      	ldrsb	r3, [r2, r3]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d025      	beq.n	8003026 <SysTick_Handler+0x2ea>
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d003      	beq.n	8002fe6 <SysTick_Handler+0x2aa>
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d019      	beq.n	8003018 <SysTick_Handler+0x2dc>
										default : break;
 8002fe4:	e020      	b.n	8003028 <SysTick_Handler+0x2ec>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fec:	4807      	ldr	r0, [pc, #28]	; (800300c <SysTick_Handler+0x2d0>)
 8002fee:	f001 f829 	bl	8004044 <HAL_GPIO_WritePin>
														break;
 8002ff2:	e019      	b.n	8003028 <SysTick_Handler+0x2ec>
 8002ff4:	20000148 	.word	0x20000148
 8002ff8:	41200000 	.word	0x41200000
 8002ffc:	200000b0 	.word	0x200000b0
 8003000:	20000288 	.word	0x20000288
 8003004:	20000320 	.word	0x20000320
 8003008:	20000280 	.word	0x20000280
 800300c:	40010c00 	.word	0x40010c00
 8003010:	40010800 	.word	0x40010800
 8003014:	20000368 	.word	0x20000368
										case ANGLE_DOWN: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8003018:	2201      	movs	r2, #1
 800301a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800301e:	482b      	ldr	r0, [pc, #172]	; (80030cc <SysTick_Handler+0x390>)
 8003020:	f001 f810 	bl	8004044 <HAL_GPIO_WritePin>
														 break;
 8003024:	e000      	b.n	8003028 <SysTick_Handler+0x2ec>
										case ANGLE_HOLD:break;
 8003026:	bf00      	nop
									break;
 8003028:	e004      	b.n	8003034 <SysTick_Handler+0x2f8>
						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800302a:	2104      	movs	r1, #4
 800302c:	4828      	ldr	r0, [pc, #160]	; (80030d0 <SysTick_Handler+0x394>)
 800302e:	f003 f8cf 	bl	80061d0 <HAL_TIM_PWM_Stop>
								   break;
 8003032:	bf00      	nop
					}

			case 6: switch(MotorState[motor_index -1])
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	3b01      	subs	r3, #1
 8003038:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <SysTick_Handler+0x398>)
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d032      	beq.n	80030a6 <SysTick_Handler+0x36a>
 8003040:	2b01      	cmp	r3, #1
 8003042:	d000      	beq.n	8003046 <SysTick_Handler+0x30a>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
								   break;

						default: break;
 8003044:	e034      	b.n	80030b0 <SysTick_Handler+0x374>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	3b01      	subs	r3, #1
 800304a:	4a23      	ldr	r2, [pc, #140]	; (80030d8 <SysTick_Handler+0x39c>)
 800304c:	5cd3      	ldrb	r3, [r2, r3]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <SysTick_Handler+0x31c>
 8003052:	2b01      	cmp	r3, #1
 8003054:	d00a      	beq.n	800306c <SysTick_Handler+0x330>
									   default: break ;
 8003056:	e00a      	b.n	800306e <SysTick_Handler+0x332>
									   case LOW: HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003058:	2100      	movs	r1, #0
 800305a:	481d      	ldr	r0, [pc, #116]	; (80030d0 <SysTick_Handler+0x394>)
 800305c:	f003 f816 	bl	800608c <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	3b01      	subs	r3, #1
 8003064:	4a1c      	ldr	r2, [pc, #112]	; (80030d8 <SysTick_Handler+0x39c>)
 8003066:	2101      	movs	r1, #1
 8003068:	54d1      	strb	r1, [r2, r3]
									   			 break;
 800306a:	e000      	b.n	800306e <SysTick_Handler+0x332>
									   case HIGH: break;
 800306c:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	3b01      	subs	r3, #1
 8003072:	4a1a      	ldr	r2, [pc, #104]	; (80030dc <SysTick_Handler+0x3a0>)
 8003074:	56d3      	ldrsb	r3, [r2, r3]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d013      	beq.n	80030a2 <SysTick_Handler+0x366>
 800307a:	2b01      	cmp	r3, #1
 800307c:	d003      	beq.n	8003086 <SysTick_Handler+0x34a>
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d007      	beq.n	8003094 <SysTick_Handler+0x358>
										default : break;
 8003084:	e00e      	b.n	80030a4 <SysTick_Handler+0x368>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8003086:	2200      	movs	r2, #0
 8003088:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800308c:	480f      	ldr	r0, [pc, #60]	; (80030cc <SysTick_Handler+0x390>)
 800308e:	f000 ffd9 	bl	8004044 <HAL_GPIO_WritePin>
														break;
 8003092:	e007      	b.n	80030a4 <SysTick_Handler+0x368>
										case ANGLE_DOWN: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8003094:	2201      	movs	r2, #1
 8003096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800309a:	480c      	ldr	r0, [pc, #48]	; (80030cc <SysTick_Handler+0x390>)
 800309c:	f000 ffd2 	bl	8004044 <HAL_GPIO_WritePin>
														break;
 80030a0:	e000      	b.n	80030a4 <SysTick_Handler+0x368>
										case ANGLE_HOLD:break;
 80030a2:	bf00      	nop
									break;
 80030a4:	e004      	b.n	80030b0 <SysTick_Handler+0x374>
						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80030a6:	2100      	movs	r1, #0
 80030a8:	4809      	ldr	r0, [pc, #36]	; (80030d0 <SysTick_Handler+0x394>)
 80030aa:	f003 f891 	bl	80061d0 <HAL_TIM_PWM_Stop>
								   break;
 80030ae:	bf00      	nop
	for(uint8_t motor_index = 1 ; motor_index <=6 ; motor_index ++ )
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	3301      	adds	r3, #1
 80030b4:	71fb      	strb	r3, [r7, #7]
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	2b06      	cmp	r3, #6
 80030ba:	f67f ae60 	bls.w	8002d7e <SysTick_Handler+0x42>
//	}



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030be:	f000 fb11 	bl	80036e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40010c00 	.word	0x40010c00
 80030d0:	20000368 	.word	0x20000368
 80030d4:	200000b0 	.word	0x200000b0
 80030d8:	20000288 	.word	0x20000288
 80030dc:	20000280 	.word	0x20000280

080030e0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80030e4:	2002      	movs	r0, #2
 80030e6:	f000 ffc5 	bl	8004074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}

080030ee <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80030f2:	2004      	movs	r0, #4
 80030f4:	f000 ffbe 	bl	8004074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}

080030fc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003100:	2010      	movs	r0, #16
 8003102:	f000 ffb7 	bl	8004074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}

0800310a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800310e:	2080      	movs	r0, #128	; 0x80
 8003110:	f000 ffb0 	bl	8004074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003114:	bf00      	nop
 8003116:	bd80      	pop	{r7, pc}

08003118 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800311c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003120:	f000 ffa8 	bl	8004074 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003124:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003128:	f000 ffa4 	bl	8004074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}

08003130 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b096      	sub	sp, #88	; 0x58
 8003140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003142:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003150:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800315a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	609a      	str	r2, [r3, #8]
 8003166:	60da      	str	r2, [r3, #12]
 8003168:	611a      	str	r2, [r3, #16]
 800316a:	615a      	str	r2, [r3, #20]
 800316c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	2220      	movs	r2, #32
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f003 ff39 	bl	8006fec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800317a:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <MX_TIM1_Init+0x168>)
 800317c:	4a4a      	ldr	r2, [pc, #296]	; (80032a8 <MX_TIM1_Init+0x16c>)
 800317e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8003180:	4b48      	ldr	r3, [pc, #288]	; (80032a4 <MX_TIM1_Init+0x168>)
 8003182:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003186:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003188:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <MX_TIM1_Init+0x168>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25-1;
 800318e:	4b45      	ldr	r3, [pc, #276]	; (80032a4 <MX_TIM1_Init+0x168>)
 8003190:	2218      	movs	r2, #24
 8003192:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003194:	4b43      	ldr	r3, [pc, #268]	; (80032a4 <MX_TIM1_Init+0x168>)
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800319a:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <MX_TIM1_Init+0x168>)
 800319c:	2200      	movs	r2, #0
 800319e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a0:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <MX_TIM1_Init+0x168>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031a6:	483f      	ldr	r0, [pc, #252]	; (80032a4 <MX_TIM1_Init+0x168>)
 80031a8:	f002 fec8 	bl	8005f3c <HAL_TIM_Base_Init>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80031b2:	f7fe fffc 	bl	80021ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031c0:	4619      	mov	r1, r3
 80031c2:	4838      	ldr	r0, [pc, #224]	; (80032a4 <MX_TIM1_Init+0x168>)
 80031c4:	f003 f926 	bl	8006414 <HAL_TIM_ConfigClockSource>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80031ce:	f7fe ffee 	bl	80021ae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80031d2:	4834      	ldr	r0, [pc, #208]	; (80032a4 <MX_TIM1_Init+0x168>)
 80031d4:	f002 ff01 	bl	8005fda <HAL_TIM_PWM_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80031de:	f7fe ffe6 	bl	80021ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031ee:	4619      	mov	r1, r3
 80031f0:	482c      	ldr	r0, [pc, #176]	; (80032a4 <MX_TIM1_Init+0x168>)
 80031f2:	f003 fc6b 	bl	8006acc <HAL_TIMEx_MasterConfigSynchronization>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80031fc:	f7fe ffd7 	bl	80021ae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003200:	2360      	movs	r3, #96	; 0x60
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 18;
 8003204:	2312      	movs	r3, #18
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003208:	2300      	movs	r3, #0
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800320c:	2300      	movs	r3, #0
 800320e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003214:	2300      	movs	r3, #0
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003218:	2300      	movs	r3, #0
 800321a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800321c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003220:	2200      	movs	r2, #0
 8003222:	4619      	mov	r1, r3
 8003224:	481f      	ldr	r0, [pc, #124]	; (80032a4 <MX_TIM1_Init+0x168>)
 8003226:	f003 f837 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003230:	f7fe ffbd 	bl	80021ae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003238:	2204      	movs	r2, #4
 800323a:	4619      	mov	r1, r3
 800323c:	4819      	ldr	r0, [pc, #100]	; (80032a4 <MX_TIM1_Init+0x168>)
 800323e:	f003 f82b 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003248:	f7fe ffb1 	bl	80021ae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800324c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003250:	2208      	movs	r2, #8
 8003252:	4619      	mov	r1, r3
 8003254:	4813      	ldr	r0, [pc, #76]	; (80032a4 <MX_TIM1_Init+0x168>)
 8003256:	f003 f81f 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003260:	f7fe ffa5 	bl	80021ae <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800327c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	4619      	mov	r1, r3
 8003286:	4807      	ldr	r0, [pc, #28]	; (80032a4 <MX_TIM1_Init+0x168>)
 8003288:	f003 fc7e 	bl	8006b88 <HAL_TIMEx_ConfigBreakDeadTime>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8003292:	f7fe ff8c 	bl	80021ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003296:	4803      	ldr	r0, [pc, #12]	; (80032a4 <MX_TIM1_Init+0x168>)
 8003298:	f000 f8c6 	bl	8003428 <HAL_TIM_MspPostInit>

}
 800329c:	bf00      	nop
 800329e:	3758      	adds	r7, #88	; 0x58
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000368 	.word	0x20000368
 80032a8:	40012c00 	.word	0x40012c00

080032ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08e      	sub	sp, #56	; 0x38
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	609a      	str	r2, [r3, #8]
 80032be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c0:	f107 0320 	add.w	r3, r7, #32
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
 80032d8:	615a      	str	r2, [r3, #20]
 80032da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032dc:	4b37      	ldr	r3, [pc, #220]	; (80033bc <MX_TIM3_Init+0x110>)
 80032de:	4a38      	ldr	r2, [pc, #224]	; (80033c0 <MX_TIM3_Init+0x114>)
 80032e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 80032e2:	4b36      	ldr	r3, [pc, #216]	; (80033bc <MX_TIM3_Init+0x110>)
 80032e4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80032e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ea:	4b34      	ldr	r3, [pc, #208]	; (80033bc <MX_TIM3_Init+0x110>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25-1;
 80032f0:	4b32      	ldr	r3, [pc, #200]	; (80033bc <MX_TIM3_Init+0x110>)
 80032f2:	2218      	movs	r2, #24
 80032f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f6:	4b31      	ldr	r3, [pc, #196]	; (80033bc <MX_TIM3_Init+0x110>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032fc:	4b2f      	ldr	r3, [pc, #188]	; (80033bc <MX_TIM3_Init+0x110>)
 80032fe:	2200      	movs	r2, #0
 8003300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003302:	482e      	ldr	r0, [pc, #184]	; (80033bc <MX_TIM3_Init+0x110>)
 8003304:	f002 fe1a 	bl	8005f3c <HAL_TIM_Base_Init>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800330e:	f7fe ff4e 	bl	80021ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800331c:	4619      	mov	r1, r3
 800331e:	4827      	ldr	r0, [pc, #156]	; (80033bc <MX_TIM3_Init+0x110>)
 8003320:	f003 f878 	bl	8006414 <HAL_TIM_ConfigClockSource>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800332a:	f7fe ff40 	bl	80021ae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800332e:	4823      	ldr	r0, [pc, #140]	; (80033bc <MX_TIM3_Init+0x110>)
 8003330:	f002 fe53 	bl	8005fda <HAL_TIM_PWM_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800333a:	f7fe ff38 	bl	80021ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003346:	f107 0320 	add.w	r3, r7, #32
 800334a:	4619      	mov	r1, r3
 800334c:	481b      	ldr	r0, [pc, #108]	; (80033bc <MX_TIM3_Init+0x110>)
 800334e:	f003 fbbd 	bl	8006acc <HAL_TIMEx_MasterConfigSynchronization>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003358:	f7fe ff29 	bl	80021ae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800335c:	2360      	movs	r3, #96	; 0x60
 800335e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18;
 8003360:	2312      	movs	r3, #18
 8003362:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	2200      	movs	r2, #0
 8003370:	4619      	mov	r1, r3
 8003372:	4812      	ldr	r0, [pc, #72]	; (80033bc <MX_TIM3_Init+0x110>)
 8003374:	f002 ff90 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800337e:	f7fe ff16 	bl	80021ae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	2208      	movs	r2, #8
 8003386:	4619      	mov	r1, r3
 8003388:	480c      	ldr	r0, [pc, #48]	; (80033bc <MX_TIM3_Init+0x110>)
 800338a:	f002 ff85 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003394:	f7fe ff0b 	bl	80021ae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	220c      	movs	r2, #12
 800339c:	4619      	mov	r1, r3
 800339e:	4807      	ldr	r0, [pc, #28]	; (80033bc <MX_TIM3_Init+0x110>)
 80033a0:	f002 ff7a 	bl	8006298 <HAL_TIM_PWM_ConfigChannel>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80033aa:	f7fe ff00 	bl	80021ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80033ae:	4803      	ldr	r0, [pc, #12]	; (80033bc <MX_TIM3_Init+0x110>)
 80033b0:	f000 f83a 	bl	8003428 <HAL_TIM_MspPostInit>

}
 80033b4:	bf00      	nop
 80033b6:	3738      	adds	r7, #56	; 0x38
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000320 	.word	0x20000320
 80033c0:	40000400 	.word	0x40000400

080033c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a12      	ldr	r2, [pc, #72]	; (800341c <HAL_TIM_Base_MspInit+0x58>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10c      	bne.n	80033f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_TIM_Base_MspInit+0x5c>)
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	4a11      	ldr	r2, [pc, #68]	; (8003420 <HAL_TIM_Base_MspInit+0x5c>)
 80033dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033e0:	6193      	str	r3, [r2, #24]
 80033e2:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <HAL_TIM_Base_MspInit+0x5c>)
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80033ee:	e010      	b.n	8003412 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <HAL_TIM_Base_MspInit+0x60>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10b      	bne.n	8003412 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_TIM_Base_MspInit+0x5c>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	4a08      	ldr	r2, [pc, #32]	; (8003420 <HAL_TIM_Base_MspInit+0x5c>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	61d3      	str	r3, [r2, #28]
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_TIM_Base_MspInit+0x5c>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	40012c00 	.word	0x40012c00
 8003420:	40021000 	.word	0x40021000
 8003424:	40000400 	.word	0x40000400

08003428 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	; 0x28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003430:	f107 0318 	add.w	r3, r7, #24
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2b      	ldr	r2, [pc, #172]	; (80034f0 <HAL_TIM_MspPostInit+0xc8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d119      	bne.n	800347c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003448:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_TIM_MspPostInit+0xcc>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	4a29      	ldr	r2, [pc, #164]	; (80034f4 <HAL_TIM_MspPostInit+0xcc>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	6193      	str	r3, [r2, #24]
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <HAL_TIM_MspPostInit+0xcc>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_6_STEP_Pin|MOTOR_5_STEP_Pin|MOTOR_4_STEP_Pin;
 8003460:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	2302      	movs	r3, #2
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	f107 0318 	add.w	r3, r7, #24
 8003472:	4619      	mov	r1, r3
 8003474:	4820      	ldr	r0, [pc, #128]	; (80034f8 <HAL_TIM_MspPostInit+0xd0>)
 8003476:	f000 fc8b 	bl	8003d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800347a:	e034      	b.n	80034e6 <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM3)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1e      	ldr	r2, [pc, #120]	; (80034fc <HAL_TIM_MspPostInit+0xd4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d12f      	bne.n	80034e6 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_TIM_MspPostInit+0xcc>)
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <HAL_TIM_MspPostInit+0xcc>)
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	6193      	str	r3, [r2, #24]
 8003492:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <HAL_TIM_MspPostInit+0xcc>)
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_TIM_MspPostInit+0xcc>)
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <HAL_TIM_MspPostInit+0xcc>)
 80034a4:	f043 0308 	orr.w	r3, r3, #8
 80034a8:	6193      	str	r3, [r2, #24]
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_TIM_MspPostInit+0xcc>)
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_3_STEP_Pin;
 80034b6:	2340      	movs	r3, #64	; 0x40
 80034b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ba:	2302      	movs	r3, #2
 80034bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034be:	2302      	movs	r3, #2
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_3_STEP_GPIO_Port, &GPIO_InitStruct);
 80034c2:	f107 0318 	add.w	r3, r7, #24
 80034c6:	4619      	mov	r1, r3
 80034c8:	480b      	ldr	r0, [pc, #44]	; (80034f8 <HAL_TIM_MspPostInit+0xd0>)
 80034ca:	f000 fc61 	bl	8003d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_2_STEP_Pin|MOTOR_1_STEP_Pin;
 80034ce:	2303      	movs	r3, #3
 80034d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d6:	2302      	movs	r3, #2
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034da:	f107 0318 	add.w	r3, r7, #24
 80034de:	4619      	mov	r1, r3
 80034e0:	4807      	ldr	r0, [pc, #28]	; (8003500 <HAL_TIM_MspPostInit+0xd8>)
 80034e2:	f000 fc55 	bl	8003d90 <HAL_GPIO_Init>
}
 80034e6:	bf00      	nop
 80034e8:	3728      	adds	r7, #40	; 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40010800 	.word	0x40010800
 80034fc:	40000400 	.word	0x40000400
 8003500:	40010c00 	.word	0x40010c00

08003504 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <MX_USART1_UART_Init+0x4c>)
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <MX_USART1_UART_Init+0x50>)
 800350c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <MX_USART1_UART_Init+0x4c>)
 8003510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003516:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <MX_USART1_UART_Init+0x4c>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <MX_USART1_UART_Init+0x4c>)
 800351e:	2200      	movs	r2, #0
 8003520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <MX_USART1_UART_Init+0x4c>)
 8003524:	2200      	movs	r2, #0
 8003526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <MX_USART1_UART_Init+0x4c>)
 800352a:	220c      	movs	r2, #12
 800352c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <MX_USART1_UART_Init+0x4c>)
 8003530:	2200      	movs	r2, #0
 8003532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <MX_USART1_UART_Init+0x4c>)
 8003536:	2200      	movs	r2, #0
 8003538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800353a:	4805      	ldr	r0, [pc, #20]	; (8003550 <MX_USART1_UART_Init+0x4c>)
 800353c:	f003 fb75 	bl	8006c2a <HAL_UART_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003546:	f7fe fe32 	bl	80021ae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200003b0 	.word	0x200003b0
 8003554:	40013800 	.word	0x40013800

08003558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	; 0x28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a22      	ldr	r2, [pc, #136]	; (80035fc <HAL_UART_MspInit+0xa4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d13d      	bne.n	80035f4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003578:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_UART_MspInit+0xa8>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	4a20      	ldr	r2, [pc, #128]	; (8003600 <HAL_UART_MspInit+0xa8>)
 800357e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003582:	6193      	str	r3, [r2, #24]
 8003584:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <HAL_UART_MspInit+0xa8>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_UART_MspInit+0xa8>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <HAL_UART_MspInit+0xa8>)
 8003596:	f043 0308 	orr.w	r3, r3, #8
 800359a:	6193      	str	r3, [r2, #24]
 800359c:	4b18      	ldr	r3, [pc, #96]	; (8003600 <HAL_UART_MspInit+0xa8>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035a8:	2340      	movs	r3, #64	; 0x40
 80035aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ac:	2302      	movs	r3, #2
 80035ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035b0:	2303      	movs	r3, #3
 80035b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b4:	f107 0314 	add.w	r3, r7, #20
 80035b8:	4619      	mov	r1, r3
 80035ba:	4812      	ldr	r0, [pc, #72]	; (8003604 <HAL_UART_MspInit+0xac>)
 80035bc:	f000 fbe8 	bl	8003d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4619      	mov	r1, r3
 80035d2:	480c      	ldr	r0, [pc, #48]	; (8003604 <HAL_UART_MspInit+0xac>)
 80035d4:	f000 fbdc 	bl	8003d90 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_UART_MspInit+0xb0>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	f043 0304 	orr.w	r3, r3, #4
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
 80035ee:	4a06      	ldr	r2, [pc, #24]	; (8003608 <HAL_UART_MspInit+0xb0>)
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80035f4:	bf00      	nop
 80035f6:	3728      	adds	r7, #40	; 0x28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40013800 	.word	0x40013800
 8003600:	40021000 	.word	0x40021000
 8003604:	40010c00 	.word	0x40010c00
 8003608:	40010000 	.word	0x40010000

0800360c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800360c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800360e:	e003      	b.n	8003618 <LoopCopyDataInit>

08003610 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003612:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003614:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003616:	3104      	adds	r1, #4

08003618 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003618:	480a      	ldr	r0, [pc, #40]	; (8003644 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800361c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800361e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003620:	d3f6      	bcc.n	8003610 <CopyDataInit>
  ldr r2, =_sbss
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003624:	e002      	b.n	800362c <LoopFillZerobss>

08003626 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003626:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003628:	f842 3b04 	str.w	r3, [r2], #4

0800362c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800362c:	4b08      	ldr	r3, [pc, #32]	; (8003650 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800362e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003630:	d3f9      	bcc.n	8003626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003632:	f7ff fd7d 	bl	8003130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003636:	f003 fcb5 	bl	8006fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800363a:	f7fe fcad 	bl	8001f98 <main>
  bx lr
 800363e:	4770      	bx	lr
  ldr r3, =_sidata
 8003640:	08009b08 	.word	0x08009b08
  ldr r0, =_sdata
 8003644:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003648:	2000012c 	.word	0x2000012c
  ldr r2, =_sbss
 800364c:	2000012c 	.word	0x2000012c
  ldr r3, = _ebss
 8003650:	200003f4 	.word	0x200003f4

08003654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003654:	e7fe      	b.n	8003654 <ADC1_2_IRQHandler>
	...

08003658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_Init+0x28>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a07      	ldr	r2, [pc, #28]	; (8003680 <HAL_Init+0x28>)
 8003662:	f043 0310 	orr.w	r3, r3, #16
 8003666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003668:	2003      	movs	r0, #3
 800366a:	f000 fb4f 	bl	8003d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800366e:	2000      	movs	r0, #0
 8003670:	f000 f808 	bl	8003684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003674:	f7ff fb0e 	bl	8002c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40022000 	.word	0x40022000

08003684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800368c:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_InitTick+0x54>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_InitTick+0x58>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	4619      	mov	r1, r3
 8003696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800369a:	fbb3 f3f1 	udiv	r3, r3, r1
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fb67 	bl	8003d76 <HAL_SYSTICK_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e00e      	b.n	80036d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b0f      	cmp	r3, #15
 80036b6:	d80a      	bhi.n	80036ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036b8:	2200      	movs	r2, #0
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	f000 fb2f 	bl	8003d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036c4:	4a06      	ldr	r2, [pc, #24]	; (80036e0 <HAL_InitTick+0x5c>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e000      	b.n	80036d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	200000b8 	.word	0x200000b8
 80036dc:	200000c0 	.word	0x200000c0
 80036e0:	200000bc 	.word	0x200000bc

080036e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_IncTick+0x1c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_IncTick+0x20>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4413      	add	r3, r2
 80036f4:	4a03      	ldr	r2, [pc, #12]	; (8003704 <HAL_IncTick+0x20>)
 80036f6:	6013      	str	r3, [r2, #0]
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	200000c0 	.word	0x200000c0
 8003704:	200003f0 	.word	0x200003f0

08003708 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return uwTick;
 800370c:	4b02      	ldr	r3, [pc, #8]	; (8003718 <HAL_GetTick+0x10>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr
 8003718:	200003f0 	.word	0x200003f0

0800371c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003724:	f7ff fff0 	bl	8003708 <HAL_GetTick>
 8003728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d005      	beq.n	8003742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_Delay+0x40>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4413      	add	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003742:	bf00      	nop
 8003744:	f7ff ffe0 	bl	8003708 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	429a      	cmp	r2, r3
 8003752:	d8f7      	bhi.n	8003744 <HAL_Delay+0x28>
  {
  }
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	200000c0 	.word	0x200000c0

08003760 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0be      	b.n	8003900 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	2b00      	cmp	r3, #0
 800378e:	d109      	bne.n	80037a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fd32 	bl	8001208 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f9ab 	bl	8003b00 <ADC_ConversionStop_Disable>
 80037aa:	4603      	mov	r3, r0
 80037ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f040 8099 	bne.w	80038ee <HAL_ADC_Init+0x18e>
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f040 8095 	bne.w	80038ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037cc:	f023 0302 	bic.w	r3, r3, #2
 80037d0:	f043 0202 	orr.w	r2, r3, #2
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80037e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	7b1b      	ldrb	r3, [r3, #12]
 80037e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80037e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f8:	d003      	beq.n	8003802 <HAL_ADC_Init+0xa2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d102      	bne.n	8003808 <HAL_ADC_Init+0xa8>
 8003802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003806:	e000      	b.n	800380a <HAL_ADC_Init+0xaa>
 8003808:	2300      	movs	r3, #0
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	7d1b      	ldrb	r3, [r3, #20]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d119      	bne.n	800384c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	7b1b      	ldrb	r3, [r3, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	3b01      	subs	r3, #1
 8003826:	035a      	lsls	r2, r3, #13
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	e00b      	b.n	800384c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	430a      	orrs	r2, r1
 800385e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	4b28      	ldr	r3, [pc, #160]	; (8003908 <HAL_ADC_Init+0x1a8>)
 8003868:	4013      	ands	r3, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	430b      	orrs	r3, r1
 8003872:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387c:	d003      	beq.n	8003886 <HAL_ADC_Init+0x126>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d104      	bne.n	8003890 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	3b01      	subs	r3, #1
 800388c:	051b      	lsls	r3, r3, #20
 800388e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	4b18      	ldr	r3, [pc, #96]	; (800390c <HAL_ADC_Init+0x1ac>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d10b      	bne.n	80038cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038ca:	e018      	b.n	80038fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	f023 0312 	bic.w	r3, r3, #18
 80038d4:	f043 0210 	orr.w	r2, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	f043 0201 	orr.w	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038ec:	e007      	b.n	80038fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	f043 0210 	orr.w	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	ffe1f7fd 	.word	0xffe1f7fd
 800390c:	ff1f0efe 	.word	0xff1f0efe

08003910 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x20>
 800392c:	2302      	movs	r3, #2
 800392e:	e0dc      	b.n	8003aea <HAL_ADC_ConfigChannel+0x1da>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b06      	cmp	r3, #6
 800393e:	d81c      	bhi.n	800397a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	3b05      	subs	r3, #5
 8003952:	221f      	movs	r2, #31
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	4019      	ands	r1, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	3b05      	subs	r3, #5
 800396c:	fa00 f203 	lsl.w	r2, r0, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	635a      	str	r2, [r3, #52]	; 0x34
 8003978:	e03c      	b.n	80039f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d81c      	bhi.n	80039bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	3b23      	subs	r3, #35	; 0x23
 8003994:	221f      	movs	r2, #31
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	4019      	ands	r1, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	3b23      	subs	r3, #35	; 0x23
 80039ae:	fa00 f203 	lsl.w	r2, r0, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
 80039ba:	e01b      	b.n	80039f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	3b41      	subs	r3, #65	; 0x41
 80039ce:	221f      	movs	r2, #31
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	4019      	ands	r1, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	3b41      	subs	r3, #65	; 0x41
 80039e8:	fa00 f203 	lsl.w	r2, r0, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b09      	cmp	r3, #9
 80039fa:	d91c      	bls.n	8003a36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68d9      	ldr	r1, [r3, #12]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4613      	mov	r3, r2
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3b1e      	subs	r3, #30
 8003a0e:	2207      	movs	r2, #7
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	4019      	ands	r1, r3
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6898      	ldr	r0, [r3, #8]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	4413      	add	r3, r2
 8003a26:	3b1e      	subs	r3, #30
 8003a28:	fa00 f203 	lsl.w	r2, r0, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	60da      	str	r2, [r3, #12]
 8003a34:	e019      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6919      	ldr	r1, [r3, #16]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	4413      	add	r3, r2
 8003a46:	2207      	movs	r2, #7
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	4019      	ands	r1, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	6898      	ldr	r0, [r3, #8]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d003      	beq.n	8003a7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a76:	2b11      	cmp	r3, #17
 8003a78:	d132      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d125      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d126      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003aa0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d11a      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003aaa:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <HAL_ADC_ConfigChannel+0x1ec>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	0c9a      	lsrs	r2, r3, #18
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ac0:	e002      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f9      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x1b2>
 8003ace:	e007      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	f043 0220 	orr.w	r2, r3, #32
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	40012400 	.word	0x40012400
 8003af8:	200000b8 	.word	0x200000b8
 8003afc:	431bde83 	.word	0x431bde83

08003b00 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d127      	bne.n	8003b6a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b2a:	f7ff fded 	bl	8003708 <HAL_GetTick>
 8003b2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b30:	e014      	b.n	8003b5c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b32:	f7ff fde9 	bl	8003708 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d90d      	bls.n	8003b5c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	f043 0210 	orr.w	r2, r3, #16
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	f043 0201 	orr.w	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e007      	b.n	8003b6c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d0e3      	beq.n	8003b32 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b90:	4013      	ands	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ba6:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	60d3      	str	r3, [r2, #12]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	f003 0307 	and.w	r3, r3, #7
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db0b      	blt.n	8003c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	f003 021f 	and.w	r2, r3, #31
 8003bf0:	4906      	ldr	r1, [pc, #24]	; (8003c0c <__NVIC_EnableIRQ+0x34>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	e000e100 	.word	0xe000e100

08003c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	db0a      	blt.n	8003c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	490c      	ldr	r1, [pc, #48]	; (8003c5c <__NVIC_SetPriority+0x4c>)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	0112      	lsls	r2, r2, #4
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	440b      	add	r3, r1
 8003c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c38:	e00a      	b.n	8003c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4908      	ldr	r1, [pc, #32]	; (8003c60 <__NVIC_SetPriority+0x50>)
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	3b04      	subs	r3, #4
 8003c48:	0112      	lsls	r2, r2, #4
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	761a      	strb	r2, [r3, #24]
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	e000e100 	.word	0xe000e100
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f1c3 0307 	rsb	r3, r3, #7
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	bf28      	it	cs
 8003c82:	2304      	movcs	r3, #4
 8003c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d902      	bls.n	8003c94 <NVIC_EncodePriority+0x30>
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3b03      	subs	r3, #3
 8003c92:	e000      	b.n	8003c96 <NVIC_EncodePriority+0x32>
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c98:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cac:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	43d9      	mvns	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cbc:	4313      	orrs	r3, r2
         );
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3724      	adds	r7, #36	; 0x24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd8:	d301      	bcc.n	8003cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e00f      	b.n	8003cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cde:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <SysTick_Config+0x40>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ce6:	210f      	movs	r1, #15
 8003ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cec:	f7ff ff90 	bl	8003c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <SysTick_Config+0x40>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cf6:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <SysTick_Config+0x40>)
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	e000e010 	.word	0xe000e010

08003d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff2d 	bl	8003b74 <__NVIC_SetPriorityGrouping>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d34:	f7ff ff42 	bl	8003bbc <__NVIC_GetPriorityGrouping>
 8003d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	6978      	ldr	r0, [r7, #20]
 8003d40:	f7ff ff90 	bl	8003c64 <NVIC_EncodePriority>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff ff5f 	bl	8003c10 <__NVIC_SetPriority>
}
 8003d52:	bf00      	nop
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff35 	bl	8003bd8 <__NVIC_EnableIRQ>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ffa2 	bl	8003cc8 <SysTick_Config>
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b08b      	sub	sp, #44	; 0x2c
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003da2:	e127      	b.n	8003ff4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003da4:	2201      	movs	r2, #1
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	f040 8116 	bne.w	8003fee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b12      	cmp	r3, #18
 8003dc8:	d034      	beq.n	8003e34 <HAL_GPIO_Init+0xa4>
 8003dca:	2b12      	cmp	r3, #18
 8003dcc:	d80d      	bhi.n	8003dea <HAL_GPIO_Init+0x5a>
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d02b      	beq.n	8003e2a <HAL_GPIO_Init+0x9a>
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d804      	bhi.n	8003de0 <HAL_GPIO_Init+0x50>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d031      	beq.n	8003e3e <HAL_GPIO_Init+0xae>
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d01c      	beq.n	8003e18 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003dde:	e048      	b.n	8003e72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d043      	beq.n	8003e6c <HAL_GPIO_Init+0xdc>
 8003de4:	2b11      	cmp	r3, #17
 8003de6:	d01b      	beq.n	8003e20 <HAL_GPIO_Init+0x90>
          break;
 8003de8:	e043      	b.n	8003e72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003dea:	4a89      	ldr	r2, [pc, #548]	; (8004010 <HAL_GPIO_Init+0x280>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d026      	beq.n	8003e3e <HAL_GPIO_Init+0xae>
 8003df0:	4a87      	ldr	r2, [pc, #540]	; (8004010 <HAL_GPIO_Init+0x280>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d806      	bhi.n	8003e04 <HAL_GPIO_Init+0x74>
 8003df6:	4a87      	ldr	r2, [pc, #540]	; (8004014 <HAL_GPIO_Init+0x284>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d020      	beq.n	8003e3e <HAL_GPIO_Init+0xae>
 8003dfc:	4a86      	ldr	r2, [pc, #536]	; (8004018 <HAL_GPIO_Init+0x288>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01d      	beq.n	8003e3e <HAL_GPIO_Init+0xae>
          break;
 8003e02:	e036      	b.n	8003e72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003e04:	4a85      	ldr	r2, [pc, #532]	; (800401c <HAL_GPIO_Init+0x28c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d019      	beq.n	8003e3e <HAL_GPIO_Init+0xae>
 8003e0a:	4a85      	ldr	r2, [pc, #532]	; (8004020 <HAL_GPIO_Init+0x290>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d016      	beq.n	8003e3e <HAL_GPIO_Init+0xae>
 8003e10:	4a84      	ldr	r2, [pc, #528]	; (8004024 <HAL_GPIO_Init+0x294>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_GPIO_Init+0xae>
          break;
 8003e16:	e02c      	b.n	8003e72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	623b      	str	r3, [r7, #32]
          break;
 8003e1e:	e028      	b.n	8003e72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	3304      	adds	r3, #4
 8003e26:	623b      	str	r3, [r7, #32]
          break;
 8003e28:	e023      	b.n	8003e72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	3308      	adds	r3, #8
 8003e30:	623b      	str	r3, [r7, #32]
          break;
 8003e32:	e01e      	b.n	8003e72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	623b      	str	r3, [r7, #32]
          break;
 8003e3c:	e019      	b.n	8003e72 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e46:	2304      	movs	r3, #4
 8003e48:	623b      	str	r3, [r7, #32]
          break;
 8003e4a:	e012      	b.n	8003e72 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e54:	2308      	movs	r3, #8
 8003e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	611a      	str	r2, [r3, #16]
          break;
 8003e5e:	e008      	b.n	8003e72 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e60:	2308      	movs	r3, #8
 8003e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	615a      	str	r2, [r3, #20]
          break;
 8003e6a:	e002      	b.n	8003e72 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	623b      	str	r3, [r7, #32]
          break;
 8003e70:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	2bff      	cmp	r3, #255	; 0xff
 8003e76:	d801      	bhi.n	8003e7c <HAL_GPIO_Init+0xec>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	e001      	b.n	8003e80 <HAL_GPIO_Init+0xf0>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	2bff      	cmp	r3, #255	; 0xff
 8003e86:	d802      	bhi.n	8003e8e <HAL_GPIO_Init+0xfe>
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	e002      	b.n	8003e94 <HAL_GPIO_Init+0x104>
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	3b08      	subs	r3, #8
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	210f      	movs	r1, #15
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	6a39      	ldr	r1, [r7, #32]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8096 	beq.w	8003fee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ec2:	4b59      	ldr	r3, [pc, #356]	; (8004028 <HAL_GPIO_Init+0x298>)
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	4a58      	ldr	r2, [pc, #352]	; (8004028 <HAL_GPIO_Init+0x298>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6193      	str	r3, [r2, #24]
 8003ece:	4b56      	ldr	r3, [pc, #344]	; (8004028 <HAL_GPIO_Init+0x298>)
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003eda:	4a54      	ldr	r2, [pc, #336]	; (800402c <HAL_GPIO_Init+0x29c>)
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	089b      	lsrs	r3, r3, #2
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	220f      	movs	r2, #15
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4013      	ands	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a4b      	ldr	r2, [pc, #300]	; (8004030 <HAL_GPIO_Init+0x2a0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_GPIO_Init+0x19e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a4a      	ldr	r2, [pc, #296]	; (8004034 <HAL_GPIO_Init+0x2a4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00d      	beq.n	8003f2a <HAL_GPIO_Init+0x19a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a49      	ldr	r2, [pc, #292]	; (8004038 <HAL_GPIO_Init+0x2a8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <HAL_GPIO_Init+0x196>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a48      	ldr	r2, [pc, #288]	; (800403c <HAL_GPIO_Init+0x2ac>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <HAL_GPIO_Init+0x192>
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e006      	b.n	8003f30 <HAL_GPIO_Init+0x1a0>
 8003f22:	2304      	movs	r3, #4
 8003f24:	e004      	b.n	8003f30 <HAL_GPIO_Init+0x1a0>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e002      	b.n	8003f30 <HAL_GPIO_Init+0x1a0>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <HAL_GPIO_Init+0x1a0>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f32:	f002 0203 	and.w	r2, r2, #3
 8003f36:	0092      	lsls	r2, r2, #2
 8003f38:	4093      	lsls	r3, r2
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f40:	493a      	ldr	r1, [pc, #232]	; (800402c <HAL_GPIO_Init+0x29c>)
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	089b      	lsrs	r3, r3, #2
 8003f46:	3302      	adds	r3, #2
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d006      	beq.n	8003f68 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f5a:	4b39      	ldr	r3, [pc, #228]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4938      	ldr	r1, [pc, #224]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
 8003f66:	e006      	b.n	8003f76 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f68:	4b35      	ldr	r3, [pc, #212]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	4933      	ldr	r1, [pc, #204]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d006      	beq.n	8003f90 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f82:	4b2f      	ldr	r3, [pc, #188]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	492e      	ldr	r1, [pc, #184]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	604b      	str	r3, [r1, #4]
 8003f8e:	e006      	b.n	8003f9e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f90:	4b2b      	ldr	r3, [pc, #172]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	4929      	ldr	r1, [pc, #164]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003faa:	4b25      	ldr	r3, [pc, #148]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	4924      	ldr	r1, [pc, #144]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
 8003fb6:	e006      	b.n	8003fc6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003fb8:	4b21      	ldr	r3, [pc, #132]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	491f      	ldr	r1, [pc, #124]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d006      	beq.n	8003fe0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	491a      	ldr	r1, [pc, #104]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60cb      	str	r3, [r1, #12]
 8003fde:	e006      	b.n	8003fee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	4915      	ldr	r1, [pc, #84]	; (8004040 <HAL_GPIO_Init+0x2b0>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f47f aed0 	bne.w	8003da4 <HAL_GPIO_Init+0x14>
  }
}
 8004004:	bf00      	nop
 8004006:	372c      	adds	r7, #44	; 0x2c
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	10210000 	.word	0x10210000
 8004014:	10110000 	.word	0x10110000
 8004018:	10120000 	.word	0x10120000
 800401c:	10310000 	.word	0x10310000
 8004020:	10320000 	.word	0x10320000
 8004024:	10220000 	.word	0x10220000
 8004028:	40021000 	.word	0x40021000
 800402c:	40010000 	.word	0x40010000
 8004030:	40010800 	.word	0x40010800
 8004034:	40010c00 	.word	0x40010c00
 8004038:	40011000 	.word	0x40011000
 800403c:	40011400 	.word	0x40011400
 8004040:	40010400 	.word	0x40010400

08004044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
 8004050:	4613      	mov	r3, r2
 8004052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004054:	787b      	ldrb	r3, [r7, #1]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800405a:	887a      	ldrh	r2, [r7, #2]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004060:	e003      	b.n	800406a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004062:	887b      	ldrh	r3, [r7, #2]
 8004064:	041a      	lsls	r2, r3, #16
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	611a      	str	r2, [r3, #16]
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800407e:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	4013      	ands	r3, r2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800408a:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe f857 	bl	8002146 <HAL_GPIO_EXTI_Callback>
  }
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40010400 	.word	0x40010400

080040a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e11f      	b.n	80042f6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fd f9ce 	bl	800146c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2224      	movs	r2, #36	; 0x24
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004108:	f001 fe1c 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 800410c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4a7b      	ldr	r2, [pc, #492]	; (8004300 <HAL_I2C_Init+0x25c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d807      	bhi.n	8004128 <HAL_I2C_Init+0x84>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4a7a      	ldr	r2, [pc, #488]	; (8004304 <HAL_I2C_Init+0x260>)
 800411c:	4293      	cmp	r3, r2
 800411e:	bf94      	ite	ls
 8004120:	2301      	movls	r3, #1
 8004122:	2300      	movhi	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	e006      	b.n	8004136 <HAL_I2C_Init+0x92>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a77      	ldr	r2, [pc, #476]	; (8004308 <HAL_I2C_Init+0x264>)
 800412c:	4293      	cmp	r3, r2
 800412e:	bf94      	ite	ls
 8004130:	2301      	movls	r3, #1
 8004132:	2300      	movhi	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0db      	b.n	80042f6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4a72      	ldr	r2, [pc, #456]	; (800430c <HAL_I2C_Init+0x268>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	0c9b      	lsrs	r3, r3, #18
 8004148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4a64      	ldr	r2, [pc, #400]	; (8004300 <HAL_I2C_Init+0x25c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d802      	bhi.n	8004178 <HAL_I2C_Init+0xd4>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	3301      	adds	r3, #1
 8004176:	e009      	b.n	800418c <HAL_I2C_Init+0xe8>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	4a63      	ldr	r2, [pc, #396]	; (8004310 <HAL_I2C_Init+0x26c>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	099b      	lsrs	r3, r3, #6
 800418a:	3301      	adds	r3, #1
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	430b      	orrs	r3, r1
 8004192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800419e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4956      	ldr	r1, [pc, #344]	; (8004300 <HAL_I2C_Init+0x25c>)
 80041a8:	428b      	cmp	r3, r1
 80041aa:	d80d      	bhi.n	80041c8 <HAL_I2C_Init+0x124>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	1e59      	subs	r1, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80041ba:	3301      	adds	r3, #1
 80041bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	bf38      	it	cc
 80041c4:	2304      	movcc	r3, #4
 80041c6:	e04f      	b.n	8004268 <HAL_I2C_Init+0x1c4>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d111      	bne.n	80041f4 <HAL_I2C_Init+0x150>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1e58      	subs	r0, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6859      	ldr	r1, [r3, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	440b      	add	r3, r1
 80041de:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e2:	3301      	adds	r3, #1
 80041e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e012      	b.n	800421a <HAL_I2C_Init+0x176>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	1e58      	subs	r0, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	0099      	lsls	r1, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	fbb0 f3f3 	udiv	r3, r0, r3
 800420a:	3301      	adds	r3, #1
 800420c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf0c      	ite	eq
 8004214:	2301      	moveq	r3, #1
 8004216:	2300      	movne	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_I2C_Init+0x17e>
 800421e:	2301      	movs	r3, #1
 8004220:	e022      	b.n	8004268 <HAL_I2C_Init+0x1c4>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10e      	bne.n	8004248 <HAL_I2C_Init+0x1a4>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1e58      	subs	r0, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6859      	ldr	r1, [r3, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	440b      	add	r3, r1
 8004238:	fbb0 f3f3 	udiv	r3, r0, r3
 800423c:	3301      	adds	r3, #1
 800423e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004246:	e00f      	b.n	8004268 <HAL_I2C_Init+0x1c4>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	1e58      	subs	r0, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6859      	ldr	r1, [r3, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	0099      	lsls	r1, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	fbb0 f3f3 	udiv	r3, r0, r3
 800425e:	3301      	adds	r3, #1
 8004260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	6809      	ldr	r1, [r1, #0]
 800426c:	4313      	orrs	r3, r2
 800426e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6911      	ldr	r1, [r2, #16]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68d2      	ldr	r2, [r2, #12]
 80042a2:	4311      	orrs	r1, r2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695a      	ldr	r2, [r3, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	000186a0 	.word	0x000186a0
 8004304:	001e847f 	.word	0x001e847f
 8004308:	003d08ff 	.word	0x003d08ff
 800430c:	431bde83 	.word	0x431bde83
 8004310:	10624dd3 	.word	0x10624dd3

08004314 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	461a      	mov	r2, r3
 8004320:	460b      	mov	r3, r1
 8004322:	817b      	strh	r3, [r7, #10]
 8004324:	4613      	mov	r3, r2
 8004326:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004328:	f7ff f9ee 	bl	8003708 <HAL_GetTick>
 800432c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b20      	cmp	r3, #32
 8004338:	f040 80e0 	bne.w	80044fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	2319      	movs	r3, #25
 8004342:	2201      	movs	r2, #1
 8004344:	4970      	ldr	r1, [pc, #448]	; (8004508 <HAL_I2C_Master_Transmit+0x1f4>)
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 ff4a 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004352:	2302      	movs	r3, #2
 8004354:	e0d3      	b.n	80044fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_I2C_Master_Transmit+0x50>
 8004360:	2302      	movs	r3, #2
 8004362:	e0cc      	b.n	80044fe <HAL_I2C_Master_Transmit+0x1ea>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b01      	cmp	r3, #1
 8004378:	d007      	beq.n	800438a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004398:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2221      	movs	r2, #33	; 0x21
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2210      	movs	r2, #16
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	893a      	ldrh	r2, [r7, #8]
 80043ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4a50      	ldr	r2, [pc, #320]	; (800450c <HAL_I2C_Master_Transmit+0x1f8>)
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043cc:	8979      	ldrh	r1, [r7, #10]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	6a3a      	ldr	r2, [r7, #32]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fd1e 	bl	8004e14 <I2C_MasterRequestWrite>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e08d      	b.n	80044fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043f8:	e066      	b.n	80044c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	6a39      	ldr	r1, [r7, #32]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 ffc4 	bl	800538c <I2C_WaitOnTXEFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00d      	beq.n	8004426 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	2b04      	cmp	r3, #4
 8004410:	d107      	bne.n	8004422 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004420:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e06b      	b.n	80044fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	781a      	ldrb	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b04      	cmp	r3, #4
 8004462:	d11b      	bne.n	800449c <HAL_I2C_Master_Transmit+0x188>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	2b00      	cmp	r3, #0
 800446a:	d017      	beq.n	800449c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	781a      	ldrb	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	6a39      	ldr	r1, [r7, #32]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 ffb4 	bl	800540e <I2C_WaitOnBTFFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00d      	beq.n	80044c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d107      	bne.n	80044c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e01a      	b.n	80044fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d194      	bne.n	80043fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	e000      	b.n	80044fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044fc:	2302      	movs	r3, #2
  }
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	00100002 	.word	0x00100002
 800450c:	ffff0000 	.word	0xffff0000

08004510 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	; 0x30
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	460b      	mov	r3, r1
 800451e:	817b      	strh	r3, [r7, #10]
 8004520:	4613      	mov	r3, r2
 8004522:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004528:	f7ff f8ee 	bl	8003708 <HAL_GetTick>
 800452c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b20      	cmp	r3, #32
 8004538:	f040 8238 	bne.w	80049ac <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	2319      	movs	r3, #25
 8004542:	2201      	movs	r2, #1
 8004544:	497e      	ldr	r1, [pc, #504]	; (8004740 <HAL_I2C_Master_Receive+0x230>)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fe4a 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004552:	2302      	movs	r3, #2
 8004554:	e22b      	b.n	80049ae <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_I2C_Master_Receive+0x54>
 8004560:	2302      	movs	r3, #2
 8004562:	e224      	b.n	80049ae <HAL_I2C_Master_Receive+0x49e>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d007      	beq.n	800458a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004598:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2222      	movs	r2, #34	; 0x22
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2210      	movs	r2, #16
 80045a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	893a      	ldrh	r2, [r7, #8]
 80045ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a5e      	ldr	r2, [pc, #376]	; (8004744 <HAL_I2C_Master_Receive+0x234>)
 80045ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045cc:	8979      	ldrh	r1, [r7, #10]
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 fca0 	bl	8004f18 <I2C_MasterRequestRead>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e1e5      	b.n	80049ae <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d113      	bne.n	8004612 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	e1b9      	b.n	8004986 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004616:	2b01      	cmp	r3, #1
 8004618:	d11d      	bne.n	8004656 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800462c:	2300      	movs	r3, #0
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004650:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004652:	b662      	cpsie	i
 8004654:	e197      	b.n	8004986 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465a:	2b02      	cmp	r3, #2
 800465c:	d11d      	bne.n	800469a <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800466c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800466e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004694:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004696:	b662      	cpsie	i
 8004698:	e175      	b.n	8004986 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80046c0:	e161      	b.n	8004986 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	f200 811a 	bhi.w	8004900 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d123      	bne.n	800471c <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 fed9 	bl	8005490 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e162      	b.n	80049ae <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	855a      	strh	r2, [r3, #42]	; 0x2a
 800471a:	e134      	b.n	8004986 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	2b02      	cmp	r3, #2
 8004722:	d150      	bne.n	80047c6 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	2200      	movs	r2, #0
 800472c:	4906      	ldr	r1, [pc, #24]	; (8004748 <HAL_I2C_Master_Receive+0x238>)
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 fd56 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e137      	b.n	80049ae <HAL_I2C_Master_Receive+0x49e>
 800473e:	bf00      	nop
 8004740:	00100002 	.word	0x00100002
 8004744:	ffff0000 	.word	0xffff0000
 8004748:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800474c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004790:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047c4:	e0df      	b.n	8004986 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	2200      	movs	r2, #0
 80047ce:	497a      	ldr	r1, [pc, #488]	; (80049b8 <HAL_I2C_Master_Receive+0x4a8>)
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 fd05 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0e6      	b.n	80049ae <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047f0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004824:	4b65      	ldr	r3, [pc, #404]	; (80049bc <HAL_I2C_Master_Receive+0x4ac>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	08db      	lsrs	r3, r3, #3
 800482a:	4a65      	ldr	r2, [pc, #404]	; (80049c0 <HAL_I2C_Master_Receive+0x4b0>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	0a1a      	lsrs	r2, r3, #8
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	00da      	lsls	r2, r3, #3
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	3b01      	subs	r3, #1
 8004842:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d117      	bne.n	800487a <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	f043 0220 	orr.w	r2, r3, #32
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800486c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e099      	b.n	80049ae <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b04      	cmp	r3, #4
 8004886:	d1da      	bne.n	800483e <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004896:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048ca:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048fe:	e042      	b.n	8004986 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004902:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 fdc3 	bl	8005490 <I2C_WaitOnRXNEFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e04c      	b.n	80049ae <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b04      	cmp	r3, #4
 8004952:	d118      	bne.n	8004986 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498a:	2b00      	cmp	r3, #0
 800498c:	f47f ae99 	bne.w	80046c2 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
  }
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3728      	adds	r7, #40	; 0x28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	00010004 	.word	0x00010004
 80049bc:	200000b8 	.word	0x200000b8
 80049c0:	14f8b589 	.word	0x14f8b589

080049c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	4608      	mov	r0, r1
 80049ce:	4611      	mov	r1, r2
 80049d0:	461a      	mov	r2, r3
 80049d2:	4603      	mov	r3, r0
 80049d4:	817b      	strh	r3, [r7, #10]
 80049d6:	460b      	mov	r3, r1
 80049d8:	813b      	strh	r3, [r7, #8]
 80049da:	4613      	mov	r3, r2
 80049dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049de:	f7fe fe93 	bl	8003708 <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	f040 80d9 	bne.w	8004ba4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	2319      	movs	r3, #25
 80049f8:	2201      	movs	r2, #1
 80049fa:	496d      	ldr	r1, [pc, #436]	; (8004bb0 <HAL_I2C_Mem_Write+0x1ec>)
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fbef 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e0cc      	b.n	8004ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_I2C_Mem_Write+0x56>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e0c5      	b.n	8004ba6 <HAL_I2C_Mem_Write+0x1e2>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d007      	beq.n	8004a40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2221      	movs	r2, #33	; 0x21
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2240      	movs	r2, #64	; 0x40
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a3a      	ldr	r2, [r7, #32]
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a4d      	ldr	r2, [pc, #308]	; (8004bb4 <HAL_I2C_Mem_Write+0x1f0>)
 8004a80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a82:	88f8      	ldrh	r0, [r7, #6]
 8004a84:	893a      	ldrh	r2, [r7, #8]
 8004a86:	8979      	ldrh	r1, [r7, #10]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	4603      	mov	r3, r0
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fb0e 	bl	80050b4 <I2C_RequestMemoryWrite>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d052      	beq.n	8004b44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e081      	b.n	8004ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fc70 	bl	800538c <I2C_WaitOnTXEFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d107      	bne.n	8004aca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e06b      	b.n	8004ba6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d11b      	bne.n	8004b44 <HAL_I2C_Mem_Write+0x180>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d017      	beq.n	8004b44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1aa      	bne.n	8004aa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fc5c 	bl	800540e <I2C_WaitOnBTFFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d107      	bne.n	8004b74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e016      	b.n	8004ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e000      	b.n	8004ba6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	00100002 	.word	0x00100002
 8004bb4:	ffff0000 	.word	0xffff0000

08004bb8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004bc8:	f7fe fd9e 	bl	8003708 <HAL_GetTick>
 8004bcc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	f040 8111 	bne.w	8004e02 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2319      	movs	r3, #25
 8004be6:	2201      	movs	r2, #1
 8004be8:	4988      	ldr	r1, [pc, #544]	; (8004e0c <HAL_I2C_IsDeviceReady+0x254>)
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 faf8 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e104      	b.n	8004e04 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_I2C_IsDeviceReady+0x50>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e0fd      	b.n	8004e04 <HAL_I2C_IsDeviceReady+0x24c>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d007      	beq.n	8004c2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0201 	orr.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2224      	movs	r2, #36	; 0x24
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a70      	ldr	r2, [pc, #448]	; (8004e10 <HAL_I2C_IsDeviceReady+0x258>)
 8004c50:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fab6 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00d      	beq.n	8004c96 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c88:	d103      	bne.n	8004c92 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e0b6      	b.n	8004e04 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c96:	897b      	ldrh	r3, [r7, #10]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ca4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004ca6:	f7fe fd2f 	bl	8003708 <HAL_GetTick>
 8004caa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	bf0c      	ite	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	2300      	movne	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004cda:	e025      	b.n	8004d28 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004cdc:	f7fe fd14 	bl	8003708 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d302      	bcc.n	8004cf2 <HAL_I2C_IsDeviceReady+0x13a>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d103      	bne.n	8004cfa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	22a0      	movs	r2, #160	; 0xa0
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1e:	bf0c      	ite	eq
 8004d20:	2301      	moveq	r3, #1
 8004d22:	2300      	movne	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2ba0      	cmp	r3, #160	; 0xa0
 8004d32:	d005      	beq.n	8004d40 <HAL_I2C_IsDeviceReady+0x188>
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <HAL_I2C_IsDeviceReady+0x188>
 8004d3a:	7dbb      	ldrb	r3, [r7, #22]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0cd      	beq.n	8004cdc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d129      	bne.n	8004daa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d64:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d66:	2300      	movs	r3, #0
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	2319      	movs	r3, #25
 8004d82:	2201      	movs	r2, #1
 8004d84:	4921      	ldr	r1, [pc, #132]	; (8004e0c <HAL_I2C_IsDeviceReady+0x254>)
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fa2a 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e036      	b.n	8004e04 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e02c      	b.n	8004e04 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dc2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	2319      	movs	r3, #25
 8004dca:	2201      	movs	r2, #1
 8004dcc:	490f      	ldr	r1, [pc, #60]	; (8004e0c <HAL_I2C_IsDeviceReady+0x254>)
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 fa06 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e012      	b.n	8004e04 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	3301      	adds	r3, #1
 8004de2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	f4ff af32 	bcc.w	8004c52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
  }
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	00100002 	.word	0x00100002
 8004e10:	ffff0000 	.word	0xffff0000

08004e14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	460b      	mov	r3, r1
 8004e22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d006      	beq.n	8004e3e <I2C_MasterRequestWrite+0x2a>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d003      	beq.n	8004e3e <I2C_MasterRequestWrite+0x2a>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e3c:	d108      	bne.n	8004e50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e00b      	b.n	8004e68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	2b12      	cmp	r3, #18
 8004e56:	d107      	bne.n	8004e68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f9b3 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8e:	d103      	bne.n	8004e98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e035      	b.n	8004f08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea4:	d108      	bne.n	8004eb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ea6:	897b      	ldrh	r3, [r7, #10]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eb4:	611a      	str	r2, [r3, #16]
 8004eb6:	e01b      	b.n	8004ef0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004eb8:	897b      	ldrh	r3, [r7, #10]
 8004eba:	11db      	asrs	r3, r3, #7
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	f003 0306 	and.w	r3, r3, #6
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f063 030f 	orn	r3, r3, #15
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	490e      	ldr	r1, [pc, #56]	; (8004f10 <I2C_MasterRequestWrite+0xfc>)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f9d9 	bl	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e010      	b.n	8004f08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4907      	ldr	r1, [pc, #28]	; (8004f14 <I2C_MasterRequestWrite+0x100>)
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f9c9 	bl	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	00010008 	.word	0x00010008
 8004f14:	00010002 	.word	0x00010002

08004f18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	460b      	mov	r3, r1
 8004f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d006      	beq.n	8004f52 <I2C_MasterRequestRead+0x3a>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d003      	beq.n	8004f52 <I2C_MasterRequestRead+0x3a>
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f50:	d108      	bne.n	8004f64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	e00b      	b.n	8004f7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	2b11      	cmp	r3, #17
 8004f6a:	d107      	bne.n	8004f7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f929 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa2:	d103      	bne.n	8004fac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e079      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb8:	d108      	bne.n	8004fcc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fba:	897b      	ldrh	r3, [r7, #10]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	611a      	str	r2, [r3, #16]
 8004fca:	e05f      	b.n	800508c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fcc:	897b      	ldrh	r3, [r7, #10]
 8004fce:	11db      	asrs	r3, r3, #7
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f003 0306 	and.w	r3, r3, #6
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f063 030f 	orn	r3, r3, #15
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4930      	ldr	r1, [pc, #192]	; (80050ac <I2C_MasterRequestRead+0x194>)
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f94f 	bl	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e054      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ffa:	897b      	ldrh	r3, [r7, #10]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	4929      	ldr	r1, [pc, #164]	; (80050b0 <I2C_MasterRequestRead+0x198>)
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f93f 	bl	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e044      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501a:	2300      	movs	r3, #0
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800503e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f8c7 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00d      	beq.n	8005074 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005066:	d103      	bne.n	8005070 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800506e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e017      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005074:	897b      	ldrh	r3, [r7, #10]
 8005076:	11db      	asrs	r3, r3, #7
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f003 0306 	and.w	r3, r3, #6
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f063 030e 	orn	r3, r3, #14
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	4907      	ldr	r1, [pc, #28]	; (80050b0 <I2C_MasterRequestRead+0x198>)
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f8fb 	bl	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	00010008 	.word	0x00010008
 80050b0:	00010002 	.word	0x00010002

080050b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	4608      	mov	r0, r1
 80050be:	4611      	mov	r1, r2
 80050c0:	461a      	mov	r2, r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	817b      	strh	r3, [r7, #10]
 80050c6:	460b      	mov	r3, r1
 80050c8:	813b      	strh	r3, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f878 	bl	80051e0 <I2C_WaitOnFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00d      	beq.n	8005112 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005104:	d103      	bne.n	800510e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e05f      	b.n	80051d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005112:	897b      	ldrh	r3, [r7, #10]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005120:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	6a3a      	ldr	r2, [r7, #32]
 8005126:	492d      	ldr	r1, [pc, #180]	; (80051dc <I2C_RequestMemoryWrite+0x128>)
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f8b0 	bl	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e04c      	b.n	80051d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800514e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005150:	6a39      	ldr	r1, [r7, #32]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f91a 	bl	800538c <I2C_WaitOnTXEFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00d      	beq.n	800517a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b04      	cmp	r3, #4
 8005164:	d107      	bne.n	8005176 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005174:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e02b      	b.n	80051d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d105      	bne.n	800518c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005180:	893b      	ldrh	r3, [r7, #8]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	611a      	str	r2, [r3, #16]
 800518a:	e021      	b.n	80051d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800518c:	893b      	ldrh	r3, [r7, #8]
 800518e:	0a1b      	lsrs	r3, r3, #8
 8005190:	b29b      	uxth	r3, r3
 8005192:	b2da      	uxtb	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800519a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519c:	6a39      	ldr	r1, [r7, #32]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f8f4 	bl	800538c <I2C_WaitOnTXEFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00d      	beq.n	80051c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d107      	bne.n	80051c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e005      	b.n	80051d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051c6:	893b      	ldrh	r3, [r7, #8]
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	00010002 	.word	0x00010002

080051e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051f0:	e025      	b.n	800523e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d021      	beq.n	800523e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fa:	f7fe fa85 	bl	8003708 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d302      	bcc.n	8005210 <I2C_WaitOnFlagUntilTimeout+0x30>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d116      	bne.n	800523e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f043 0220 	orr.w	r2, r3, #32
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e023      	b.n	8005286 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	0c1b      	lsrs	r3, r3, #16
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b01      	cmp	r3, #1
 8005246:	d10d      	bne.n	8005264 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	43da      	mvns	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4013      	ands	r3, r2
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf0c      	ite	eq
 800525a:	2301      	moveq	r3, #1
 800525c:	2300      	movne	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	e00c      	b.n	800527e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	43da      	mvns	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4013      	ands	r3, r2
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	429a      	cmp	r2, r3
 8005282:	d0b6      	beq.n	80051f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800529c:	e051      	b.n	8005342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ac:	d123      	bne.n	80052f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f043 0204 	orr.w	r2, r3, #4
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e046      	b.n	8005384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d021      	beq.n	8005342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fe:	f7fe fa03 	bl	8003708 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d116      	bne.n	8005342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e020      	b.n	8005384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	d10c      	bne.n	8005366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	43da      	mvns	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf14      	ite	ne
 800535e:	2301      	movne	r3, #1
 8005360:	2300      	moveq	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	e00b      	b.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	43da      	mvns	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4013      	ands	r3, r2
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	bf14      	ite	ne
 8005378:	2301      	movne	r3, #1
 800537a:	2300      	moveq	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d18d      	bne.n	800529e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005398:	e02d      	b.n	80053f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f8ce 	bl	800553c <I2C_IsAcknowledgeFailed>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e02d      	b.n	8005406 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d021      	beq.n	80053f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b2:	f7fe f9a9 	bl	8003708 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d302      	bcc.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d116      	bne.n	80053f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f043 0220 	orr.w	r2, r3, #32
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e007      	b.n	8005406 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005400:	2b80      	cmp	r3, #128	; 0x80
 8005402:	d1ca      	bne.n	800539a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800541a:	e02d      	b.n	8005478 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f88d 	bl	800553c <I2C_IsAcknowledgeFailed>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e02d      	b.n	8005488 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	d021      	beq.n	8005478 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005434:	f7fe f968 	bl	8003708 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	429a      	cmp	r2, r3
 8005442:	d302      	bcc.n	800544a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d116      	bne.n	8005478 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	f043 0220 	orr.w	r2, r3, #32
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e007      	b.n	8005488 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b04      	cmp	r3, #4
 8005484:	d1ca      	bne.n	800541c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800549c:	e042      	b.n	8005524 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d119      	bne.n	80054e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0210 	mvn.w	r2, #16
 80054b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e029      	b.n	8005534 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e0:	f7fe f912 	bl	8003708 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d302      	bcc.n	80054f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d116      	bne.n	8005524 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	f043 0220 	orr.w	r2, r3, #32
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e007      	b.n	8005534 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d1b5      	bne.n	800549e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005552:	d11b      	bne.n	800558c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800555c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	f043 0204 	orr.w	r2, r3, #4
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr

08005598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e26c      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 8087 	beq.w	80056c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055b8:	4b92      	ldr	r3, [pc, #584]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f003 030c 	and.w	r3, r3, #12
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d00c      	beq.n	80055de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055c4:	4b8f      	ldr	r3, [pc, #572]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f003 030c 	and.w	r3, r3, #12
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d112      	bne.n	80055f6 <HAL_RCC_OscConfig+0x5e>
 80055d0:	4b8c      	ldr	r3, [pc, #560]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055dc:	d10b      	bne.n	80055f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055de:	4b89      	ldr	r3, [pc, #548]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d06c      	beq.n	80056c4 <HAL_RCC_OscConfig+0x12c>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d168      	bne.n	80056c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e246      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fe:	d106      	bne.n	800560e <HAL_RCC_OscConfig+0x76>
 8005600:	4b80      	ldr	r3, [pc, #512]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a7f      	ldr	r2, [pc, #508]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	e02e      	b.n	800566c <HAL_RCC_OscConfig+0xd4>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10c      	bne.n	8005630 <HAL_RCC_OscConfig+0x98>
 8005616:	4b7b      	ldr	r3, [pc, #492]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a7a      	ldr	r2, [pc, #488]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 800561c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	4b78      	ldr	r3, [pc, #480]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a77      	ldr	r2, [pc, #476]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e01d      	b.n	800566c <HAL_RCC_OscConfig+0xd4>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005638:	d10c      	bne.n	8005654 <HAL_RCC_OscConfig+0xbc>
 800563a:	4b72      	ldr	r3, [pc, #456]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a71      	ldr	r2, [pc, #452]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	4b6f      	ldr	r3, [pc, #444]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a6e      	ldr	r2, [pc, #440]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 800564c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e00b      	b.n	800566c <HAL_RCC_OscConfig+0xd4>
 8005654:	4b6b      	ldr	r3, [pc, #428]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a6a      	ldr	r2, [pc, #424]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 800565a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	4b68      	ldr	r3, [pc, #416]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a67      	ldr	r2, [pc, #412]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800566a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d013      	beq.n	800569c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005674:	f7fe f848 	bl	8003708 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800567c:	f7fe f844 	bl	8003708 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b64      	cmp	r3, #100	; 0x64
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e1fa      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568e:	4b5d      	ldr	r3, [pc, #372]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0xe4>
 800569a:	e014      	b.n	80056c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569c:	f7fe f834 	bl	8003708 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a4:	f7fe f830 	bl	8003708 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	; 0x64
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e1e6      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b6:	4b53      	ldr	r3, [pc, #332]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f0      	bne.n	80056a4 <HAL_RCC_OscConfig+0x10c>
 80056c2:	e000      	b.n	80056c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d063      	beq.n	800579a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056d2:	4b4c      	ldr	r3, [pc, #304]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 030c 	and.w	r3, r3, #12
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80056de:	4b49      	ldr	r3, [pc, #292]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f003 030c 	and.w	r3, r3, #12
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d11c      	bne.n	8005724 <HAL_RCC_OscConfig+0x18c>
 80056ea:	4b46      	ldr	r3, [pc, #280]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d116      	bne.n	8005724 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056f6:	4b43      	ldr	r3, [pc, #268]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_RCC_OscConfig+0x176>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d001      	beq.n	800570e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e1ba      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570e:	4b3d      	ldr	r3, [pc, #244]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4939      	ldr	r1, [pc, #228]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 800571e:	4313      	orrs	r3, r2
 8005720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005722:	e03a      	b.n	800579a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d020      	beq.n	800576e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800572c:	4b36      	ldr	r3, [pc, #216]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 800572e:	2201      	movs	r2, #1
 8005730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005732:	f7fd ffe9 	bl	8003708 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800573a:	f7fd ffe5 	bl	8003708 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e19b      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574c:	4b2d      	ldr	r3, [pc, #180]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0f0      	beq.n	800573a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005758:	4b2a      	ldr	r3, [pc, #168]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4927      	ldr	r1, [pc, #156]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]
 800576c:	e015      	b.n	800579a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800576e:	4b26      	ldr	r3, [pc, #152]	; (8005808 <HAL_RCC_OscConfig+0x270>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005774:	f7fd ffc8 	bl	8003708 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800577c:	f7fd ffc4 	bl	8003708 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e17a      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578e:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d03a      	beq.n	800581c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d019      	beq.n	80057e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ae:	4b17      	ldr	r3, [pc, #92]	; (800580c <HAL_RCC_OscConfig+0x274>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b4:	f7fd ffa8 	bl	8003708 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057bc:	f7fd ffa4 	bl	8003708 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e15a      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ce:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <HAL_RCC_OscConfig+0x26c>)
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80057da:	2001      	movs	r0, #1
 80057dc:	f000 fada 	bl	8005d94 <RCC_Delay>
 80057e0:	e01c      	b.n	800581c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057e2:	4b0a      	ldr	r3, [pc, #40]	; (800580c <HAL_RCC_OscConfig+0x274>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e8:	f7fd ff8e 	bl	8003708 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057ee:	e00f      	b.n	8005810 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f0:	f7fd ff8a 	bl	8003708 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d908      	bls.n	8005810 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e140      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000
 8005808:	42420000 	.word	0x42420000
 800580c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005810:	4b9e      	ldr	r3, [pc, #632]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e9      	bne.n	80057f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80a6 	beq.w	8005976 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800582a:	2300      	movs	r3, #0
 800582c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800582e:	4b97      	ldr	r3, [pc, #604]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10d      	bne.n	8005856 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800583a:	4b94      	ldr	r3, [pc, #592]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	4a93      	ldr	r2, [pc, #588]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 8005840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005844:	61d3      	str	r3, [r2, #28]
 8005846:	4b91      	ldr	r3, [pc, #580]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005852:	2301      	movs	r3, #1
 8005854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005856:	4b8e      	ldr	r3, [pc, #568]	; (8005a90 <HAL_RCC_OscConfig+0x4f8>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585e:	2b00      	cmp	r3, #0
 8005860:	d118      	bne.n	8005894 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005862:	4b8b      	ldr	r3, [pc, #556]	; (8005a90 <HAL_RCC_OscConfig+0x4f8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a8a      	ldr	r2, [pc, #552]	; (8005a90 <HAL_RCC_OscConfig+0x4f8>)
 8005868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800586e:	f7fd ff4b 	bl	8003708 <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005876:	f7fd ff47 	bl	8003708 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b64      	cmp	r3, #100	; 0x64
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e0fd      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005888:	4b81      	ldr	r3, [pc, #516]	; (8005a90 <HAL_RCC_OscConfig+0x4f8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0f0      	beq.n	8005876 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d106      	bne.n	80058aa <HAL_RCC_OscConfig+0x312>
 800589c:	4b7b      	ldr	r3, [pc, #492]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	4a7a      	ldr	r2, [pc, #488]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	6213      	str	r3, [r2, #32]
 80058a8:	e02d      	b.n	8005906 <HAL_RCC_OscConfig+0x36e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10c      	bne.n	80058cc <HAL_RCC_OscConfig+0x334>
 80058b2:	4b76      	ldr	r3, [pc, #472]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	4a75      	ldr	r2, [pc, #468]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80058b8:	f023 0301 	bic.w	r3, r3, #1
 80058bc:	6213      	str	r3, [r2, #32]
 80058be:	4b73      	ldr	r3, [pc, #460]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	4a72      	ldr	r2, [pc, #456]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80058c4:	f023 0304 	bic.w	r3, r3, #4
 80058c8:	6213      	str	r3, [r2, #32]
 80058ca:	e01c      	b.n	8005906 <HAL_RCC_OscConfig+0x36e>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b05      	cmp	r3, #5
 80058d2:	d10c      	bne.n	80058ee <HAL_RCC_OscConfig+0x356>
 80058d4:	4b6d      	ldr	r3, [pc, #436]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	4a6c      	ldr	r2, [pc, #432]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80058da:	f043 0304 	orr.w	r3, r3, #4
 80058de:	6213      	str	r3, [r2, #32]
 80058e0:	4b6a      	ldr	r3, [pc, #424]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	4a69      	ldr	r2, [pc, #420]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80058e6:	f043 0301 	orr.w	r3, r3, #1
 80058ea:	6213      	str	r3, [r2, #32]
 80058ec:	e00b      	b.n	8005906 <HAL_RCC_OscConfig+0x36e>
 80058ee:	4b67      	ldr	r3, [pc, #412]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	4a66      	ldr	r2, [pc, #408]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80058f4:	f023 0301 	bic.w	r3, r3, #1
 80058f8:	6213      	str	r3, [r2, #32]
 80058fa:	4b64      	ldr	r3, [pc, #400]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	4a63      	ldr	r2, [pc, #396]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 8005900:	f023 0304 	bic.w	r3, r3, #4
 8005904:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d015      	beq.n	800593a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800590e:	f7fd fefb 	bl	8003708 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005914:	e00a      	b.n	800592c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005916:	f7fd fef7 	bl	8003708 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	f241 3288 	movw	r2, #5000	; 0x1388
 8005924:	4293      	cmp	r3, r2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e0ab      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592c:	4b57      	ldr	r3, [pc, #348]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0ee      	beq.n	8005916 <HAL_RCC_OscConfig+0x37e>
 8005938:	e014      	b.n	8005964 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800593a:	f7fd fee5 	bl	8003708 <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005940:	e00a      	b.n	8005958 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005942:	f7fd fee1 	bl	8003708 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005950:	4293      	cmp	r3, r2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e095      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005958:	4b4c      	ldr	r3, [pc, #304]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1ee      	bne.n	8005942 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005964:	7dfb      	ldrb	r3, [r7, #23]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d105      	bne.n	8005976 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800596a:	4b48      	ldr	r3, [pc, #288]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	4a47      	ldr	r2, [pc, #284]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 8005970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005974:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8081 	beq.w	8005a82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005980:	4b42      	ldr	r3, [pc, #264]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 030c 	and.w	r3, r3, #12
 8005988:	2b08      	cmp	r3, #8
 800598a:	d061      	beq.n	8005a50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d146      	bne.n	8005a22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005994:	4b3f      	ldr	r3, [pc, #252]	; (8005a94 <HAL_RCC_OscConfig+0x4fc>)
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599a:	f7fd feb5 	bl	8003708 <HAL_GetTick>
 800599e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059a0:	e008      	b.n	80059b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a2:	f7fd feb1 	bl	8003708 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e067      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059b4:	4b35      	ldr	r3, [pc, #212]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1f0      	bne.n	80059a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c8:	d108      	bne.n	80059dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80059ca:	4b30      	ldr	r3, [pc, #192]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	492d      	ldr	r1, [pc, #180]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059dc:	4b2b      	ldr	r3, [pc, #172]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a19      	ldr	r1, [r3, #32]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	430b      	orrs	r3, r1
 80059ee:	4927      	ldr	r1, [pc, #156]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f4:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <HAL_RCC_OscConfig+0x4fc>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fa:	f7fd fe85 	bl	8003708 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a02:	f7fd fe81 	bl	8003708 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e037      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a14:	4b1d      	ldr	r3, [pc, #116]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f0      	beq.n	8005a02 <HAL_RCC_OscConfig+0x46a>
 8005a20:	e02f      	b.n	8005a82 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <HAL_RCC_OscConfig+0x4fc>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a28:	f7fd fe6e 	bl	8003708 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a30:	f7fd fe6a 	bl	8003708 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e020      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a42:	4b12      	ldr	r3, [pc, #72]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f0      	bne.n	8005a30 <HAL_RCC_OscConfig+0x498>
 8005a4e:	e018      	b.n	8005a82 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e013      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a5c:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <HAL_RCC_OscConfig+0x4f4>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d106      	bne.n	8005a7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d001      	beq.n	8005a82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	40007000 	.word	0x40007000
 8005a94:	42420060 	.word	0x42420060

08005a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0d0      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aac:	4b6a      	ldr	r3, [pc, #424]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d910      	bls.n	8005adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aba:	4b67      	ldr	r3, [pc, #412]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 0207 	bic.w	r2, r3, #7
 8005ac2:	4965      	ldr	r1, [pc, #404]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	4b63      	ldr	r3, [pc, #396]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d001      	beq.n	8005adc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0b8      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d020      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005af4:	4b59      	ldr	r3, [pc, #356]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	4a58      	ldr	r2, [pc, #352]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005afa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005afe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b0c:	4b53      	ldr	r3, [pc, #332]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4a52      	ldr	r2, [pc, #328]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b18:	4b50      	ldr	r3, [pc, #320]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	494d      	ldr	r1, [pc, #308]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d040      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d107      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3e:	4b47      	ldr	r3, [pc, #284]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d115      	bne.n	8005b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e07f      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d107      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b56:	4b41      	ldr	r3, [pc, #260]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e073      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b66:	4b3d      	ldr	r3, [pc, #244]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e06b      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b76:	4b39      	ldr	r3, [pc, #228]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f023 0203 	bic.w	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4936      	ldr	r1, [pc, #216]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b88:	f7fd fdbe 	bl	8003708 <HAL_GetTick>
 8005b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b90:	f7fd fdba 	bl	8003708 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e053      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba6:	4b2d      	ldr	r3, [pc, #180]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f003 020c 	and.w	r2, r3, #12
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d1eb      	bne.n	8005b90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb8:	4b27      	ldr	r3, [pc, #156]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d210      	bcs.n	8005be8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc6:	4b24      	ldr	r3, [pc, #144]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 0207 	bic.w	r2, r3, #7
 8005bce:	4922      	ldr	r1, [pc, #136]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd6:	4b20      	ldr	r3, [pc, #128]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d001      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e032      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf4:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	4916      	ldr	r1, [pc, #88]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	490e      	ldr	r1, [pc, #56]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c26:	f000 f821 	bl	8005c6c <HAL_RCC_GetSysClockFreq>
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	091b      	lsrs	r3, r3, #4
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	4a0a      	ldr	r2, [pc, #40]	; (8005c60 <HAL_RCC_ClockConfig+0x1c8>)
 8005c38:	5cd3      	ldrb	r3, [r2, r3]
 8005c3a:	fa21 f303 	lsr.w	r3, r1, r3
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <HAL_RCC_ClockConfig+0x1cc>)
 8005c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c42:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <HAL_RCC_ClockConfig+0x1d0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fd fd1c 	bl	8003684 <HAL_InitTick>

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40022000 	.word	0x40022000
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	08009880 	.word	0x08009880
 8005c64:	200000b8 	.word	0x200000b8
 8005c68:	200000bc 	.word	0x200000bc

08005c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c6c:	b490      	push	{r4, r7}
 8005c6e:	b08a      	sub	sp, #40	; 0x28
 8005c70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005c72:	4b2a      	ldr	r3, [pc, #168]	; (8005d1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c74:	1d3c      	adds	r4, r7, #4
 8005c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005c7c:	4b28      	ldr	r3, [pc, #160]	; (8005d20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c8e:	2300      	movs	r3, #0
 8005c90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c96:	4b23      	ldr	r3, [pc, #140]	; (8005d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f003 030c 	and.w	r3, r3, #12
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d002      	beq.n	8005cac <HAL_RCC_GetSysClockFreq+0x40>
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d003      	beq.n	8005cb2 <HAL_RCC_GetSysClockFreq+0x46>
 8005caa:	e02d      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cac:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cae:	623b      	str	r3, [r7, #32]
      break;
 8005cb0:	e02d      	b.n	8005d0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	0c9b      	lsrs	r3, r3, #18
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005cc4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d013      	beq.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005cd0:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	0c5b      	lsrs	r3, r3, #17
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005cde:	4413      	add	r3, r2
 8005ce0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005ce4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4a0f      	ldr	r2, [pc, #60]	; (8005d28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cea:	fb02 f203 	mul.w	r2, r2, r3
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf6:	e004      	b.n	8005d02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	4a0c      	ldr	r2, [pc, #48]	; (8005d2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	623b      	str	r3, [r7, #32]
      break;
 8005d06:	e002      	b.n	8005d0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d08:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d0a:	623b      	str	r3, [r7, #32]
      break;
 8005d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3728      	adds	r7, #40	; 0x28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bc90      	pop	{r4, r7}
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	08009854 	.word	0x08009854
 8005d20:	08009864 	.word	0x08009864
 8005d24:	40021000 	.word	0x40021000
 8005d28:	007a1200 	.word	0x007a1200
 8005d2c:	003d0900 	.word	0x003d0900

08005d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d34:	4b02      	ldr	r3, [pc, #8]	; (8005d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d36:	681b      	ldr	r3, [r3, #0]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr
 8005d40:	200000b8 	.word	0x200000b8

08005d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d48:	f7ff fff2 	bl	8005d30 <HAL_RCC_GetHCLKFreq>
 8005d4c:	4601      	mov	r1, r0
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4a03      	ldr	r2, [pc, #12]	; (8005d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d5a:	5cd3      	ldrb	r3, [r2, r3]
 8005d5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40021000 	.word	0x40021000
 8005d68:	08009890 	.word	0x08009890

08005d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d70:	f7ff ffde 	bl	8005d30 <HAL_RCC_GetHCLKFreq>
 8005d74:	4601      	mov	r1, r0
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	0adb      	lsrs	r3, r3, #11
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	4a03      	ldr	r2, [pc, #12]	; (8005d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d82:	5cd3      	ldrb	r3, [r2, r3]
 8005d84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	08009890 	.word	0x08009890

08005d94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <RCC_Delay+0x34>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a0a      	ldr	r2, [pc, #40]	; (8005dcc <RCC_Delay+0x38>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	0a5b      	lsrs	r3, r3, #9
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005db0:	bf00      	nop
  }
  while (Delay --);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1e5a      	subs	r2, r3, #1
 8005db6:	60fa      	str	r2, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1f9      	bne.n	8005db0 <RCC_Delay+0x1c>
}
 8005dbc:	bf00      	nop
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	200000b8 	.word	0x200000b8
 8005dcc:	10624dd3 	.word	0x10624dd3

08005dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d07d      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005dec:	2300      	movs	r3, #0
 8005dee:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005df0:	4b4f      	ldr	r3, [pc, #316]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dfc:	4b4c      	ldr	r3, [pc, #304]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	4a4b      	ldr	r2, [pc, #300]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e06:	61d3      	str	r3, [r2, #28]
 8005e08:	4b49      	ldr	r3, [pc, #292]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e14:	2301      	movs	r3, #1
 8005e16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e18:	4b46      	ldr	r3, [pc, #280]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d118      	bne.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e24:	4b43      	ldr	r3, [pc, #268]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a42      	ldr	r2, [pc, #264]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e30:	f7fd fc6a 	bl	8003708 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e36:	e008      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e38:	f7fd fc66 	bl	8003708 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b64      	cmp	r3, #100	; 0x64
 8005e44:	d901      	bls.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e06d      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4a:	4b3a      	ldr	r3, [pc, #232]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e56:	4b36      	ldr	r3, [pc, #216]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d02e      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d027      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e74:	4b2e      	ldr	r3, [pc, #184]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e7e:	4b2e      	ldr	r3, [pc, #184]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e84:	4b2c      	ldr	r3, [pc, #176]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e8a:	4a29      	ldr	r2, [pc, #164]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d014      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e9a:	f7fd fc35 	bl	8003708 <HAL_GetTick>
 8005e9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea0:	e00a      	b.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea2:	f7fd fc31 	bl	8003708 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e036      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eb8:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ee      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ec4:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	4917      	ldr	r1, [pc, #92]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d105      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005edc:	4b14      	ldr	r3, [pc, #80]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	4a13      	ldr	r2, [pc, #76]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ef4:	4b0e      	ldr	r3, [pc, #56]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	490b      	ldr	r1, [pc, #44]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d008      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f12:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	4904      	ldr	r1, [pc, #16]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40021000 	.word	0x40021000
 8005f34:	40007000 	.word	0x40007000
 8005f38:	42420440 	.word	0x42420440

08005f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e041      	b.n	8005fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fd fa2e 	bl	80033c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3304      	adds	r3, #4
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	f000 fb02 	bl	8006584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e041      	b.n	8006070 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d106      	bne.n	8006006 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f839 	bl	8006078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2202      	movs	r2, #2
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3304      	adds	r3, #4
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f000 fab3 	bl	8006584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr
	...

0800608c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d109      	bne.n	80060b0 <HAL_TIM_PWM_Start+0x24>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	bf14      	ite	ne
 80060a8:	2301      	movne	r3, #1
 80060aa:	2300      	moveq	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	e022      	b.n	80060f6 <HAL_TIM_PWM_Start+0x6a>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d109      	bne.n	80060ca <HAL_TIM_PWM_Start+0x3e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b01      	cmp	r3, #1
 80060c0:	bf14      	ite	ne
 80060c2:	2301      	movne	r3, #1
 80060c4:	2300      	moveq	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	e015      	b.n	80060f6 <HAL_TIM_PWM_Start+0x6a>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d109      	bne.n	80060e4 <HAL_TIM_PWM_Start+0x58>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	bf14      	ite	ne
 80060dc:	2301      	movne	r3, #1
 80060de:	2300      	moveq	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	e008      	b.n	80060f6 <HAL_TIM_PWM_Start+0x6a>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e05e      	b.n	80061bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <HAL_TIM_PWM_Start+0x82>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800610c:	e013      	b.n	8006136 <HAL_TIM_PWM_Start+0xaa>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b04      	cmp	r3, #4
 8006112:	d104      	bne.n	800611e <HAL_TIM_PWM_Start+0x92>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800611c:	e00b      	b.n	8006136 <HAL_TIM_PWM_Start+0xaa>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b08      	cmp	r3, #8
 8006122:	d104      	bne.n	800612e <HAL_TIM_PWM_Start+0xa2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800612c:	e003      	b.n	8006136 <HAL_TIM_PWM_Start+0xaa>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2202      	movs	r2, #2
 8006132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2201      	movs	r2, #1
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fca0 	bl	8006a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1e      	ldr	r2, [pc, #120]	; (80061c4 <HAL_TIM_PWM_Start+0x138>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d107      	bne.n	800615e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800615c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a18      	ldr	r2, [pc, #96]	; (80061c4 <HAL_TIM_PWM_Start+0x138>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00e      	beq.n	8006186 <HAL_TIM_PWM_Start+0xfa>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006170:	d009      	beq.n	8006186 <HAL_TIM_PWM_Start+0xfa>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <HAL_TIM_PWM_Start+0x13c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_TIM_PWM_Start+0xfa>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a12      	ldr	r2, [pc, #72]	; (80061cc <HAL_TIM_PWM_Start+0x140>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d111      	bne.n	80061aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b06      	cmp	r3, #6
 8006196:	d010      	beq.n	80061ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f042 0201 	orr.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a8:	e007      	b.n	80061ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0201 	orr.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40012c00 	.word	0x40012c00
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40000800 	.word	0x40000800

080061d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2200      	movs	r2, #0
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fc4e 	bl	8006a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a29      	ldr	r2, [pc, #164]	; (8006294 <HAL_TIM_PWM_Stop+0xc4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d117      	bne.n	8006222 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6a1a      	ldr	r2, [r3, #32]
 80061f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80061fc:	4013      	ands	r3, r2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10f      	bne.n	8006222 <HAL_TIM_PWM_Stop+0x52>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6a1a      	ldr	r2, [r3, #32]
 8006208:	f240 4344 	movw	r3, #1092	; 0x444
 800620c:	4013      	ands	r3, r2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d107      	bne.n	8006222 <HAL_TIM_PWM_Stop+0x52>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006220:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	f241 1311 	movw	r3, #4369	; 0x1111
 800622c:	4013      	ands	r3, r2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10f      	bne.n	8006252 <HAL_TIM_PWM_Stop+0x82>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a1a      	ldr	r2, [r3, #32]
 8006238:	f240 4344 	movw	r3, #1092	; 0x444
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d107      	bne.n	8006252 <HAL_TIM_PWM_Stop+0x82>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0201 	bic.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <HAL_TIM_PWM_Stop+0x92>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006260:	e013      	b.n	800628a <HAL_TIM_PWM_Stop+0xba>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b04      	cmp	r3, #4
 8006266:	d104      	bne.n	8006272 <HAL_TIM_PWM_Stop+0xa2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006270:	e00b      	b.n	800628a <HAL_TIM_PWM_Stop+0xba>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b08      	cmp	r3, #8
 8006276:	d104      	bne.n	8006282 <HAL_TIM_PWM_Stop+0xb2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006280:	e003      	b.n	800628a <HAL_TIM_PWM_Stop+0xba>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40012c00 	.word	0x40012c00

08006298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e0ac      	b.n	800640c <HAL_TIM_PWM_ConfigChannel+0x174>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b0c      	cmp	r3, #12
 80062be:	f200 809f 	bhi.w	8006400 <HAL_TIM_PWM_ConfigChannel+0x168>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062fd 	.word	0x080062fd
 80062cc:	08006401 	.word	0x08006401
 80062d0:	08006401 	.word	0x08006401
 80062d4:	08006401 	.word	0x08006401
 80062d8:	0800633d 	.word	0x0800633d
 80062dc:	08006401 	.word	0x08006401
 80062e0:	08006401 	.word	0x08006401
 80062e4:	08006401 	.word	0x08006401
 80062e8:	0800637f 	.word	0x0800637f
 80062ec:	08006401 	.word	0x08006401
 80062f0:	08006401 	.word	0x08006401
 80062f4:	08006401 	.word	0x08006401
 80062f8:	080063bf 	.word	0x080063bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	4618      	mov	r0, r3
 8006304:	f000 f9a0 	bl	8006648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0208 	orr.w	r2, r2, #8
 8006316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0204 	bic.w	r2, r2, #4
 8006326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6999      	ldr	r1, [r3, #24]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	619a      	str	r2, [r3, #24]
      break;
 800633a:	e062      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	4618      	mov	r0, r3
 8006344:	f000 f9e6 	bl	8006714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6999      	ldr	r1, [r3, #24]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	021a      	lsls	r2, r3, #8
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	619a      	str	r2, [r3, #24]
      break;
 800637c:	e041      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fa2f 	bl	80067e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0208 	orr.w	r2, r2, #8
 8006398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0204 	bic.w	r2, r2, #4
 80063a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69d9      	ldr	r1, [r3, #28]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	61da      	str	r2, [r3, #28]
      break;
 80063bc:	e021      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68b9      	ldr	r1, [r7, #8]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 fa79 	bl	80068bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69da      	ldr	r2, [r3, #28]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69d9      	ldr	r1, [r3, #28]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	021a      	lsls	r2, r3, #8
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	61da      	str	r2, [r3, #28]
      break;
 80063fe:	e000      	b.n	8006402 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_TIM_ConfigClockSource+0x18>
 8006428:	2302      	movs	r3, #2
 800642a:	e0a6      	b.n	800657a <HAL_TIM_ConfigClockSource+0x166>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800644a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006452:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d067      	beq.n	8006534 <HAL_TIM_ConfigClockSource+0x120>
 8006464:	2b40      	cmp	r3, #64	; 0x40
 8006466:	d80b      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x6c>
 8006468:	2b10      	cmp	r3, #16
 800646a:	d073      	beq.n	8006554 <HAL_TIM_ConfigClockSource+0x140>
 800646c:	2b10      	cmp	r3, #16
 800646e:	d802      	bhi.n	8006476 <HAL_TIM_ConfigClockSource+0x62>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d06f      	beq.n	8006554 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006474:	e078      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006476:	2b20      	cmp	r3, #32
 8006478:	d06c      	beq.n	8006554 <HAL_TIM_ConfigClockSource+0x140>
 800647a:	2b30      	cmp	r3, #48	; 0x30
 800647c:	d06a      	beq.n	8006554 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800647e:	e073      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006480:	2b70      	cmp	r3, #112	; 0x70
 8006482:	d00d      	beq.n	80064a0 <HAL_TIM_ConfigClockSource+0x8c>
 8006484:	2b70      	cmp	r3, #112	; 0x70
 8006486:	d804      	bhi.n	8006492 <HAL_TIM_ConfigClockSource+0x7e>
 8006488:	2b50      	cmp	r3, #80	; 0x50
 800648a:	d033      	beq.n	80064f4 <HAL_TIM_ConfigClockSource+0xe0>
 800648c:	2b60      	cmp	r3, #96	; 0x60
 800648e:	d041      	beq.n	8006514 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006490:	e06a      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006496:	d066      	beq.n	8006566 <HAL_TIM_ConfigClockSource+0x152>
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649c:	d017      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800649e:	e063      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	6899      	ldr	r1, [r3, #8]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f000 fac9 	bl	8006a46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	609a      	str	r2, [r3, #8]
      break;
 80064cc:	e04c      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6899      	ldr	r1, [r3, #8]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f000 fab2 	bl	8006a46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064f0:	609a      	str	r2, [r3, #8]
      break;
 80064f2:	e039      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	6859      	ldr	r1, [r3, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	461a      	mov	r2, r3
 8006502:	f000 fa29 	bl	8006958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2150      	movs	r1, #80	; 0x50
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fa80 	bl	8006a12 <TIM_ITRx_SetConfig>
      break;
 8006512:	e029      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	6859      	ldr	r1, [r3, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	461a      	mov	r2, r3
 8006522:	f000 fa47 	bl	80069b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2160      	movs	r1, #96	; 0x60
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fa70 	bl	8006a12 <TIM_ITRx_SetConfig>
      break;
 8006532:	e019      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	6859      	ldr	r1, [r3, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	461a      	mov	r2, r3
 8006542:	f000 fa09 	bl	8006958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2140      	movs	r1, #64	; 0x40
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fa60 	bl	8006a12 <TIM_ITRx_SetConfig>
      break;
 8006552:	e009      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f000 fa57 	bl	8006a12 <TIM_ITRx_SetConfig>
        break;
 8006564:	e000      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a29      	ldr	r2, [pc, #164]	; (800663c <TIM_Base_SetConfig+0xb8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00b      	beq.n	80065b4 <TIM_Base_SetConfig+0x30>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a2:	d007      	beq.n	80065b4 <TIM_Base_SetConfig+0x30>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a26      	ldr	r2, [pc, #152]	; (8006640 <TIM_Base_SetConfig+0xbc>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_Base_SetConfig+0x30>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a25      	ldr	r2, [pc, #148]	; (8006644 <TIM_Base_SetConfig+0xc0>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d108      	bne.n	80065c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a1c      	ldr	r2, [pc, #112]	; (800663c <TIM_Base_SetConfig+0xb8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00b      	beq.n	80065e6 <TIM_Base_SetConfig+0x62>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d4:	d007      	beq.n	80065e6 <TIM_Base_SetConfig+0x62>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a19      	ldr	r2, [pc, #100]	; (8006640 <TIM_Base_SetConfig+0xbc>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_Base_SetConfig+0x62>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a18      	ldr	r2, [pc, #96]	; (8006644 <TIM_Base_SetConfig+0xc0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d108      	bne.n	80065f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a07      	ldr	r2, [pc, #28]	; (800663c <TIM_Base_SetConfig+0xb8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d103      	bne.n	800662c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	615a      	str	r2, [r3, #20]
}
 8006632:	bf00      	nop
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr
 800663c:	40012c00 	.word	0x40012c00
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800

08006648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f023 0201 	bic.w	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0303 	bic.w	r3, r3, #3
 800667e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f023 0302 	bic.w	r3, r3, #2
 8006690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a1c      	ldr	r2, [pc, #112]	; (8006710 <TIM_OC1_SetConfig+0xc8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d10c      	bne.n	80066be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f023 0308 	bic.w	r3, r3, #8
 80066aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f023 0304 	bic.w	r3, r3, #4
 80066bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a13      	ldr	r2, [pc, #76]	; (8006710 <TIM_OC1_SetConfig+0xc8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d111      	bne.n	80066ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	621a      	str	r2, [r3, #32]
}
 8006704:	bf00      	nop
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40012c00 	.word	0x40012c00

08006714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f023 0210 	bic.w	r2, r3, #16
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f023 0320 	bic.w	r3, r3, #32
 800675e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <TIM_OC2_SetConfig+0xd0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d10d      	bne.n	8006790 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800677a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800678e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a14      	ldr	r2, [pc, #80]	; (80067e4 <TIM_OC2_SetConfig+0xd0>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d113      	bne.n	80067c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800679e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	bc80      	pop	{r7}
 80067e2:	4770      	bx	lr
 80067e4:	40012c00 	.word	0x40012c00

080067e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0303 	bic.w	r3, r3, #3
 800681e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <TIM_OC3_SetConfig+0xd0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d10d      	bne.n	8006862 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800684c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a14      	ldr	r2, [pc, #80]	; (80068b8 <TIM_OC3_SetConfig+0xd0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d113      	bne.n	8006892 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	621a      	str	r2, [r3, #32]
}
 80068ac:	bf00      	nop
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40012c00 	.word	0x40012c00

080068bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	021b      	lsls	r3, r3, #8
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	031b      	lsls	r3, r3, #12
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a0f      	ldr	r2, [pc, #60]	; (8006954 <TIM_OC4_SetConfig+0x98>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d109      	bne.n	8006930 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006922:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	019b      	lsls	r3, r3, #6
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	621a      	str	r2, [r3, #32]
}
 800694a:	bf00      	nop
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr
 8006954:	40012c00 	.word	0x40012c00

08006958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f023 0201 	bic.w	r2, r3, #1
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f023 030a 	bic.w	r3, r3, #10
 8006994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr

080069b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	f023 0210 	bic.w	r2, r3, #16
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	031b      	lsls	r3, r3, #12
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	621a      	str	r2, [r3, #32]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f043 0307 	orr.w	r3, r3, #7
 8006a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	609a      	str	r2, [r3, #8]
}
 8006a3c:	bf00      	nop
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr

08006a46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b087      	sub	sp, #28
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	021a      	lsls	r2, r3, #8
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	609a      	str	r2, [r3, #8]
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	2201      	movs	r2, #1
 8006a98:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1a      	ldr	r2, [r3, #32]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	43db      	mvns	r3, r3
 8006aa6:	401a      	ands	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a1a      	ldr	r2, [r3, #32]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f003 031f 	and.w	r3, r3, #31
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8006abc:	431a      	orrs	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e046      	b.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a16      	ldr	r2, [pc, #88]	; (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00e      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b30:	d009      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a12      	ldr	r2, [pc, #72]	; (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d004      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a10      	ldr	r2, [pc, #64]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d10c      	bne.n	8006b60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bc80      	pop	{r7}
 8006b7a:	4770      	bx	lr
 8006b7c:	40012c00 	.word	0x40012c00
 8006b80:	40000400 	.word	0x40000400
 8006b84:	40000800 	.word	0x40000800

08006b88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e03d      	b.n	8006c20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr

08006c2a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e03f      	b.n	8006cbc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d106      	bne.n	8006c56 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7fc fc81 	bl	8003558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2224      	movs	r2, #36	; 0x24
 8006c5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f904 	bl	8006e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	691a      	ldr	r2, [r3, #16]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	695a      	ldr	r2, [r3, #20]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ca2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08a      	sub	sp, #40	; 0x28
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	603b      	str	r3, [r7, #0]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d17c      	bne.n	8006dde <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_UART_Transmit+0x2c>
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e075      	b.n	8006de0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_UART_Transmit+0x3e>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e06e      	b.n	8006de0 <HAL_UART_Transmit+0x11c>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2221      	movs	r2, #33	; 0x21
 8006d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006d18:	f7fc fcf6 	bl	8003708 <HAL_GetTick>
 8006d1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	88fa      	ldrh	r2, [r7, #6]
 8006d22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d32:	d108      	bne.n	8006d46 <HAL_UART_Transmit+0x82>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	61bb      	str	r3, [r7, #24]
 8006d44:	e003      	b.n	8006d4e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006d56:	e02a      	b.n	8006dae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2180      	movs	r1, #128	; 0x80
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f840 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e036      	b.n	8006de0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10b      	bne.n	8006d90 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d86:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	3302      	adds	r3, #2
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	e007      	b.n	8006da0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1cf      	bne.n	8006d58 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2140      	movs	r1, #64	; 0x40
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 f810 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e006      	b.n	8006de0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e000      	b.n	8006de0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006dde:	2302      	movs	r3, #2
  }
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3720      	adds	r7, #32
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df8:	e02c      	b.n	8006e54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d028      	beq.n	8006e54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e08:	f7fc fc7e 	bl	8003708 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d21d      	bcs.n	8006e54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	695a      	ldr	r2, [r3, #20]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0201 	bic.w	r2, r2, #1
 8006e36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e00f      	b.n	8006e74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	bf0c      	ite	eq
 8006e64:	2301      	moveq	r3, #1
 8006e66:	2300      	movne	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d0c3      	beq.n	8006dfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006eb6:	f023 030c 	bic.w	r3, r3, #12
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6812      	ldr	r2, [r2, #0]
 8006ebe:	68b9      	ldr	r1, [r7, #8]
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699a      	ldr	r2, [r3, #24]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a2c      	ldr	r2, [pc, #176]	; (8006f90 <UART_SetConfig+0x114>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d103      	bne.n	8006eec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006ee4:	f7fe ff42 	bl	8005d6c <HAL_RCC_GetPCLK2Freq>
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	e002      	b.n	8006ef2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006eec:	f7fe ff2a 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 8006ef0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	009a      	lsls	r2, r3, #2
 8006efc:	441a      	add	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f08:	4a22      	ldr	r2, [pc, #136]	; (8006f94 <UART_SetConfig+0x118>)
 8006f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0e:	095b      	lsrs	r3, r3, #5
 8006f10:	0119      	lsls	r1, r3, #4
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009a      	lsls	r2, r3, #2
 8006f1c:	441a      	add	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f28:	4b1a      	ldr	r3, [pc, #104]	; (8006f94 <UART_SetConfig+0x118>)
 8006f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	2064      	movs	r0, #100	; 0x64
 8006f32:	fb00 f303 	mul.w	r3, r0, r3
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	3332      	adds	r3, #50	; 0x32
 8006f3c:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <UART_SetConfig+0x118>)
 8006f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f48:	4419      	add	r1, r3
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009a      	lsls	r2, r3, #2
 8006f54:	441a      	add	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f60:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <UART_SetConfig+0x118>)
 8006f62:	fba3 0302 	umull	r0, r3, r3, r2
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	2064      	movs	r0, #100	; 0x64
 8006f6a:	fb00 f303 	mul.w	r3, r0, r3
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	011b      	lsls	r3, r3, #4
 8006f72:	3332      	adds	r3, #50	; 0x32
 8006f74:	4a07      	ldr	r2, [pc, #28]	; (8006f94 <UART_SetConfig+0x118>)
 8006f76:	fba2 2303 	umull	r2, r3, r2, r3
 8006f7a:	095b      	lsrs	r3, r3, #5
 8006f7c:	f003 020f 	and.w	r2, r3, #15
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	440a      	add	r2, r1
 8006f86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	40013800 	.word	0x40013800
 8006f94:	51eb851f 	.word	0x51eb851f

08006f98 <__errno>:
 8006f98:	4b01      	ldr	r3, [pc, #4]	; (8006fa0 <__errno+0x8>)
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	200000c4 	.word	0x200000c4

08006fa4 <__libc_init_array>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	2500      	movs	r5, #0
 8006fa8:	4e0c      	ldr	r6, [pc, #48]	; (8006fdc <__libc_init_array+0x38>)
 8006faa:	4c0d      	ldr	r4, [pc, #52]	; (8006fe0 <__libc_init_array+0x3c>)
 8006fac:	1ba4      	subs	r4, r4, r6
 8006fae:	10a4      	asrs	r4, r4, #2
 8006fb0:	42a5      	cmp	r5, r4
 8006fb2:	d109      	bne.n	8006fc8 <__libc_init_array+0x24>
 8006fb4:	f002 fc20 	bl	80097f8 <_init>
 8006fb8:	2500      	movs	r5, #0
 8006fba:	4e0a      	ldr	r6, [pc, #40]	; (8006fe4 <__libc_init_array+0x40>)
 8006fbc:	4c0a      	ldr	r4, [pc, #40]	; (8006fe8 <__libc_init_array+0x44>)
 8006fbe:	1ba4      	subs	r4, r4, r6
 8006fc0:	10a4      	asrs	r4, r4, #2
 8006fc2:	42a5      	cmp	r5, r4
 8006fc4:	d105      	bne.n	8006fd2 <__libc_init_array+0x2e>
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fcc:	4798      	blx	r3
 8006fce:	3501      	adds	r5, #1
 8006fd0:	e7ee      	b.n	8006fb0 <__libc_init_array+0xc>
 8006fd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fd6:	4798      	blx	r3
 8006fd8:	3501      	adds	r5, #1
 8006fda:	e7f2      	b.n	8006fc2 <__libc_init_array+0x1e>
 8006fdc:	08009b00 	.word	0x08009b00
 8006fe0:	08009b00 	.word	0x08009b00
 8006fe4:	08009b00 	.word	0x08009b00
 8006fe8:	08009b04 	.word	0x08009b04

08006fec <memset>:
 8006fec:	4603      	mov	r3, r0
 8006fee:	4402      	add	r2, r0
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d100      	bne.n	8006ff6 <memset+0xa>
 8006ff4:	4770      	bx	lr
 8006ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8006ffa:	e7f9      	b.n	8006ff0 <memset+0x4>
 8006ffc:	0000      	movs	r0, r0
	...

08007000 <atan>:
 8007000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	4bb6      	ldr	r3, [pc, #728]	; (80072e0 <atan+0x2e0>)
 8007006:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800700a:	429e      	cmp	r6, r3
 800700c:	4604      	mov	r4, r0
 800700e:	460d      	mov	r5, r1
 8007010:	468b      	mov	fp, r1
 8007012:	dd17      	ble.n	8007044 <atan+0x44>
 8007014:	4bb3      	ldr	r3, [pc, #716]	; (80072e4 <atan+0x2e4>)
 8007016:	429e      	cmp	r6, r3
 8007018:	dc01      	bgt.n	800701e <atan+0x1e>
 800701a:	d109      	bne.n	8007030 <atan+0x30>
 800701c:	b140      	cbz	r0, 8007030 <atan+0x30>
 800701e:	4622      	mov	r2, r4
 8007020:	462b      	mov	r3, r5
 8007022:	4620      	mov	r0, r4
 8007024:	4629      	mov	r1, r5
 8007026:	f7f9 f899 	bl	800015c <__adddf3>
 800702a:	4604      	mov	r4, r0
 800702c:	460d      	mov	r5, r1
 800702e:	e005      	b.n	800703c <atan+0x3c>
 8007030:	f1bb 0f00 	cmp.w	fp, #0
 8007034:	4cac      	ldr	r4, [pc, #688]	; (80072e8 <atan+0x2e8>)
 8007036:	f340 8121 	ble.w	800727c <atan+0x27c>
 800703a:	4dac      	ldr	r5, [pc, #688]	; (80072ec <atan+0x2ec>)
 800703c:	4620      	mov	r0, r4
 800703e:	4629      	mov	r1, r5
 8007040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007044:	4baa      	ldr	r3, [pc, #680]	; (80072f0 <atan+0x2f0>)
 8007046:	429e      	cmp	r6, r3
 8007048:	dc11      	bgt.n	800706e <atan+0x6e>
 800704a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800704e:	429e      	cmp	r6, r3
 8007050:	dc0a      	bgt.n	8007068 <atan+0x68>
 8007052:	a38b      	add	r3, pc, #556	; (adr r3, 8007280 <atan+0x280>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f7f9 f880 	bl	800015c <__adddf3>
 800705c:	2200      	movs	r2, #0
 800705e:	4ba5      	ldr	r3, [pc, #660]	; (80072f4 <atan+0x2f4>)
 8007060:	f7f9 fcc2 	bl	80009e8 <__aeabi_dcmpgt>
 8007064:	2800      	cmp	r0, #0
 8007066:	d1e9      	bne.n	800703c <atan+0x3c>
 8007068:	f04f 3aff 	mov.w	sl, #4294967295
 800706c:	e027      	b.n	80070be <atan+0xbe>
 800706e:	f000 f987 	bl	8007380 <fabs>
 8007072:	4ba1      	ldr	r3, [pc, #644]	; (80072f8 <atan+0x2f8>)
 8007074:	4604      	mov	r4, r0
 8007076:	429e      	cmp	r6, r3
 8007078:	460d      	mov	r5, r1
 800707a:	f300 80b8 	bgt.w	80071ee <atan+0x1ee>
 800707e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007082:	429e      	cmp	r6, r3
 8007084:	f300 809c 	bgt.w	80071c0 <atan+0x1c0>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	f7f9 f866 	bl	800015c <__adddf3>
 8007090:	2200      	movs	r2, #0
 8007092:	4b98      	ldr	r3, [pc, #608]	; (80072f4 <atan+0x2f4>)
 8007094:	f7f9 f860 	bl	8000158 <__aeabi_dsub>
 8007098:	2200      	movs	r2, #0
 800709a:	4606      	mov	r6, r0
 800709c:	460f      	mov	r7, r1
 800709e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070a2:	4620      	mov	r0, r4
 80070a4:	4629      	mov	r1, r5
 80070a6:	f7f9 f859 	bl	800015c <__adddf3>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	4630      	mov	r0, r6
 80070b0:	4639      	mov	r1, r7
 80070b2:	f7f9 fb33 	bl	800071c <__aeabi_ddiv>
 80070b6:	f04f 0a00 	mov.w	sl, #0
 80070ba:	4604      	mov	r4, r0
 80070bc:	460d      	mov	r5, r1
 80070be:	4622      	mov	r2, r4
 80070c0:	462b      	mov	r3, r5
 80070c2:	4620      	mov	r0, r4
 80070c4:	4629      	mov	r1, r5
 80070c6:	f7f9 f9ff 	bl	80004c8 <__aeabi_dmul>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4680      	mov	r8, r0
 80070d0:	4689      	mov	r9, r1
 80070d2:	f7f9 f9f9 	bl	80004c8 <__aeabi_dmul>
 80070d6:	a36c      	add	r3, pc, #432	; (adr r3, 8007288 <atan+0x288>)
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	4606      	mov	r6, r0
 80070de:	460f      	mov	r7, r1
 80070e0:	f7f9 f9f2 	bl	80004c8 <__aeabi_dmul>
 80070e4:	a36a      	add	r3, pc, #424	; (adr r3, 8007290 <atan+0x290>)
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f7f9 f837 	bl	800015c <__adddf3>
 80070ee:	4632      	mov	r2, r6
 80070f0:	463b      	mov	r3, r7
 80070f2:	f7f9 f9e9 	bl	80004c8 <__aeabi_dmul>
 80070f6:	a368      	add	r3, pc, #416	; (adr r3, 8007298 <atan+0x298>)
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f7f9 f82e 	bl	800015c <__adddf3>
 8007100:	4632      	mov	r2, r6
 8007102:	463b      	mov	r3, r7
 8007104:	f7f9 f9e0 	bl	80004c8 <__aeabi_dmul>
 8007108:	a365      	add	r3, pc, #404	; (adr r3, 80072a0 <atan+0x2a0>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f7f9 f825 	bl	800015c <__adddf3>
 8007112:	4632      	mov	r2, r6
 8007114:	463b      	mov	r3, r7
 8007116:	f7f9 f9d7 	bl	80004c8 <__aeabi_dmul>
 800711a:	a363      	add	r3, pc, #396	; (adr r3, 80072a8 <atan+0x2a8>)
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	f7f9 f81c 	bl	800015c <__adddf3>
 8007124:	4632      	mov	r2, r6
 8007126:	463b      	mov	r3, r7
 8007128:	f7f9 f9ce 	bl	80004c8 <__aeabi_dmul>
 800712c:	a360      	add	r3, pc, #384	; (adr r3, 80072b0 <atan+0x2b0>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 f813 	bl	800015c <__adddf3>
 8007136:	4642      	mov	r2, r8
 8007138:	464b      	mov	r3, r9
 800713a:	f7f9 f9c5 	bl	80004c8 <__aeabi_dmul>
 800713e:	a35e      	add	r3, pc, #376	; (adr r3, 80072b8 <atan+0x2b8>)
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	4680      	mov	r8, r0
 8007146:	4689      	mov	r9, r1
 8007148:	4630      	mov	r0, r6
 800714a:	4639      	mov	r1, r7
 800714c:	f7f9 f9bc 	bl	80004c8 <__aeabi_dmul>
 8007150:	a35b      	add	r3, pc, #364	; (adr r3, 80072c0 <atan+0x2c0>)
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	f7f8 ffff 	bl	8000158 <__aeabi_dsub>
 800715a:	4632      	mov	r2, r6
 800715c:	463b      	mov	r3, r7
 800715e:	f7f9 f9b3 	bl	80004c8 <__aeabi_dmul>
 8007162:	a359      	add	r3, pc, #356	; (adr r3, 80072c8 <atan+0x2c8>)
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f7f8 fff6 	bl	8000158 <__aeabi_dsub>
 800716c:	4632      	mov	r2, r6
 800716e:	463b      	mov	r3, r7
 8007170:	f7f9 f9aa 	bl	80004c8 <__aeabi_dmul>
 8007174:	a356      	add	r3, pc, #344	; (adr r3, 80072d0 <atan+0x2d0>)
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	f7f8 ffed 	bl	8000158 <__aeabi_dsub>
 800717e:	4632      	mov	r2, r6
 8007180:	463b      	mov	r3, r7
 8007182:	f7f9 f9a1 	bl	80004c8 <__aeabi_dmul>
 8007186:	a354      	add	r3, pc, #336	; (adr r3, 80072d8 <atan+0x2d8>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f7f8 ffe4 	bl	8000158 <__aeabi_dsub>
 8007190:	4632      	mov	r2, r6
 8007192:	463b      	mov	r3, r7
 8007194:	f7f9 f998 	bl	80004c8 <__aeabi_dmul>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4640      	mov	r0, r8
 800719e:	4649      	mov	r1, r9
 80071a0:	f7f8 ffdc 	bl	800015c <__adddf3>
 80071a4:	4622      	mov	r2, r4
 80071a6:	462b      	mov	r3, r5
 80071a8:	f7f9 f98e 	bl	80004c8 <__aeabi_dmul>
 80071ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	d144      	bne.n	8007240 <atan+0x240>
 80071b6:	4620      	mov	r0, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	f7f8 ffcd 	bl	8000158 <__aeabi_dsub>
 80071be:	e734      	b.n	800702a <atan+0x2a>
 80071c0:	2200      	movs	r2, #0
 80071c2:	4b4c      	ldr	r3, [pc, #304]	; (80072f4 <atan+0x2f4>)
 80071c4:	f7f8 ffc8 	bl	8000158 <__aeabi_dsub>
 80071c8:	2200      	movs	r2, #0
 80071ca:	4606      	mov	r6, r0
 80071cc:	460f      	mov	r7, r1
 80071ce:	4b49      	ldr	r3, [pc, #292]	; (80072f4 <atan+0x2f4>)
 80071d0:	4620      	mov	r0, r4
 80071d2:	4629      	mov	r1, r5
 80071d4:	f7f8 ffc2 	bl	800015c <__adddf3>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4630      	mov	r0, r6
 80071de:	4639      	mov	r1, r7
 80071e0:	f7f9 fa9c 	bl	800071c <__aeabi_ddiv>
 80071e4:	f04f 0a01 	mov.w	sl, #1
 80071e8:	4604      	mov	r4, r0
 80071ea:	460d      	mov	r5, r1
 80071ec:	e767      	b.n	80070be <atan+0xbe>
 80071ee:	4b43      	ldr	r3, [pc, #268]	; (80072fc <atan+0x2fc>)
 80071f0:	429e      	cmp	r6, r3
 80071f2:	dc1a      	bgt.n	800722a <atan+0x22a>
 80071f4:	2200      	movs	r2, #0
 80071f6:	4b42      	ldr	r3, [pc, #264]	; (8007300 <atan+0x300>)
 80071f8:	f7f8 ffae 	bl	8000158 <__aeabi_dsub>
 80071fc:	2200      	movs	r2, #0
 80071fe:	4606      	mov	r6, r0
 8007200:	460f      	mov	r7, r1
 8007202:	4b3f      	ldr	r3, [pc, #252]	; (8007300 <atan+0x300>)
 8007204:	4620      	mov	r0, r4
 8007206:	4629      	mov	r1, r5
 8007208:	f7f9 f95e 	bl	80004c8 <__aeabi_dmul>
 800720c:	2200      	movs	r2, #0
 800720e:	4b39      	ldr	r3, [pc, #228]	; (80072f4 <atan+0x2f4>)
 8007210:	f7f8 ffa4 	bl	800015c <__adddf3>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	4630      	mov	r0, r6
 800721a:	4639      	mov	r1, r7
 800721c:	f7f9 fa7e 	bl	800071c <__aeabi_ddiv>
 8007220:	f04f 0a02 	mov.w	sl, #2
 8007224:	4604      	mov	r4, r0
 8007226:	460d      	mov	r5, r1
 8007228:	e749      	b.n	80070be <atan+0xbe>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	2000      	movs	r0, #0
 8007230:	4934      	ldr	r1, [pc, #208]	; (8007304 <atan+0x304>)
 8007232:	f7f9 fa73 	bl	800071c <__aeabi_ddiv>
 8007236:	f04f 0a03 	mov.w	sl, #3
 800723a:	4604      	mov	r4, r0
 800723c:	460d      	mov	r5, r1
 800723e:	e73e      	b.n	80070be <atan+0xbe>
 8007240:	4b31      	ldr	r3, [pc, #196]	; (8007308 <atan+0x308>)
 8007242:	4e32      	ldr	r6, [pc, #200]	; (800730c <atan+0x30c>)
 8007244:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007248:	4456      	add	r6, sl
 800724a:	449a      	add	sl, r3
 800724c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007250:	f7f8 ff82 	bl	8000158 <__aeabi_dsub>
 8007254:	4622      	mov	r2, r4
 8007256:	462b      	mov	r3, r5
 8007258:	f7f8 ff7e 	bl	8000158 <__aeabi_dsub>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007264:	f7f8 ff78 	bl	8000158 <__aeabi_dsub>
 8007268:	f1bb 0f00 	cmp.w	fp, #0
 800726c:	4604      	mov	r4, r0
 800726e:	460d      	mov	r5, r1
 8007270:	f6bf aee4 	bge.w	800703c <atan+0x3c>
 8007274:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007278:	461d      	mov	r5, r3
 800727a:	e6df      	b.n	800703c <atan+0x3c>
 800727c:	4d24      	ldr	r5, [pc, #144]	; (8007310 <atan+0x310>)
 800727e:	e6dd      	b.n	800703c <atan+0x3c>
 8007280:	8800759c 	.word	0x8800759c
 8007284:	7e37e43c 	.word	0x7e37e43c
 8007288:	e322da11 	.word	0xe322da11
 800728c:	3f90ad3a 	.word	0x3f90ad3a
 8007290:	24760deb 	.word	0x24760deb
 8007294:	3fa97b4b 	.word	0x3fa97b4b
 8007298:	a0d03d51 	.word	0xa0d03d51
 800729c:	3fb10d66 	.word	0x3fb10d66
 80072a0:	c54c206e 	.word	0xc54c206e
 80072a4:	3fb745cd 	.word	0x3fb745cd
 80072a8:	920083ff 	.word	0x920083ff
 80072ac:	3fc24924 	.word	0x3fc24924
 80072b0:	5555550d 	.word	0x5555550d
 80072b4:	3fd55555 	.word	0x3fd55555
 80072b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80072bc:	bfa2b444 	.word	0xbfa2b444
 80072c0:	52defd9a 	.word	0x52defd9a
 80072c4:	3fadde2d 	.word	0x3fadde2d
 80072c8:	af749a6d 	.word	0xaf749a6d
 80072cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80072d0:	fe231671 	.word	0xfe231671
 80072d4:	3fbc71c6 	.word	0x3fbc71c6
 80072d8:	9998ebc4 	.word	0x9998ebc4
 80072dc:	3fc99999 	.word	0x3fc99999
 80072e0:	440fffff 	.word	0x440fffff
 80072e4:	7ff00000 	.word	0x7ff00000
 80072e8:	54442d18 	.word	0x54442d18
 80072ec:	3ff921fb 	.word	0x3ff921fb
 80072f0:	3fdbffff 	.word	0x3fdbffff
 80072f4:	3ff00000 	.word	0x3ff00000
 80072f8:	3ff2ffff 	.word	0x3ff2ffff
 80072fc:	40037fff 	.word	0x40037fff
 8007300:	3ff80000 	.word	0x3ff80000
 8007304:	bff00000 	.word	0xbff00000
 8007308:	080098b8 	.word	0x080098b8
 800730c:	08009898 	.word	0x08009898
 8007310:	bff921fb 	.word	0xbff921fb

08007314 <cos>:
 8007314:	b530      	push	{r4, r5, lr}
 8007316:	4a18      	ldr	r2, [pc, #96]	; (8007378 <cos+0x64>)
 8007318:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800731c:	4293      	cmp	r3, r2
 800731e:	b087      	sub	sp, #28
 8007320:	dc04      	bgt.n	800732c <cos+0x18>
 8007322:	2200      	movs	r2, #0
 8007324:	2300      	movs	r3, #0
 8007326:	f001 fc13 	bl	8008b50 <__kernel_cos>
 800732a:	e006      	b.n	800733a <cos+0x26>
 800732c:	4a13      	ldr	r2, [pc, #76]	; (800737c <cos+0x68>)
 800732e:	4293      	cmp	r3, r2
 8007330:	dd05      	ble.n	800733e <cos+0x2a>
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	f7f8 ff0f 	bl	8000158 <__aeabi_dsub>
 800733a:	b007      	add	sp, #28
 800733c:	bd30      	pop	{r4, r5, pc}
 800733e:	aa02      	add	r2, sp, #8
 8007340:	f001 f96a 	bl	8008618 <__ieee754_rem_pio2>
 8007344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007348:	f000 0403 	and.w	r4, r0, #3
 800734c:	2c01      	cmp	r4, #1
 800734e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007352:	d008      	beq.n	8007366 <cos+0x52>
 8007354:	2c02      	cmp	r4, #2
 8007356:	d00c      	beq.n	8007372 <cos+0x5e>
 8007358:	2c00      	cmp	r4, #0
 800735a:	d0e4      	beq.n	8007326 <cos+0x12>
 800735c:	2401      	movs	r4, #1
 800735e:	9400      	str	r4, [sp, #0]
 8007360:	f001 fffe 	bl	8009360 <__kernel_sin>
 8007364:	e7e9      	b.n	800733a <cos+0x26>
 8007366:	9400      	str	r4, [sp, #0]
 8007368:	f001 fffa 	bl	8009360 <__kernel_sin>
 800736c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007370:	e7e3      	b.n	800733a <cos+0x26>
 8007372:	f001 fbed 	bl	8008b50 <__kernel_cos>
 8007376:	e7f9      	b.n	800736c <cos+0x58>
 8007378:	3fe921fb 	.word	0x3fe921fb
 800737c:	7fefffff 	.word	0x7fefffff

08007380 <fabs>:
 8007380:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007384:	4619      	mov	r1, r3
 8007386:	4770      	bx	lr

08007388 <sin>:
 8007388:	b530      	push	{r4, r5, lr}
 800738a:	4a1a      	ldr	r2, [pc, #104]	; (80073f4 <sin+0x6c>)
 800738c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007390:	4293      	cmp	r3, r2
 8007392:	b087      	sub	sp, #28
 8007394:	dc06      	bgt.n	80073a4 <sin+0x1c>
 8007396:	2300      	movs	r3, #0
 8007398:	2200      	movs	r2, #0
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	2300      	movs	r3, #0
 800739e:	f001 ffdf 	bl	8009360 <__kernel_sin>
 80073a2:	e006      	b.n	80073b2 <sin+0x2a>
 80073a4:	4a14      	ldr	r2, [pc, #80]	; (80073f8 <sin+0x70>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	dd05      	ble.n	80073b6 <sin+0x2e>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	f7f8 fed3 	bl	8000158 <__aeabi_dsub>
 80073b2:	b007      	add	sp, #28
 80073b4:	bd30      	pop	{r4, r5, pc}
 80073b6:	aa02      	add	r2, sp, #8
 80073b8:	f001 f92e 	bl	8008618 <__ieee754_rem_pio2>
 80073bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073c0:	f000 0403 	and.w	r4, r0, #3
 80073c4:	2c01      	cmp	r4, #1
 80073c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ca:	d005      	beq.n	80073d8 <sin+0x50>
 80073cc:	2c02      	cmp	r4, #2
 80073ce:	d006      	beq.n	80073de <sin+0x56>
 80073d0:	b964      	cbnz	r4, 80073ec <sin+0x64>
 80073d2:	2401      	movs	r4, #1
 80073d4:	9400      	str	r4, [sp, #0]
 80073d6:	e7e2      	b.n	800739e <sin+0x16>
 80073d8:	f001 fbba 	bl	8008b50 <__kernel_cos>
 80073dc:	e7e9      	b.n	80073b2 <sin+0x2a>
 80073de:	2401      	movs	r4, #1
 80073e0:	9400      	str	r4, [sp, #0]
 80073e2:	f001 ffbd 	bl	8009360 <__kernel_sin>
 80073e6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80073ea:	e7e2      	b.n	80073b2 <sin+0x2a>
 80073ec:	f001 fbb0 	bl	8008b50 <__kernel_cos>
 80073f0:	e7f9      	b.n	80073e6 <sin+0x5e>
 80073f2:	bf00      	nop
 80073f4:	3fe921fb 	.word	0x3fe921fb
 80073f8:	7fefffff 	.word	0x7fefffff

080073fc <asin>:
 80073fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007400:	b08b      	sub	sp, #44	; 0x2c
 8007402:	4604      	mov	r4, r0
 8007404:	460d      	mov	r5, r1
 8007406:	f000 f9ff 	bl	8007808 <__ieee754_asin>
 800740a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80074a0 <asin+0xa4>
 800740e:	4606      	mov	r6, r0
 8007410:	f998 3000 	ldrsb.w	r3, [r8]
 8007414:	460f      	mov	r7, r1
 8007416:	3301      	adds	r3, #1
 8007418:	d036      	beq.n	8007488 <asin+0x8c>
 800741a:	4622      	mov	r2, r4
 800741c:	462b      	mov	r3, r5
 800741e:	4620      	mov	r0, r4
 8007420:	4629      	mov	r1, r5
 8007422:	f7f9 faeb 	bl	80009fc <__aeabi_dcmpun>
 8007426:	4681      	mov	r9, r0
 8007428:	2800      	cmp	r0, #0
 800742a:	d12d      	bne.n	8007488 <asin+0x8c>
 800742c:	4620      	mov	r0, r4
 800742e:	4629      	mov	r1, r5
 8007430:	f7ff ffa6 	bl	8007380 <fabs>
 8007434:	2200      	movs	r2, #0
 8007436:	4b17      	ldr	r3, [pc, #92]	; (8007494 <asin+0x98>)
 8007438:	f7f9 fad6 	bl	80009e8 <__aeabi_dcmpgt>
 800743c:	b320      	cbz	r0, 8007488 <asin+0x8c>
 800743e:	2301      	movs	r3, #1
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	4b15      	ldr	r3, [pc, #84]	; (8007498 <asin+0x9c>)
 8007444:	4815      	ldr	r0, [pc, #84]	; (800749c <asin+0xa0>)
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	f8cd 9020 	str.w	r9, [sp, #32]
 800744c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007450:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007454:	f002 f8c6 	bl	80095e4 <nan>
 8007458:	f998 3000 	ldrsb.w	r3, [r8]
 800745c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d104      	bne.n	800746e <asin+0x72>
 8007464:	f7ff fd98 	bl	8006f98 <__errno>
 8007468:	2321      	movs	r3, #33	; 0x21
 800746a:	6003      	str	r3, [r0, #0]
 800746c:	e004      	b.n	8007478 <asin+0x7c>
 800746e:	4668      	mov	r0, sp
 8007470:	f002 f8b6 	bl	80095e0 <matherr>
 8007474:	2800      	cmp	r0, #0
 8007476:	d0f5      	beq.n	8007464 <asin+0x68>
 8007478:	9b08      	ldr	r3, [sp, #32]
 800747a:	b11b      	cbz	r3, 8007484 <asin+0x88>
 800747c:	f7ff fd8c 	bl	8006f98 <__errno>
 8007480:	9b08      	ldr	r3, [sp, #32]
 8007482:	6003      	str	r3, [r0, #0]
 8007484:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8007488:	4630      	mov	r0, r6
 800748a:	4639      	mov	r1, r7
 800748c:	b00b      	add	sp, #44	; 0x2c
 800748e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007492:	bf00      	nop
 8007494:	3ff00000 	.word	0x3ff00000
 8007498:	080098d8 	.word	0x080098d8
 800749c:	080098dc 	.word	0x080098dc
 80074a0:	20000128 	.word	0x20000128

080074a4 <pow>:
 80074a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a8:	b08f      	sub	sp, #60	; 0x3c
 80074aa:	461d      	mov	r5, r3
 80074ac:	4680      	mov	r8, r0
 80074ae:	4689      	mov	r9, r1
 80074b0:	4614      	mov	r4, r2
 80074b2:	f000 fba5 	bl	8007c00 <__ieee754_pow>
 80074b6:	4fa1      	ldr	r7, [pc, #644]	; (800773c <pow+0x298>)
 80074b8:	e9cd 0100 	strd	r0, r1, [sp]
 80074bc:	f997 3000 	ldrsb.w	r3, [r7]
 80074c0:	463e      	mov	r6, r7
 80074c2:	9302      	str	r3, [sp, #8]
 80074c4:	3301      	adds	r3, #1
 80074c6:	d05f      	beq.n	8007588 <pow+0xe4>
 80074c8:	4622      	mov	r2, r4
 80074ca:	462b      	mov	r3, r5
 80074cc:	4620      	mov	r0, r4
 80074ce:	4629      	mov	r1, r5
 80074d0:	f7f9 fa94 	bl	80009fc <__aeabi_dcmpun>
 80074d4:	4682      	mov	sl, r0
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d156      	bne.n	8007588 <pow+0xe4>
 80074da:	4642      	mov	r2, r8
 80074dc:	464b      	mov	r3, r9
 80074de:	4640      	mov	r0, r8
 80074e0:	4649      	mov	r1, r9
 80074e2:	f7f9 fa8b 	bl	80009fc <__aeabi_dcmpun>
 80074e6:	9003      	str	r0, [sp, #12]
 80074e8:	b1e8      	cbz	r0, 8007526 <pow+0x82>
 80074ea:	2200      	movs	r2, #0
 80074ec:	2300      	movs	r3, #0
 80074ee:	4620      	mov	r0, r4
 80074f0:	4629      	mov	r1, r5
 80074f2:	f7f9 fa51 	bl	8000998 <__aeabi_dcmpeq>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d046      	beq.n	8007588 <pow+0xe4>
 80074fa:	2301      	movs	r3, #1
 80074fc:	2200      	movs	r2, #0
 80074fe:	9304      	str	r3, [sp, #16]
 8007500:	4b8f      	ldr	r3, [pc, #572]	; (8007740 <pow+0x29c>)
 8007502:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007506:	9305      	str	r3, [sp, #20]
 8007508:	4b8e      	ldr	r3, [pc, #568]	; (8007744 <pow+0x2a0>)
 800750a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800750e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007512:	9b02      	ldr	r3, [sp, #8]
 8007514:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d031      	beq.n	8007580 <pow+0xdc>
 800751c:	a804      	add	r0, sp, #16
 800751e:	f002 f85f 	bl	80095e0 <matherr>
 8007522:	bb38      	cbnz	r0, 8007574 <pow+0xd0>
 8007524:	e058      	b.n	80075d8 <pow+0x134>
 8007526:	f04f 0a00 	mov.w	sl, #0
 800752a:	f04f 0b00 	mov.w	fp, #0
 800752e:	4652      	mov	r2, sl
 8007530:	465b      	mov	r3, fp
 8007532:	4640      	mov	r0, r8
 8007534:	4649      	mov	r1, r9
 8007536:	f7f9 fa2f 	bl	8000998 <__aeabi_dcmpeq>
 800753a:	2800      	cmp	r0, #0
 800753c:	d051      	beq.n	80075e2 <pow+0x13e>
 800753e:	4652      	mov	r2, sl
 8007540:	465b      	mov	r3, fp
 8007542:	4620      	mov	r0, r4
 8007544:	4629      	mov	r1, r5
 8007546:	f7f9 fa27 	bl	8000998 <__aeabi_dcmpeq>
 800754a:	4606      	mov	r6, r0
 800754c:	b308      	cbz	r0, 8007592 <pow+0xee>
 800754e:	2301      	movs	r3, #1
 8007550:	9304      	str	r3, [sp, #16]
 8007552:	4b7b      	ldr	r3, [pc, #492]	; (8007740 <pow+0x29c>)
 8007554:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007558:	9305      	str	r3, [sp, #20]
 800755a:	9b03      	ldr	r3, [sp, #12]
 800755c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007560:	930c      	str	r3, [sp, #48]	; 0x30
 8007562:	9b02      	ldr	r3, [sp, #8]
 8007564:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0d7      	beq.n	800751c <pow+0x78>
 800756c:	2200      	movs	r2, #0
 800756e:	4b75      	ldr	r3, [pc, #468]	; (8007744 <pow+0x2a0>)
 8007570:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007576:	b11b      	cbz	r3, 8007580 <pow+0xdc>
 8007578:	f7ff fd0e 	bl	8006f98 <__errno>
 800757c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800757e:	6003      	str	r3, [r0, #0]
 8007580:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8007584:	e9cd 3400 	strd	r3, r4, [sp]
 8007588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800758c:	b00f      	add	sp, #60	; 0x3c
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007592:	4620      	mov	r0, r4
 8007594:	4629      	mov	r1, r5
 8007596:	f001 ff99 	bl	80094cc <finite>
 800759a:	2800      	cmp	r0, #0
 800759c:	d0f4      	beq.n	8007588 <pow+0xe4>
 800759e:	4652      	mov	r2, sl
 80075a0:	465b      	mov	r3, fp
 80075a2:	4620      	mov	r0, r4
 80075a4:	4629      	mov	r1, r5
 80075a6:	f7f9 fa01 	bl	80009ac <__aeabi_dcmplt>
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d0ec      	beq.n	8007588 <pow+0xe4>
 80075ae:	2301      	movs	r3, #1
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	4b63      	ldr	r3, [pc, #396]	; (8007740 <pow+0x29c>)
 80075b4:	960c      	str	r6, [sp, #48]	; 0x30
 80075b6:	9305      	str	r3, [sp, #20]
 80075b8:	f997 3000 	ldrsb.w	r3, [r7]
 80075bc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80075c0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80075c4:	b913      	cbnz	r3, 80075cc <pow+0x128>
 80075c6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80075ca:	e7a7      	b.n	800751c <pow+0x78>
 80075cc:	2000      	movs	r0, #0
 80075ce:	495e      	ldr	r1, [pc, #376]	; (8007748 <pow+0x2a4>)
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80075d6:	d1a1      	bne.n	800751c <pow+0x78>
 80075d8:	f7ff fcde 	bl	8006f98 <__errno>
 80075dc:	2321      	movs	r3, #33	; 0x21
 80075de:	6003      	str	r3, [r0, #0]
 80075e0:	e7c8      	b.n	8007574 <pow+0xd0>
 80075e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075e6:	f001 ff71 	bl	80094cc <finite>
 80075ea:	9002      	str	r0, [sp, #8]
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d177      	bne.n	80076e0 <pow+0x23c>
 80075f0:	4640      	mov	r0, r8
 80075f2:	4649      	mov	r1, r9
 80075f4:	f001 ff6a 	bl	80094cc <finite>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d071      	beq.n	80076e0 <pow+0x23c>
 80075fc:	4620      	mov	r0, r4
 80075fe:	4629      	mov	r1, r5
 8007600:	f001 ff64 	bl	80094cc <finite>
 8007604:	2800      	cmp	r0, #0
 8007606:	d06b      	beq.n	80076e0 <pow+0x23c>
 8007608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800760c:	4619      	mov	r1, r3
 800760e:	4610      	mov	r0, r2
 8007610:	f7f9 f9f4 	bl	80009fc <__aeabi_dcmpun>
 8007614:	f997 7000 	ldrsb.w	r7, [r7]
 8007618:	4b49      	ldr	r3, [pc, #292]	; (8007740 <pow+0x29c>)
 800761a:	b1a0      	cbz	r0, 8007646 <pow+0x1a2>
 800761c:	2201      	movs	r2, #1
 800761e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007622:	9b02      	ldr	r3, [sp, #8]
 8007624:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007628:	930c      	str	r3, [sp, #48]	; 0x30
 800762a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800762e:	2f00      	cmp	r7, #0
 8007630:	d0c9      	beq.n	80075c6 <pow+0x122>
 8007632:	4652      	mov	r2, sl
 8007634:	465b      	mov	r3, fp
 8007636:	4650      	mov	r0, sl
 8007638:	4659      	mov	r1, fp
 800763a:	f7f9 f86f 	bl	800071c <__aeabi_ddiv>
 800763e:	2f02      	cmp	r7, #2
 8007640:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007644:	e7c7      	b.n	80075d6 <pow+0x132>
 8007646:	2203      	movs	r2, #3
 8007648:	900c      	str	r0, [sp, #48]	; 0x30
 800764a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800764e:	4620      	mov	r0, r4
 8007650:	4629      	mov	r1, r5
 8007652:	2200      	movs	r2, #0
 8007654:	4b3d      	ldr	r3, [pc, #244]	; (800774c <pow+0x2a8>)
 8007656:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800765a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800765e:	f7f8 ff33 	bl	80004c8 <__aeabi_dmul>
 8007662:	4604      	mov	r4, r0
 8007664:	460d      	mov	r5, r1
 8007666:	bb17      	cbnz	r7, 80076ae <pow+0x20a>
 8007668:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800766c:	4b38      	ldr	r3, [pc, #224]	; (8007750 <pow+0x2ac>)
 800766e:	4640      	mov	r0, r8
 8007670:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007674:	4649      	mov	r1, r9
 8007676:	4652      	mov	r2, sl
 8007678:	465b      	mov	r3, fp
 800767a:	f7f9 f997 	bl	80009ac <__aeabi_dcmplt>
 800767e:	2800      	cmp	r0, #0
 8007680:	d054      	beq.n	800772c <pow+0x288>
 8007682:	4620      	mov	r0, r4
 8007684:	4629      	mov	r1, r5
 8007686:	f001 ffb3 	bl	80095f0 <rint>
 800768a:	4622      	mov	r2, r4
 800768c:	462b      	mov	r3, r5
 800768e:	f7f9 f983 	bl	8000998 <__aeabi_dcmpeq>
 8007692:	b920      	cbnz	r0, 800769e <pow+0x1fa>
 8007694:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007698:	4b2e      	ldr	r3, [pc, #184]	; (8007754 <pow+0x2b0>)
 800769a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800769e:	f996 3000 	ldrsb.w	r3, [r6]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d142      	bne.n	800772c <pow+0x288>
 80076a6:	f7ff fc77 	bl	8006f98 <__errno>
 80076aa:	2322      	movs	r3, #34	; 0x22
 80076ac:	e797      	b.n	80075de <pow+0x13a>
 80076ae:	2200      	movs	r2, #0
 80076b0:	4b29      	ldr	r3, [pc, #164]	; (8007758 <pow+0x2b4>)
 80076b2:	4640      	mov	r0, r8
 80076b4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80076b8:	4649      	mov	r1, r9
 80076ba:	4652      	mov	r2, sl
 80076bc:	465b      	mov	r3, fp
 80076be:	f7f9 f975 	bl	80009ac <__aeabi_dcmplt>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d0eb      	beq.n	800769e <pow+0x1fa>
 80076c6:	4620      	mov	r0, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	f001 ff91 	bl	80095f0 <rint>
 80076ce:	4622      	mov	r2, r4
 80076d0:	462b      	mov	r3, r5
 80076d2:	f7f9 f961 	bl	8000998 <__aeabi_dcmpeq>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d1e1      	bne.n	800769e <pow+0x1fa>
 80076da:	2200      	movs	r2, #0
 80076dc:	4b1a      	ldr	r3, [pc, #104]	; (8007748 <pow+0x2a4>)
 80076de:	e7dc      	b.n	800769a <pow+0x1f6>
 80076e0:	2200      	movs	r2, #0
 80076e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076e6:	2300      	movs	r3, #0
 80076e8:	f7f9 f956 	bl	8000998 <__aeabi_dcmpeq>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	f43f af4b 	beq.w	8007588 <pow+0xe4>
 80076f2:	4640      	mov	r0, r8
 80076f4:	4649      	mov	r1, r9
 80076f6:	f001 fee9 	bl	80094cc <finite>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f43f af44 	beq.w	8007588 <pow+0xe4>
 8007700:	4620      	mov	r0, r4
 8007702:	4629      	mov	r1, r5
 8007704:	f001 fee2 	bl	80094cc <finite>
 8007708:	2800      	cmp	r0, #0
 800770a:	f43f af3d 	beq.w	8007588 <pow+0xe4>
 800770e:	2304      	movs	r3, #4
 8007710:	9304      	str	r3, [sp, #16]
 8007712:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <pow+0x29c>)
 8007714:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8007718:	9305      	str	r3, [sp, #20]
 800771a:	2300      	movs	r3, #0
 800771c:	2400      	movs	r4, #0
 800771e:	930c      	str	r3, [sp, #48]	; 0x30
 8007720:	2300      	movs	r3, #0
 8007722:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007726:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800772a:	e7b8      	b.n	800769e <pow+0x1fa>
 800772c:	a804      	add	r0, sp, #16
 800772e:	f001 ff57 	bl	80095e0 <matherr>
 8007732:	2800      	cmp	r0, #0
 8007734:	f47f af1e 	bne.w	8007574 <pow+0xd0>
 8007738:	e7b5      	b.n	80076a6 <pow+0x202>
 800773a:	bf00      	nop
 800773c:	20000128 	.word	0x20000128
 8007740:	080098dd 	.word	0x080098dd
 8007744:	3ff00000 	.word	0x3ff00000
 8007748:	fff00000 	.word	0xfff00000
 800774c:	3fe00000 	.word	0x3fe00000
 8007750:	47efffff 	.word	0x47efffff
 8007754:	c7efffff 	.word	0xc7efffff
 8007758:	7ff00000 	.word	0x7ff00000

0800775c <sqrt>:
 800775c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007760:	b08b      	sub	sp, #44	; 0x2c
 8007762:	4604      	mov	r4, r0
 8007764:	460d      	mov	r5, r1
 8007766:	f001 f947 	bl	80089f8 <__ieee754_sqrt>
 800776a:	4b24      	ldr	r3, [pc, #144]	; (80077fc <sqrt+0xa0>)
 800776c:	4680      	mov	r8, r0
 800776e:	f993 a000 	ldrsb.w	sl, [r3]
 8007772:	4689      	mov	r9, r1
 8007774:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007778:	d02b      	beq.n	80077d2 <sqrt+0x76>
 800777a:	4622      	mov	r2, r4
 800777c:	462b      	mov	r3, r5
 800777e:	4620      	mov	r0, r4
 8007780:	4629      	mov	r1, r5
 8007782:	f7f9 f93b 	bl	80009fc <__aeabi_dcmpun>
 8007786:	4683      	mov	fp, r0
 8007788:	bb18      	cbnz	r0, 80077d2 <sqrt+0x76>
 800778a:	2600      	movs	r6, #0
 800778c:	2700      	movs	r7, #0
 800778e:	4632      	mov	r2, r6
 8007790:	463b      	mov	r3, r7
 8007792:	4620      	mov	r0, r4
 8007794:	4629      	mov	r1, r5
 8007796:	f7f9 f909 	bl	80009ac <__aeabi_dcmplt>
 800779a:	b1d0      	cbz	r0, 80077d2 <sqrt+0x76>
 800779c:	2301      	movs	r3, #1
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	4b17      	ldr	r3, [pc, #92]	; (8007800 <sqrt+0xa4>)
 80077a2:	f8cd b020 	str.w	fp, [sp, #32]
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80077ac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80077b0:	f1ba 0f00 	cmp.w	sl, #0
 80077b4:	d112      	bne.n	80077dc <sqrt+0x80>
 80077b6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80077ba:	4668      	mov	r0, sp
 80077bc:	f001 ff10 	bl	80095e0 <matherr>
 80077c0:	b1b8      	cbz	r0, 80077f2 <sqrt+0x96>
 80077c2:	9b08      	ldr	r3, [sp, #32]
 80077c4:	b11b      	cbz	r3, 80077ce <sqrt+0x72>
 80077c6:	f7ff fbe7 	bl	8006f98 <__errno>
 80077ca:	9b08      	ldr	r3, [sp, #32]
 80077cc:	6003      	str	r3, [r0, #0]
 80077ce:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80077d2:	4640      	mov	r0, r8
 80077d4:	4649      	mov	r1, r9
 80077d6:	b00b      	add	sp, #44	; 0x2c
 80077d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077dc:	4632      	mov	r2, r6
 80077de:	463b      	mov	r3, r7
 80077e0:	4630      	mov	r0, r6
 80077e2:	4639      	mov	r1, r7
 80077e4:	f7f8 ff9a 	bl	800071c <__aeabi_ddiv>
 80077e8:	f1ba 0f02 	cmp.w	sl, #2
 80077ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80077f0:	d1e3      	bne.n	80077ba <sqrt+0x5e>
 80077f2:	f7ff fbd1 	bl	8006f98 <__errno>
 80077f6:	2321      	movs	r3, #33	; 0x21
 80077f8:	6003      	str	r3, [r0, #0]
 80077fa:	e7e2      	b.n	80077c2 <sqrt+0x66>
 80077fc:	20000128 	.word	0x20000128
 8007800:	080098e1 	.word	0x080098e1
 8007804:	00000000 	.word	0x00000000

08007808 <__ieee754_asin>:
 8007808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780c:	4bc4      	ldr	r3, [pc, #784]	; (8007b20 <__ieee754_asin+0x318>)
 800780e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007812:	b087      	sub	sp, #28
 8007814:	429f      	cmp	r7, r3
 8007816:	4604      	mov	r4, r0
 8007818:	460d      	mov	r5, r1
 800781a:	9103      	str	r1, [sp, #12]
 800781c:	dd2a      	ble.n	8007874 <__ieee754_asin+0x6c>
 800781e:	4603      	mov	r3, r0
 8007820:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8007824:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8007828:	433b      	orrs	r3, r7
 800782a:	d114      	bne.n	8007856 <__ieee754_asin+0x4e>
 800782c:	a3a2      	add	r3, pc, #648	; (adr r3, 8007ab8 <__ieee754_asin+0x2b0>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f8 fe49 	bl	80004c8 <__aeabi_dmul>
 8007836:	a3a2      	add	r3, pc, #648	; (adr r3, 8007ac0 <__ieee754_asin+0x2b8>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	4606      	mov	r6, r0
 800783e:	460f      	mov	r7, r1
 8007840:	4620      	mov	r0, r4
 8007842:	4629      	mov	r1, r5
 8007844:	f7f8 fe40 	bl	80004c8 <__aeabi_dmul>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	4630      	mov	r0, r6
 800784e:	4639      	mov	r1, r7
 8007850:	f7f8 fc84 	bl	800015c <__adddf3>
 8007854:	e007      	b.n	8007866 <__ieee754_asin+0x5e>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	f7f8 fc7d 	bl	8000158 <__aeabi_dsub>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	f7f8 ff5b 	bl	800071c <__aeabi_ddiv>
 8007866:	4604      	mov	r4, r0
 8007868:	460d      	mov	r5, r1
 800786a:	4620      	mov	r0, r4
 800786c:	4629      	mov	r1, r5
 800786e:	b007      	add	sp, #28
 8007870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007874:	4bab      	ldr	r3, [pc, #684]	; (8007b24 <__ieee754_asin+0x31c>)
 8007876:	429f      	cmp	r7, r3
 8007878:	dc0e      	bgt.n	8007898 <__ieee754_asin+0x90>
 800787a:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800787e:	f280 80ab 	bge.w	80079d8 <__ieee754_asin+0x1d0>
 8007882:	a391      	add	r3, pc, #580	; (adr r3, 8007ac8 <__ieee754_asin+0x2c0>)
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f7f8 fc68 	bl	800015c <__adddf3>
 800788c:	2200      	movs	r2, #0
 800788e:	4ba6      	ldr	r3, [pc, #664]	; (8007b28 <__ieee754_asin+0x320>)
 8007890:	f7f9 f8aa 	bl	80009e8 <__aeabi_dcmpgt>
 8007894:	2800      	cmp	r0, #0
 8007896:	d1e8      	bne.n	800786a <__ieee754_asin+0x62>
 8007898:	4620      	mov	r0, r4
 800789a:	4629      	mov	r1, r5
 800789c:	f7ff fd70 	bl	8007380 <fabs>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	2000      	movs	r0, #0
 80078a6:	49a0      	ldr	r1, [pc, #640]	; (8007b28 <__ieee754_asin+0x320>)
 80078a8:	f7f8 fc56 	bl	8000158 <__aeabi_dsub>
 80078ac:	2200      	movs	r2, #0
 80078ae:	4b9f      	ldr	r3, [pc, #636]	; (8007b2c <__ieee754_asin+0x324>)
 80078b0:	f7f8 fe0a 	bl	80004c8 <__aeabi_dmul>
 80078b4:	a386      	add	r3, pc, #536	; (adr r3, 8007ad0 <__ieee754_asin+0x2c8>)
 80078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ba:	4604      	mov	r4, r0
 80078bc:	460d      	mov	r5, r1
 80078be:	f7f8 fe03 	bl	80004c8 <__aeabi_dmul>
 80078c2:	a385      	add	r3, pc, #532	; (adr r3, 8007ad8 <__ieee754_asin+0x2d0>)
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f7f8 fc48 	bl	800015c <__adddf3>
 80078cc:	4622      	mov	r2, r4
 80078ce:	462b      	mov	r3, r5
 80078d0:	f7f8 fdfa 	bl	80004c8 <__aeabi_dmul>
 80078d4:	a382      	add	r3, pc, #520	; (adr r3, 8007ae0 <__ieee754_asin+0x2d8>)
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	f7f8 fc3d 	bl	8000158 <__aeabi_dsub>
 80078de:	4622      	mov	r2, r4
 80078e0:	462b      	mov	r3, r5
 80078e2:	f7f8 fdf1 	bl	80004c8 <__aeabi_dmul>
 80078e6:	a380      	add	r3, pc, #512	; (adr r3, 8007ae8 <__ieee754_asin+0x2e0>)
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f7f8 fc36 	bl	800015c <__adddf3>
 80078f0:	4622      	mov	r2, r4
 80078f2:	462b      	mov	r3, r5
 80078f4:	f7f8 fde8 	bl	80004c8 <__aeabi_dmul>
 80078f8:	a37d      	add	r3, pc, #500	; (adr r3, 8007af0 <__ieee754_asin+0x2e8>)
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	f7f8 fc2b 	bl	8000158 <__aeabi_dsub>
 8007902:	4622      	mov	r2, r4
 8007904:	462b      	mov	r3, r5
 8007906:	f7f8 fddf 	bl	80004c8 <__aeabi_dmul>
 800790a:	a37b      	add	r3, pc, #492	; (adr r3, 8007af8 <__ieee754_asin+0x2f0>)
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	f7f8 fc24 	bl	800015c <__adddf3>
 8007914:	4622      	mov	r2, r4
 8007916:	462b      	mov	r3, r5
 8007918:	f7f8 fdd6 	bl	80004c8 <__aeabi_dmul>
 800791c:	a378      	add	r3, pc, #480	; (adr r3, 8007b00 <__ieee754_asin+0x2f8>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	4680      	mov	r8, r0
 8007924:	4689      	mov	r9, r1
 8007926:	4620      	mov	r0, r4
 8007928:	4629      	mov	r1, r5
 800792a:	f7f8 fdcd 	bl	80004c8 <__aeabi_dmul>
 800792e:	a376      	add	r3, pc, #472	; (adr r3, 8007b08 <__ieee754_asin+0x300>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f7f8 fc10 	bl	8000158 <__aeabi_dsub>
 8007938:	4622      	mov	r2, r4
 800793a:	462b      	mov	r3, r5
 800793c:	f7f8 fdc4 	bl	80004c8 <__aeabi_dmul>
 8007940:	a373      	add	r3, pc, #460	; (adr r3, 8007b10 <__ieee754_asin+0x308>)
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	f7f8 fc09 	bl	800015c <__adddf3>
 800794a:	4622      	mov	r2, r4
 800794c:	462b      	mov	r3, r5
 800794e:	f7f8 fdbb 	bl	80004c8 <__aeabi_dmul>
 8007952:	a371      	add	r3, pc, #452	; (adr r3, 8007b18 <__ieee754_asin+0x310>)
 8007954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007958:	f7f8 fbfe 	bl	8000158 <__aeabi_dsub>
 800795c:	4622      	mov	r2, r4
 800795e:	462b      	mov	r3, r5
 8007960:	f7f8 fdb2 	bl	80004c8 <__aeabi_dmul>
 8007964:	4b70      	ldr	r3, [pc, #448]	; (8007b28 <__ieee754_asin+0x320>)
 8007966:	2200      	movs	r2, #0
 8007968:	f7f8 fbf8 	bl	800015c <__adddf3>
 800796c:	e9cd 0100 	strd	r0, r1, [sp]
 8007970:	4620      	mov	r0, r4
 8007972:	4629      	mov	r1, r5
 8007974:	f001 f840 	bl	80089f8 <__ieee754_sqrt>
 8007978:	4b6d      	ldr	r3, [pc, #436]	; (8007b30 <__ieee754_asin+0x328>)
 800797a:	4682      	mov	sl, r0
 800797c:	429f      	cmp	r7, r3
 800797e:	468b      	mov	fp, r1
 8007980:	f340 80d8 	ble.w	8007b34 <__ieee754_asin+0x32c>
 8007984:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007988:	4640      	mov	r0, r8
 800798a:	4649      	mov	r1, r9
 800798c:	f7f8 fec6 	bl	800071c <__aeabi_ddiv>
 8007990:	4652      	mov	r2, sl
 8007992:	465b      	mov	r3, fp
 8007994:	f7f8 fd98 	bl	80004c8 <__aeabi_dmul>
 8007998:	4652      	mov	r2, sl
 800799a:	465b      	mov	r3, fp
 800799c:	f7f8 fbde 	bl	800015c <__adddf3>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	f7f8 fbda 	bl	800015c <__adddf3>
 80079a8:	a345      	add	r3, pc, #276	; (adr r3, 8007ac0 <__ieee754_asin+0x2b8>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f8 fbd3 	bl	8000158 <__aeabi_dsub>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	a140      	add	r1, pc, #256	; (adr r1, 8007ab8 <__ieee754_asin+0x2b0>)
 80079b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079bc:	f7f8 fbcc 	bl	8000158 <__aeabi_dsub>
 80079c0:	9b03      	ldr	r3, [sp, #12]
 80079c2:	4604      	mov	r4, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	bfdc      	itt	le
 80079c8:	4602      	movle	r2, r0
 80079ca:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80079ce:	460d      	mov	r5, r1
 80079d0:	bfdc      	itt	le
 80079d2:	4614      	movle	r4, r2
 80079d4:	461d      	movle	r5, r3
 80079d6:	e748      	b.n	800786a <__ieee754_asin+0x62>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	f7f8 fd74 	bl	80004c8 <__aeabi_dmul>
 80079e0:	a33b      	add	r3, pc, #236	; (adr r3, 8007ad0 <__ieee754_asin+0x2c8>)
 80079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e6:	4606      	mov	r6, r0
 80079e8:	460f      	mov	r7, r1
 80079ea:	f7f8 fd6d 	bl	80004c8 <__aeabi_dmul>
 80079ee:	a33a      	add	r3, pc, #232	; (adr r3, 8007ad8 <__ieee754_asin+0x2d0>)
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	f7f8 fbb2 	bl	800015c <__adddf3>
 80079f8:	4632      	mov	r2, r6
 80079fa:	463b      	mov	r3, r7
 80079fc:	f7f8 fd64 	bl	80004c8 <__aeabi_dmul>
 8007a00:	a337      	add	r3, pc, #220	; (adr r3, 8007ae0 <__ieee754_asin+0x2d8>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	f7f8 fba7 	bl	8000158 <__aeabi_dsub>
 8007a0a:	4632      	mov	r2, r6
 8007a0c:	463b      	mov	r3, r7
 8007a0e:	f7f8 fd5b 	bl	80004c8 <__aeabi_dmul>
 8007a12:	a335      	add	r3, pc, #212	; (adr r3, 8007ae8 <__ieee754_asin+0x2e0>)
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	f7f8 fba0 	bl	800015c <__adddf3>
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	463b      	mov	r3, r7
 8007a20:	f7f8 fd52 	bl	80004c8 <__aeabi_dmul>
 8007a24:	a332      	add	r3, pc, #200	; (adr r3, 8007af0 <__ieee754_asin+0x2e8>)
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f7f8 fb95 	bl	8000158 <__aeabi_dsub>
 8007a2e:	4632      	mov	r2, r6
 8007a30:	463b      	mov	r3, r7
 8007a32:	f7f8 fd49 	bl	80004c8 <__aeabi_dmul>
 8007a36:	a330      	add	r3, pc, #192	; (adr r3, 8007af8 <__ieee754_asin+0x2f0>)
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f7f8 fb8e 	bl	800015c <__adddf3>
 8007a40:	4632      	mov	r2, r6
 8007a42:	463b      	mov	r3, r7
 8007a44:	f7f8 fd40 	bl	80004c8 <__aeabi_dmul>
 8007a48:	a32d      	add	r3, pc, #180	; (adr r3, 8007b00 <__ieee754_asin+0x2f8>)
 8007a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4e:	4680      	mov	r8, r0
 8007a50:	4689      	mov	r9, r1
 8007a52:	4630      	mov	r0, r6
 8007a54:	4639      	mov	r1, r7
 8007a56:	f7f8 fd37 	bl	80004c8 <__aeabi_dmul>
 8007a5a:	a32b      	add	r3, pc, #172	; (adr r3, 8007b08 <__ieee754_asin+0x300>)
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	f7f8 fb7a 	bl	8000158 <__aeabi_dsub>
 8007a64:	4632      	mov	r2, r6
 8007a66:	463b      	mov	r3, r7
 8007a68:	f7f8 fd2e 	bl	80004c8 <__aeabi_dmul>
 8007a6c:	a328      	add	r3, pc, #160	; (adr r3, 8007b10 <__ieee754_asin+0x308>)
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f7f8 fb73 	bl	800015c <__adddf3>
 8007a76:	4632      	mov	r2, r6
 8007a78:	463b      	mov	r3, r7
 8007a7a:	f7f8 fd25 	bl	80004c8 <__aeabi_dmul>
 8007a7e:	a326      	add	r3, pc, #152	; (adr r3, 8007b18 <__ieee754_asin+0x310>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	f7f8 fb68 	bl	8000158 <__aeabi_dsub>
 8007a88:	4632      	mov	r2, r6
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	f7f8 fd1c 	bl	80004c8 <__aeabi_dmul>
 8007a90:	2200      	movs	r2, #0
 8007a92:	4b25      	ldr	r3, [pc, #148]	; (8007b28 <__ieee754_asin+0x320>)
 8007a94:	f7f8 fb62 	bl	800015c <__adddf3>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	f7f8 fe3c 	bl	800071c <__aeabi_ddiv>
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	462b      	mov	r3, r5
 8007aa8:	f7f8 fd0e 	bl	80004c8 <__aeabi_dmul>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	e6cc      	b.n	8007850 <__ieee754_asin+0x48>
 8007ab6:	bf00      	nop
 8007ab8:	54442d18 	.word	0x54442d18
 8007abc:	3ff921fb 	.word	0x3ff921fb
 8007ac0:	33145c07 	.word	0x33145c07
 8007ac4:	3c91a626 	.word	0x3c91a626
 8007ac8:	8800759c 	.word	0x8800759c
 8007acc:	7e37e43c 	.word	0x7e37e43c
 8007ad0:	0dfdf709 	.word	0x0dfdf709
 8007ad4:	3f023de1 	.word	0x3f023de1
 8007ad8:	7501b288 	.word	0x7501b288
 8007adc:	3f49efe0 	.word	0x3f49efe0
 8007ae0:	b5688f3b 	.word	0xb5688f3b
 8007ae4:	3fa48228 	.word	0x3fa48228
 8007ae8:	0e884455 	.word	0x0e884455
 8007aec:	3fc9c155 	.word	0x3fc9c155
 8007af0:	03eb6f7d 	.word	0x03eb6f7d
 8007af4:	3fd4d612 	.word	0x3fd4d612
 8007af8:	55555555 	.word	0x55555555
 8007afc:	3fc55555 	.word	0x3fc55555
 8007b00:	b12e9282 	.word	0xb12e9282
 8007b04:	3fb3b8c5 	.word	0x3fb3b8c5
 8007b08:	1b8d0159 	.word	0x1b8d0159
 8007b0c:	3fe6066c 	.word	0x3fe6066c
 8007b10:	9c598ac8 	.word	0x9c598ac8
 8007b14:	40002ae5 	.word	0x40002ae5
 8007b18:	1c8a2d4b 	.word	0x1c8a2d4b
 8007b1c:	40033a27 	.word	0x40033a27
 8007b20:	3fefffff 	.word	0x3fefffff
 8007b24:	3fdfffff 	.word	0x3fdfffff
 8007b28:	3ff00000 	.word	0x3ff00000
 8007b2c:	3fe00000 	.word	0x3fe00000
 8007b30:	3fef3332 	.word	0x3fef3332
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	460f      	mov	r7, r1
 8007b3a:	f7f8 fb0f 	bl	800015c <__adddf3>
 8007b3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b46:	4640      	mov	r0, r8
 8007b48:	4649      	mov	r1, r9
 8007b4a:	f7f8 fde7 	bl	800071c <__aeabi_ddiv>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b56:	f7f8 fcb7 	bl	80004c8 <__aeabi_dmul>
 8007b5a:	2600      	movs	r6, #0
 8007b5c:	4680      	mov	r8, r0
 8007b5e:	4689      	mov	r9, r1
 8007b60:	4632      	mov	r2, r6
 8007b62:	465b      	mov	r3, fp
 8007b64:	4630      	mov	r0, r6
 8007b66:	4659      	mov	r1, fp
 8007b68:	f7f8 fcae 	bl	80004c8 <__aeabi_dmul>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4620      	mov	r0, r4
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7f8 faf0 	bl	8000158 <__aeabi_dsub>
 8007b78:	4632      	mov	r2, r6
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	460d      	mov	r5, r1
 8007b7e:	465b      	mov	r3, fp
 8007b80:	4650      	mov	r0, sl
 8007b82:	4659      	mov	r1, fp
 8007b84:	f7f8 faea 	bl	800015c <__adddf3>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	4629      	mov	r1, r5
 8007b90:	f7f8 fdc4 	bl	800071c <__aeabi_ddiv>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	f7f8 fae0 	bl	800015c <__adddf3>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	a113      	add	r1, pc, #76	; (adr r1, 8007bf0 <__ieee754_asin+0x3e8>)
 8007ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ba6:	f7f8 fad7 	bl	8000158 <__aeabi_dsub>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	4640      	mov	r0, r8
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	f7f8 fad1 	bl	8000158 <__aeabi_dsub>
 8007bb6:	4632      	mov	r2, r6
 8007bb8:	4604      	mov	r4, r0
 8007bba:	460d      	mov	r5, r1
 8007bbc:	465b      	mov	r3, fp
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	f7f8 facb 	bl	800015c <__adddf3>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	a10b      	add	r1, pc, #44	; (adr r1, 8007bf8 <__ieee754_asin+0x3f0>)
 8007bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd0:	f7f8 fac2 	bl	8000158 <__aeabi_dsub>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4620      	mov	r0, r4
 8007bda:	4629      	mov	r1, r5
 8007bdc:	f7f8 fabc 	bl	8000158 <__aeabi_dsub>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	a104      	add	r1, pc, #16	; (adr r1, 8007bf8 <__ieee754_asin+0x3f0>)
 8007be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bea:	e6e7      	b.n	80079bc <__ieee754_asin+0x1b4>
 8007bec:	f3af 8000 	nop.w
 8007bf0:	33145c07 	.word	0x33145c07
 8007bf4:	3c91a626 	.word	0x3c91a626
 8007bf8:	54442d18 	.word	0x54442d18
 8007bfc:	3fe921fb 	.word	0x3fe921fb

08007c00 <__ieee754_pow>:
 8007c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c04:	b091      	sub	sp, #68	; 0x44
 8007c06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c0a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8007c0e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007c12:	ea55 0302 	orrs.w	r3, r5, r2
 8007c16:	4607      	mov	r7, r0
 8007c18:	4688      	mov	r8, r1
 8007c1a:	f000 84b7 	beq.w	800858c <__ieee754_pow+0x98c>
 8007c1e:	4b80      	ldr	r3, [pc, #512]	; (8007e20 <__ieee754_pow+0x220>)
 8007c20:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8007c24:	429c      	cmp	r4, r3
 8007c26:	4689      	mov	r9, r1
 8007c28:	4682      	mov	sl, r0
 8007c2a:	dc09      	bgt.n	8007c40 <__ieee754_pow+0x40>
 8007c2c:	d103      	bne.n	8007c36 <__ieee754_pow+0x36>
 8007c2e:	b938      	cbnz	r0, 8007c40 <__ieee754_pow+0x40>
 8007c30:	42a5      	cmp	r5, r4
 8007c32:	dc0d      	bgt.n	8007c50 <__ieee754_pow+0x50>
 8007c34:	e001      	b.n	8007c3a <__ieee754_pow+0x3a>
 8007c36:	429d      	cmp	r5, r3
 8007c38:	dc02      	bgt.n	8007c40 <__ieee754_pow+0x40>
 8007c3a:	429d      	cmp	r5, r3
 8007c3c:	d10e      	bne.n	8007c5c <__ieee754_pow+0x5c>
 8007c3e:	b16a      	cbz	r2, 8007c5c <__ieee754_pow+0x5c>
 8007c40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007c44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007c48:	ea54 030a 	orrs.w	r3, r4, sl
 8007c4c:	f000 849e 	beq.w	800858c <__ieee754_pow+0x98c>
 8007c50:	4874      	ldr	r0, [pc, #464]	; (8007e24 <__ieee754_pow+0x224>)
 8007c52:	b011      	add	sp, #68	; 0x44
 8007c54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c58:	f001 bcc4 	b.w	80095e4 <nan>
 8007c5c:	f1b9 0f00 	cmp.w	r9, #0
 8007c60:	da53      	bge.n	8007d0a <__ieee754_pow+0x10a>
 8007c62:	4b71      	ldr	r3, [pc, #452]	; (8007e28 <__ieee754_pow+0x228>)
 8007c64:	429d      	cmp	r5, r3
 8007c66:	dc4e      	bgt.n	8007d06 <__ieee754_pow+0x106>
 8007c68:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007c6c:	429d      	cmp	r5, r3
 8007c6e:	dd4c      	ble.n	8007d0a <__ieee754_pow+0x10a>
 8007c70:	152b      	asrs	r3, r5, #20
 8007c72:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007c76:	2b14      	cmp	r3, #20
 8007c78:	dd28      	ble.n	8007ccc <__ieee754_pow+0xcc>
 8007c7a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007c7e:	fa22 f103 	lsr.w	r1, r2, r3
 8007c82:	fa01 f303 	lsl.w	r3, r1, r3
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d13f      	bne.n	8007d0a <__ieee754_pow+0x10a>
 8007c8a:	f001 0101 	and.w	r1, r1, #1
 8007c8e:	f1c1 0302 	rsb	r3, r1, #2
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	2a00      	cmp	r2, #0
 8007c96:	d15c      	bne.n	8007d52 <__ieee754_pow+0x152>
 8007c98:	4b61      	ldr	r3, [pc, #388]	; (8007e20 <__ieee754_pow+0x220>)
 8007c9a:	429d      	cmp	r5, r3
 8007c9c:	d126      	bne.n	8007cec <__ieee754_pow+0xec>
 8007c9e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007ca2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007ca6:	ea53 030a 	orrs.w	r3, r3, sl
 8007caa:	f000 846f 	beq.w	800858c <__ieee754_pow+0x98c>
 8007cae:	4b5f      	ldr	r3, [pc, #380]	; (8007e2c <__ieee754_pow+0x22c>)
 8007cb0:	429c      	cmp	r4, r3
 8007cb2:	dd2c      	ble.n	8007d0e <__ieee754_pow+0x10e>
 8007cb4:	2e00      	cmp	r6, #0
 8007cb6:	f280 846f 	bge.w	8008598 <__ieee754_pow+0x998>
 8007cba:	f04f 0b00 	mov.w	fp, #0
 8007cbe:	f04f 0c00 	mov.w	ip, #0
 8007cc2:	4658      	mov	r0, fp
 8007cc4:	4661      	mov	r1, ip
 8007cc6:	b011      	add	sp, #68	; 0x44
 8007cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ccc:	2a00      	cmp	r2, #0
 8007cce:	d13e      	bne.n	8007d4e <__ieee754_pow+0x14e>
 8007cd0:	f1c3 0314 	rsb	r3, r3, #20
 8007cd4:	fa45 f103 	asr.w	r1, r5, r3
 8007cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cdc:	42ab      	cmp	r3, r5
 8007cde:	f040 8463 	bne.w	80085a8 <__ieee754_pow+0x9a8>
 8007ce2:	f001 0101 	and.w	r1, r1, #1
 8007ce6:	f1c1 0302 	rsb	r3, r1, #2
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	4b50      	ldr	r3, [pc, #320]	; (8007e30 <__ieee754_pow+0x230>)
 8007cee:	429d      	cmp	r5, r3
 8007cf0:	d114      	bne.n	8007d1c <__ieee754_pow+0x11c>
 8007cf2:	2e00      	cmp	r6, #0
 8007cf4:	f280 8454 	bge.w	80085a0 <__ieee754_pow+0x9a0>
 8007cf8:	463a      	mov	r2, r7
 8007cfa:	4643      	mov	r3, r8
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	494c      	ldr	r1, [pc, #304]	; (8007e30 <__ieee754_pow+0x230>)
 8007d00:	f7f8 fd0c 	bl	800071c <__aeabi_ddiv>
 8007d04:	e013      	b.n	8007d2e <__ieee754_pow+0x12e>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e7c3      	b.n	8007c92 <__ieee754_pow+0x92>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	e7c1      	b.n	8007c92 <__ieee754_pow+0x92>
 8007d0e:	2e00      	cmp	r6, #0
 8007d10:	dad3      	bge.n	8007cba <__ieee754_pow+0xba>
 8007d12:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007d16:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007d1a:	e7d2      	b.n	8007cc2 <__ieee754_pow+0xc2>
 8007d1c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8007d20:	d108      	bne.n	8007d34 <__ieee754_pow+0x134>
 8007d22:	463a      	mov	r2, r7
 8007d24:	4643      	mov	r3, r8
 8007d26:	4638      	mov	r0, r7
 8007d28:	4641      	mov	r1, r8
 8007d2a:	f7f8 fbcd 	bl	80004c8 <__aeabi_dmul>
 8007d2e:	4683      	mov	fp, r0
 8007d30:	468c      	mov	ip, r1
 8007d32:	e7c6      	b.n	8007cc2 <__ieee754_pow+0xc2>
 8007d34:	4b3f      	ldr	r3, [pc, #252]	; (8007e34 <__ieee754_pow+0x234>)
 8007d36:	429e      	cmp	r6, r3
 8007d38:	d10b      	bne.n	8007d52 <__ieee754_pow+0x152>
 8007d3a:	f1b9 0f00 	cmp.w	r9, #0
 8007d3e:	db08      	blt.n	8007d52 <__ieee754_pow+0x152>
 8007d40:	4638      	mov	r0, r7
 8007d42:	4641      	mov	r1, r8
 8007d44:	b011      	add	sp, #68	; 0x44
 8007d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4a:	f000 be55 	b.w	80089f8 <__ieee754_sqrt>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	4638      	mov	r0, r7
 8007d54:	4641      	mov	r1, r8
 8007d56:	f7ff fb13 	bl	8007380 <fabs>
 8007d5a:	4683      	mov	fp, r0
 8007d5c:	468c      	mov	ip, r1
 8007d5e:	f1ba 0f00 	cmp.w	sl, #0
 8007d62:	d12b      	bne.n	8007dbc <__ieee754_pow+0x1bc>
 8007d64:	b124      	cbz	r4, 8007d70 <__ieee754_pow+0x170>
 8007d66:	4b32      	ldr	r3, [pc, #200]	; (8007e30 <__ieee754_pow+0x230>)
 8007d68:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d125      	bne.n	8007dbc <__ieee754_pow+0x1bc>
 8007d70:	2e00      	cmp	r6, #0
 8007d72:	da07      	bge.n	8007d84 <__ieee754_pow+0x184>
 8007d74:	465a      	mov	r2, fp
 8007d76:	4663      	mov	r3, ip
 8007d78:	2000      	movs	r0, #0
 8007d7a:	492d      	ldr	r1, [pc, #180]	; (8007e30 <__ieee754_pow+0x230>)
 8007d7c:	f7f8 fcce 	bl	800071c <__aeabi_ddiv>
 8007d80:	4683      	mov	fp, r0
 8007d82:	468c      	mov	ip, r1
 8007d84:	f1b9 0f00 	cmp.w	r9, #0
 8007d88:	da9b      	bge.n	8007cc2 <__ieee754_pow+0xc2>
 8007d8a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007d8e:	9b00      	ldr	r3, [sp, #0]
 8007d90:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007d94:	4323      	orrs	r3, r4
 8007d96:	d108      	bne.n	8007daa <__ieee754_pow+0x1aa>
 8007d98:	465a      	mov	r2, fp
 8007d9a:	4663      	mov	r3, ip
 8007d9c:	4658      	mov	r0, fp
 8007d9e:	4661      	mov	r1, ip
 8007da0:	f7f8 f9da 	bl	8000158 <__aeabi_dsub>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	e7aa      	b.n	8007d00 <__ieee754_pow+0x100>
 8007daa:	9b00      	ldr	r3, [sp, #0]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d188      	bne.n	8007cc2 <__ieee754_pow+0xc2>
 8007db0:	4658      	mov	r0, fp
 8007db2:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007db6:	4683      	mov	fp, r0
 8007db8:	469c      	mov	ip, r3
 8007dba:	e782      	b.n	8007cc2 <__ieee754_pow+0xc2>
 8007dbc:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8007dc0:	f109 33ff 	add.w	r3, r9, #4294967295
 8007dc4:	930d      	str	r3, [sp, #52]	; 0x34
 8007dc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dc8:	9b00      	ldr	r3, [sp, #0]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	d104      	bne.n	8007dd8 <__ieee754_pow+0x1d8>
 8007dce:	463a      	mov	r2, r7
 8007dd0:	4643      	mov	r3, r8
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	4641      	mov	r1, r8
 8007dd6:	e7e3      	b.n	8007da0 <__ieee754_pow+0x1a0>
 8007dd8:	4b17      	ldr	r3, [pc, #92]	; (8007e38 <__ieee754_pow+0x238>)
 8007dda:	429d      	cmp	r5, r3
 8007ddc:	f340 80fe 	ble.w	8007fdc <__ieee754_pow+0x3dc>
 8007de0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007de4:	429d      	cmp	r5, r3
 8007de6:	dd0b      	ble.n	8007e00 <__ieee754_pow+0x200>
 8007de8:	4b10      	ldr	r3, [pc, #64]	; (8007e2c <__ieee754_pow+0x22c>)
 8007dea:	429c      	cmp	r4, r3
 8007dec:	dc0e      	bgt.n	8007e0c <__ieee754_pow+0x20c>
 8007dee:	2e00      	cmp	r6, #0
 8007df0:	f6bf af63 	bge.w	8007cba <__ieee754_pow+0xba>
 8007df4:	a308      	add	r3, pc, #32	; (adr r3, 8007e18 <__ieee754_pow+0x218>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	e794      	b.n	8007d2a <__ieee754_pow+0x12a>
 8007e00:	4b0e      	ldr	r3, [pc, #56]	; (8007e3c <__ieee754_pow+0x23c>)
 8007e02:	429c      	cmp	r4, r3
 8007e04:	ddf3      	ble.n	8007dee <__ieee754_pow+0x1ee>
 8007e06:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <__ieee754_pow+0x230>)
 8007e08:	429c      	cmp	r4, r3
 8007e0a:	dd19      	ble.n	8007e40 <__ieee754_pow+0x240>
 8007e0c:	2e00      	cmp	r6, #0
 8007e0e:	dcf1      	bgt.n	8007df4 <__ieee754_pow+0x1f4>
 8007e10:	e753      	b.n	8007cba <__ieee754_pow+0xba>
 8007e12:	bf00      	nop
 8007e14:	f3af 8000 	nop.w
 8007e18:	8800759c 	.word	0x8800759c
 8007e1c:	7e37e43c 	.word	0x7e37e43c
 8007e20:	7ff00000 	.word	0x7ff00000
 8007e24:	080098dc 	.word	0x080098dc
 8007e28:	433fffff 	.word	0x433fffff
 8007e2c:	3fefffff 	.word	0x3fefffff
 8007e30:	3ff00000 	.word	0x3ff00000
 8007e34:	3fe00000 	.word	0x3fe00000
 8007e38:	41e00000 	.word	0x41e00000
 8007e3c:	3feffffe 	.word	0x3feffffe
 8007e40:	4661      	mov	r1, ip
 8007e42:	2200      	movs	r2, #0
 8007e44:	4b60      	ldr	r3, [pc, #384]	; (8007fc8 <__ieee754_pow+0x3c8>)
 8007e46:	4658      	mov	r0, fp
 8007e48:	f7f8 f986 	bl	8000158 <__aeabi_dsub>
 8007e4c:	a354      	add	r3, pc, #336	; (adr r3, 8007fa0 <__ieee754_pow+0x3a0>)
 8007e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e52:	4604      	mov	r4, r0
 8007e54:	460d      	mov	r5, r1
 8007e56:	f7f8 fb37 	bl	80004c8 <__aeabi_dmul>
 8007e5a:	a353      	add	r3, pc, #332	; (adr r3, 8007fa8 <__ieee754_pow+0x3a8>)
 8007e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e60:	4606      	mov	r6, r0
 8007e62:	460f      	mov	r7, r1
 8007e64:	4620      	mov	r0, r4
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 fb2e 	bl	80004c8 <__aeabi_dmul>
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4682      	mov	sl, r0
 8007e70:	468b      	mov	fp, r1
 8007e72:	4b56      	ldr	r3, [pc, #344]	; (8007fcc <__ieee754_pow+0x3cc>)
 8007e74:	4620      	mov	r0, r4
 8007e76:	4629      	mov	r1, r5
 8007e78:	f7f8 fb26 	bl	80004c8 <__aeabi_dmul>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	a14b      	add	r1, pc, #300	; (adr r1, 8007fb0 <__ieee754_pow+0x3b0>)
 8007e82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e86:	f7f8 f967 	bl	8000158 <__aeabi_dsub>
 8007e8a:	4622      	mov	r2, r4
 8007e8c:	462b      	mov	r3, r5
 8007e8e:	f7f8 fb1b 	bl	80004c8 <__aeabi_dmul>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	2000      	movs	r0, #0
 8007e98:	494d      	ldr	r1, [pc, #308]	; (8007fd0 <__ieee754_pow+0x3d0>)
 8007e9a:	f7f8 f95d 	bl	8000158 <__aeabi_dsub>
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	462b      	mov	r3, r5
 8007ea2:	4680      	mov	r8, r0
 8007ea4:	4689      	mov	r9, r1
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	f7f8 fb0d 	bl	80004c8 <__aeabi_dmul>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	f7f8 fb07 	bl	80004c8 <__aeabi_dmul>
 8007eba:	a33f      	add	r3, pc, #252	; (adr r3, 8007fb8 <__ieee754_pow+0x3b8>)
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	f7f8 fb02 	bl	80004c8 <__aeabi_dmul>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4650      	mov	r0, sl
 8007eca:	4659      	mov	r1, fp
 8007ecc:	f7f8 f944 	bl	8000158 <__aeabi_dsub>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	460d      	mov	r5, r1
 8007ed8:	4630      	mov	r0, r6
 8007eda:	4639      	mov	r1, r7
 8007edc:	f7f8 f93e 	bl	800015c <__adddf3>
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	468b      	mov	fp, r1
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	4632      	mov	r2, r6
 8007ee8:	463b      	mov	r3, r7
 8007eea:	f7f8 f935 	bl	8000158 <__aeabi_dsub>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	f7f8 f92f 	bl	8000158 <__aeabi_dsub>
 8007efa:	9b00      	ldr	r3, [sp, #0]
 8007efc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4313      	orrs	r3, r2
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	bf0c      	ite	eq
 8007f08:	4c32      	ldreq	r4, [pc, #200]	; (8007fd4 <__ieee754_pow+0x3d4>)
 8007f0a:	4c2f      	ldrne	r4, [pc, #188]	; (8007fc8 <__ieee754_pow+0x3c8>)
 8007f0c:	4606      	mov	r6, r0
 8007f0e:	e9cd 3400 	strd	r3, r4, [sp]
 8007f12:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f16:	2400      	movs	r4, #0
 8007f18:	460f      	mov	r7, r1
 8007f1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f1e:	4622      	mov	r2, r4
 8007f20:	462b      	mov	r3, r5
 8007f22:	f7f8 f919 	bl	8000158 <__aeabi_dsub>
 8007f26:	4652      	mov	r2, sl
 8007f28:	465b      	mov	r3, fp
 8007f2a:	f7f8 facd 	bl	80004c8 <__aeabi_dmul>
 8007f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f32:	4680      	mov	r8, r0
 8007f34:	4689      	mov	r9, r1
 8007f36:	4630      	mov	r0, r6
 8007f38:	4639      	mov	r1, r7
 8007f3a:	f7f8 fac5 	bl	80004c8 <__aeabi_dmul>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4640      	mov	r0, r8
 8007f44:	4649      	mov	r1, r9
 8007f46:	f7f8 f909 	bl	800015c <__adddf3>
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	462b      	mov	r3, r5
 8007f4e:	4680      	mov	r8, r0
 8007f50:	4689      	mov	r9, r1
 8007f52:	4650      	mov	r0, sl
 8007f54:	4659      	mov	r1, fp
 8007f56:	f7f8 fab7 	bl	80004c8 <__aeabi_dmul>
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	460d      	mov	r5, r1
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4602      	mov	r2, r0
 8007f62:	4649      	mov	r1, r9
 8007f64:	4640      	mov	r0, r8
 8007f66:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007f6a:	f7f8 f8f7 	bl	800015c <__adddf3>
 8007f6e:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <__ieee754_pow+0x3d8>)
 8007f70:	4682      	mov	sl, r0
 8007f72:	4299      	cmp	r1, r3
 8007f74:	460f      	mov	r7, r1
 8007f76:	460e      	mov	r6, r1
 8007f78:	f340 82e1 	ble.w	800853e <__ieee754_pow+0x93e>
 8007f7c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007f80:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007f84:	4303      	orrs	r3, r0
 8007f86:	f000 81db 	beq.w	8008340 <__ieee754_pow+0x740>
 8007f8a:	a30d      	add	r3, pc, #52	; (adr r3, 8007fc0 <__ieee754_pow+0x3c0>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f94:	f7f8 fa98 	bl	80004c8 <__aeabi_dmul>
 8007f98:	a309      	add	r3, pc, #36	; (adr r3, 8007fc0 <__ieee754_pow+0x3c0>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	e6c4      	b.n	8007d2a <__ieee754_pow+0x12a>
 8007fa0:	60000000 	.word	0x60000000
 8007fa4:	3ff71547 	.word	0x3ff71547
 8007fa8:	f85ddf44 	.word	0xf85ddf44
 8007fac:	3e54ae0b 	.word	0x3e54ae0b
 8007fb0:	55555555 	.word	0x55555555
 8007fb4:	3fd55555 	.word	0x3fd55555
 8007fb8:	652b82fe 	.word	0x652b82fe
 8007fbc:	3ff71547 	.word	0x3ff71547
 8007fc0:	8800759c 	.word	0x8800759c
 8007fc4:	7e37e43c 	.word	0x7e37e43c
 8007fc8:	3ff00000 	.word	0x3ff00000
 8007fcc:	3fd00000 	.word	0x3fd00000
 8007fd0:	3fe00000 	.word	0x3fe00000
 8007fd4:	bff00000 	.word	0xbff00000
 8007fd8:	408fffff 	.word	0x408fffff
 8007fdc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	da08      	bge.n	8007ff8 <__ieee754_pow+0x3f8>
 8007fe6:	4658      	mov	r0, fp
 8007fe8:	4bcd      	ldr	r3, [pc, #820]	; (8008320 <__ieee754_pow+0x720>)
 8007fea:	4661      	mov	r1, ip
 8007fec:	f7f8 fa6c 	bl	80004c8 <__aeabi_dmul>
 8007ff0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007ff4:	4683      	mov	fp, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	1523      	asrs	r3, r4, #20
 8007ffa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ffe:	4413      	add	r3, r2
 8008000:	930c      	str	r3, [sp, #48]	; 0x30
 8008002:	4bc8      	ldr	r3, [pc, #800]	; (8008324 <__ieee754_pow+0x724>)
 8008004:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008008:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800800c:	429c      	cmp	r4, r3
 800800e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008012:	dd08      	ble.n	8008026 <__ieee754_pow+0x426>
 8008014:	4bc4      	ldr	r3, [pc, #784]	; (8008328 <__ieee754_pow+0x728>)
 8008016:	429c      	cmp	r4, r3
 8008018:	f340 815b 	ble.w	80082d2 <__ieee754_pow+0x6d2>
 800801c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800801e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008022:	3301      	adds	r3, #1
 8008024:	930c      	str	r3, [sp, #48]	; 0x30
 8008026:	f04f 0800 	mov.w	r8, #0
 800802a:	4658      	mov	r0, fp
 800802c:	4629      	mov	r1, r5
 800802e:	4bbf      	ldr	r3, [pc, #764]	; (800832c <__ieee754_pow+0x72c>)
 8008030:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8008034:	444b      	add	r3, r9
 8008036:	e9d3 3400 	ldrd	r3, r4, [r3]
 800803a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800803e:	461a      	mov	r2, r3
 8008040:	4623      	mov	r3, r4
 8008042:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008046:	f7f8 f887 	bl	8000158 <__aeabi_dsub>
 800804a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800804e:	4606      	mov	r6, r0
 8008050:	460f      	mov	r7, r1
 8008052:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008056:	f7f8 f881 	bl	800015c <__adddf3>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	2000      	movs	r0, #0
 8008060:	49b3      	ldr	r1, [pc, #716]	; (8008330 <__ieee754_pow+0x730>)
 8008062:	f7f8 fb5b 	bl	800071c <__aeabi_ddiv>
 8008066:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4630      	mov	r0, r6
 8008070:	4639      	mov	r1, r7
 8008072:	f7f8 fa29 	bl	80004c8 <__aeabi_dmul>
 8008076:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800807a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800807e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008082:	2300      	movs	r3, #0
 8008084:	2200      	movs	r2, #0
 8008086:	106d      	asrs	r5, r5, #1
 8008088:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800808c:	9304      	str	r3, [sp, #16]
 800808e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008092:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008096:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800809a:	4650      	mov	r0, sl
 800809c:	4659      	mov	r1, fp
 800809e:	4614      	mov	r4, r2
 80080a0:	461d      	mov	r5, r3
 80080a2:	f7f8 fa11 	bl	80004c8 <__aeabi_dmul>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4630      	mov	r0, r6
 80080ac:	4639      	mov	r1, r7
 80080ae:	f7f8 f853 	bl	8000158 <__aeabi_dsub>
 80080b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080b6:	4606      	mov	r6, r0
 80080b8:	460f      	mov	r7, r1
 80080ba:	4620      	mov	r0, r4
 80080bc:	4629      	mov	r1, r5
 80080be:	f7f8 f84b 	bl	8000158 <__aeabi_dsub>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080ca:	f7f8 f845 	bl	8000158 <__aeabi_dsub>
 80080ce:	4652      	mov	r2, sl
 80080d0:	465b      	mov	r3, fp
 80080d2:	f7f8 f9f9 	bl	80004c8 <__aeabi_dmul>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4630      	mov	r0, r6
 80080dc:	4639      	mov	r1, r7
 80080de:	f7f8 f83b 	bl	8000158 <__aeabi_dsub>
 80080e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80080e6:	f7f8 f9ef 	bl	80004c8 <__aeabi_dmul>
 80080ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80080f2:	4610      	mov	r0, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	f7f8 f9e7 	bl	80004c8 <__aeabi_dmul>
 80080fa:	a377      	add	r3, pc, #476	; (adr r3, 80082d8 <__ieee754_pow+0x6d8>)
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	4604      	mov	r4, r0
 8008102:	460d      	mov	r5, r1
 8008104:	f7f8 f9e0 	bl	80004c8 <__aeabi_dmul>
 8008108:	a375      	add	r3, pc, #468	; (adr r3, 80082e0 <__ieee754_pow+0x6e0>)
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	f7f8 f825 	bl	800015c <__adddf3>
 8008112:	4622      	mov	r2, r4
 8008114:	462b      	mov	r3, r5
 8008116:	f7f8 f9d7 	bl	80004c8 <__aeabi_dmul>
 800811a:	a373      	add	r3, pc, #460	; (adr r3, 80082e8 <__ieee754_pow+0x6e8>)
 800811c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008120:	f7f8 f81c 	bl	800015c <__adddf3>
 8008124:	4622      	mov	r2, r4
 8008126:	462b      	mov	r3, r5
 8008128:	f7f8 f9ce 	bl	80004c8 <__aeabi_dmul>
 800812c:	a370      	add	r3, pc, #448	; (adr r3, 80082f0 <__ieee754_pow+0x6f0>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	f7f8 f813 	bl	800015c <__adddf3>
 8008136:	4622      	mov	r2, r4
 8008138:	462b      	mov	r3, r5
 800813a:	f7f8 f9c5 	bl	80004c8 <__aeabi_dmul>
 800813e:	a36e      	add	r3, pc, #440	; (adr r3, 80082f8 <__ieee754_pow+0x6f8>)
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	f7f8 f80a 	bl	800015c <__adddf3>
 8008148:	4622      	mov	r2, r4
 800814a:	462b      	mov	r3, r5
 800814c:	f7f8 f9bc 	bl	80004c8 <__aeabi_dmul>
 8008150:	a36b      	add	r3, pc, #428	; (adr r3, 8008300 <__ieee754_pow+0x700>)
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	f7f8 f801 	bl	800015c <__adddf3>
 800815a:	4622      	mov	r2, r4
 800815c:	4606      	mov	r6, r0
 800815e:	460f      	mov	r7, r1
 8008160:	462b      	mov	r3, r5
 8008162:	4620      	mov	r0, r4
 8008164:	4629      	mov	r1, r5
 8008166:	f7f8 f9af 	bl	80004c8 <__aeabi_dmul>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4630      	mov	r0, r6
 8008170:	4639      	mov	r1, r7
 8008172:	f7f8 f9a9 	bl	80004c8 <__aeabi_dmul>
 8008176:	4604      	mov	r4, r0
 8008178:	460d      	mov	r5, r1
 800817a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800817e:	4652      	mov	r2, sl
 8008180:	465b      	mov	r3, fp
 8008182:	f7f7 ffeb 	bl	800015c <__adddf3>
 8008186:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800818a:	f7f8 f99d 	bl	80004c8 <__aeabi_dmul>
 800818e:	4622      	mov	r2, r4
 8008190:	462b      	mov	r3, r5
 8008192:	f7f7 ffe3 	bl	800015c <__adddf3>
 8008196:	4652      	mov	r2, sl
 8008198:	4606      	mov	r6, r0
 800819a:	460f      	mov	r7, r1
 800819c:	465b      	mov	r3, fp
 800819e:	4650      	mov	r0, sl
 80081a0:	4659      	mov	r1, fp
 80081a2:	f7f8 f991 	bl	80004c8 <__aeabi_dmul>
 80081a6:	2200      	movs	r2, #0
 80081a8:	4b62      	ldr	r3, [pc, #392]	; (8008334 <__ieee754_pow+0x734>)
 80081aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80081ae:	f7f7 ffd5 	bl	800015c <__adddf3>
 80081b2:	4632      	mov	r2, r6
 80081b4:	463b      	mov	r3, r7
 80081b6:	f7f7 ffd1 	bl	800015c <__adddf3>
 80081ba:	9804      	ldr	r0, [sp, #16]
 80081bc:	460d      	mov	r5, r1
 80081be:	4604      	mov	r4, r0
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4650      	mov	r0, sl
 80081c6:	4659      	mov	r1, fp
 80081c8:	f7f8 f97e 	bl	80004c8 <__aeabi_dmul>
 80081cc:	2200      	movs	r2, #0
 80081ce:	4682      	mov	sl, r0
 80081d0:	468b      	mov	fp, r1
 80081d2:	4b58      	ldr	r3, [pc, #352]	; (8008334 <__ieee754_pow+0x734>)
 80081d4:	4620      	mov	r0, r4
 80081d6:	4629      	mov	r1, r5
 80081d8:	f7f7 ffbe 	bl	8000158 <__aeabi_dsub>
 80081dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80081e0:	f7f7 ffba 	bl	8000158 <__aeabi_dsub>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4630      	mov	r0, r6
 80081ea:	4639      	mov	r1, r7
 80081ec:	f7f7 ffb4 	bl	8000158 <__aeabi_dsub>
 80081f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081f4:	f7f8 f968 	bl	80004c8 <__aeabi_dmul>
 80081f8:	4622      	mov	r2, r4
 80081fa:	4606      	mov	r6, r0
 80081fc:	460f      	mov	r7, r1
 80081fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008202:	462b      	mov	r3, r5
 8008204:	f7f8 f960 	bl	80004c8 <__aeabi_dmul>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4630      	mov	r0, r6
 800820e:	4639      	mov	r1, r7
 8008210:	f7f7 ffa4 	bl	800015c <__adddf3>
 8008214:	4606      	mov	r6, r0
 8008216:	460f      	mov	r7, r1
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4650      	mov	r0, sl
 800821e:	4659      	mov	r1, fp
 8008220:	f7f7 ff9c 	bl	800015c <__adddf3>
 8008224:	a338      	add	r3, pc, #224	; (adr r3, 8008308 <__ieee754_pow+0x708>)
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	9804      	ldr	r0, [sp, #16]
 800822c:	460d      	mov	r5, r1
 800822e:	4604      	mov	r4, r0
 8008230:	f7f8 f94a 	bl	80004c8 <__aeabi_dmul>
 8008234:	4652      	mov	r2, sl
 8008236:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800823a:	465b      	mov	r3, fp
 800823c:	4620      	mov	r0, r4
 800823e:	4629      	mov	r1, r5
 8008240:	f7f7 ff8a 	bl	8000158 <__aeabi_dsub>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	4630      	mov	r0, r6
 800824a:	4639      	mov	r1, r7
 800824c:	f7f7 ff84 	bl	8000158 <__aeabi_dsub>
 8008250:	a32f      	add	r3, pc, #188	; (adr r3, 8008310 <__ieee754_pow+0x710>)
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	f7f8 f937 	bl	80004c8 <__aeabi_dmul>
 800825a:	a32f      	add	r3, pc, #188	; (adr r3, 8008318 <__ieee754_pow+0x718>)
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	4606      	mov	r6, r0
 8008262:	460f      	mov	r7, r1
 8008264:	4620      	mov	r0, r4
 8008266:	4629      	mov	r1, r5
 8008268:	f7f8 f92e 	bl	80004c8 <__aeabi_dmul>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4630      	mov	r0, r6
 8008272:	4639      	mov	r1, r7
 8008274:	f7f7 ff72 	bl	800015c <__adddf3>
 8008278:	4b2f      	ldr	r3, [pc, #188]	; (8008338 <__ieee754_pow+0x738>)
 800827a:	444b      	add	r3, r9
 800827c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008280:	f7f7 ff6c 	bl	800015c <__adddf3>
 8008284:	4604      	mov	r4, r0
 8008286:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008288:	460d      	mov	r5, r1
 800828a:	f7f8 f8b3 	bl	80003f4 <__aeabi_i2d>
 800828e:	4606      	mov	r6, r0
 8008290:	460f      	mov	r7, r1
 8008292:	4b2a      	ldr	r3, [pc, #168]	; (800833c <__ieee754_pow+0x73c>)
 8008294:	4622      	mov	r2, r4
 8008296:	444b      	add	r3, r9
 8008298:	e9d3 8900 	ldrd	r8, r9, [r3]
 800829c:	462b      	mov	r3, r5
 800829e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082a2:	f7f7 ff5b 	bl	800015c <__adddf3>
 80082a6:	4642      	mov	r2, r8
 80082a8:	464b      	mov	r3, r9
 80082aa:	f7f7 ff57 	bl	800015c <__adddf3>
 80082ae:	4632      	mov	r2, r6
 80082b0:	463b      	mov	r3, r7
 80082b2:	f7f7 ff53 	bl	800015c <__adddf3>
 80082b6:	9804      	ldr	r0, [sp, #16]
 80082b8:	4632      	mov	r2, r6
 80082ba:	463b      	mov	r3, r7
 80082bc:	4682      	mov	sl, r0
 80082be:	468b      	mov	fp, r1
 80082c0:	f7f7 ff4a 	bl	8000158 <__aeabi_dsub>
 80082c4:	4642      	mov	r2, r8
 80082c6:	464b      	mov	r3, r9
 80082c8:	f7f7 ff46 	bl	8000158 <__aeabi_dsub>
 80082cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082d0:	e60b      	b.n	8007eea <__ieee754_pow+0x2ea>
 80082d2:	f04f 0801 	mov.w	r8, #1
 80082d6:	e6a8      	b.n	800802a <__ieee754_pow+0x42a>
 80082d8:	4a454eef 	.word	0x4a454eef
 80082dc:	3fca7e28 	.word	0x3fca7e28
 80082e0:	93c9db65 	.word	0x93c9db65
 80082e4:	3fcd864a 	.word	0x3fcd864a
 80082e8:	a91d4101 	.word	0xa91d4101
 80082ec:	3fd17460 	.word	0x3fd17460
 80082f0:	518f264d 	.word	0x518f264d
 80082f4:	3fd55555 	.word	0x3fd55555
 80082f8:	db6fabff 	.word	0xdb6fabff
 80082fc:	3fdb6db6 	.word	0x3fdb6db6
 8008300:	33333303 	.word	0x33333303
 8008304:	3fe33333 	.word	0x3fe33333
 8008308:	e0000000 	.word	0xe0000000
 800830c:	3feec709 	.word	0x3feec709
 8008310:	dc3a03fd 	.word	0xdc3a03fd
 8008314:	3feec709 	.word	0x3feec709
 8008318:	145b01f5 	.word	0x145b01f5
 800831c:	be3e2fe0 	.word	0xbe3e2fe0
 8008320:	43400000 	.word	0x43400000
 8008324:	0003988e 	.word	0x0003988e
 8008328:	000bb679 	.word	0x000bb679
 800832c:	080098e8 	.word	0x080098e8
 8008330:	3ff00000 	.word	0x3ff00000
 8008334:	40080000 	.word	0x40080000
 8008338:	08009908 	.word	0x08009908
 800833c:	080098f8 	.word	0x080098f8
 8008340:	a39b      	add	r3, pc, #620	; (adr r3, 80085b0 <__ieee754_pow+0x9b0>)
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	4640      	mov	r0, r8
 8008348:	4649      	mov	r1, r9
 800834a:	f7f7 ff07 	bl	800015c <__adddf3>
 800834e:	4622      	mov	r2, r4
 8008350:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008354:	462b      	mov	r3, r5
 8008356:	4650      	mov	r0, sl
 8008358:	4639      	mov	r1, r7
 800835a:	f7f7 fefd 	bl	8000158 <__aeabi_dsub>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008366:	f7f8 fb3f 	bl	80009e8 <__aeabi_dcmpgt>
 800836a:	2800      	cmp	r0, #0
 800836c:	f47f ae0d 	bne.w	8007f8a <__ieee754_pow+0x38a>
 8008370:	4aa3      	ldr	r2, [pc, #652]	; (8008600 <__ieee754_pow+0xa00>)
 8008372:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008376:	4293      	cmp	r3, r2
 8008378:	f340 8103 	ble.w	8008582 <__ieee754_pow+0x982>
 800837c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008380:	2000      	movs	r0, #0
 8008382:	151b      	asrs	r3, r3, #20
 8008384:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008388:	fa4a f303 	asr.w	r3, sl, r3
 800838c:	4433      	add	r3, r6
 800838e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008392:	4f9c      	ldr	r7, [pc, #624]	; (8008604 <__ieee754_pow+0xa04>)
 8008394:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008398:	4117      	asrs	r7, r2
 800839a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800839e:	ea23 0107 	bic.w	r1, r3, r7
 80083a2:	f1c2 0214 	rsb	r2, r2, #20
 80083a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80083aa:	fa4a fa02 	asr.w	sl, sl, r2
 80083ae:	2e00      	cmp	r6, #0
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4620      	mov	r0, r4
 80083b6:	4629      	mov	r1, r5
 80083b8:	bfb8      	it	lt
 80083ba:	f1ca 0a00 	rsblt	sl, sl, #0
 80083be:	f7f7 fecb 	bl	8000158 <__aeabi_dsub>
 80083c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083ca:	4642      	mov	r2, r8
 80083cc:	464b      	mov	r3, r9
 80083ce:	f7f7 fec5 	bl	800015c <__adddf3>
 80083d2:	a379      	add	r3, pc, #484	; (adr r3, 80085b8 <__ieee754_pow+0x9b8>)
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	2000      	movs	r0, #0
 80083da:	460d      	mov	r5, r1
 80083dc:	4604      	mov	r4, r0
 80083de:	f7f8 f873 	bl	80004c8 <__aeabi_dmul>
 80083e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083e6:	4606      	mov	r6, r0
 80083e8:	460f      	mov	r7, r1
 80083ea:	4620      	mov	r0, r4
 80083ec:	4629      	mov	r1, r5
 80083ee:	f7f7 feb3 	bl	8000158 <__aeabi_dsub>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4640      	mov	r0, r8
 80083f8:	4649      	mov	r1, r9
 80083fa:	f7f7 fead 	bl	8000158 <__aeabi_dsub>
 80083fe:	a370      	add	r3, pc, #448	; (adr r3, 80085c0 <__ieee754_pow+0x9c0>)
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	f7f8 f860 	bl	80004c8 <__aeabi_dmul>
 8008408:	a36f      	add	r3, pc, #444	; (adr r3, 80085c8 <__ieee754_pow+0x9c8>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	4680      	mov	r8, r0
 8008410:	4689      	mov	r9, r1
 8008412:	4620      	mov	r0, r4
 8008414:	4629      	mov	r1, r5
 8008416:	f7f8 f857 	bl	80004c8 <__aeabi_dmul>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	4640      	mov	r0, r8
 8008420:	4649      	mov	r1, r9
 8008422:	f7f7 fe9b 	bl	800015c <__adddf3>
 8008426:	4604      	mov	r4, r0
 8008428:	460d      	mov	r5, r1
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	4630      	mov	r0, r6
 8008430:	4639      	mov	r1, r7
 8008432:	f7f7 fe93 	bl	800015c <__adddf3>
 8008436:	4632      	mov	r2, r6
 8008438:	463b      	mov	r3, r7
 800843a:	4680      	mov	r8, r0
 800843c:	4689      	mov	r9, r1
 800843e:	f7f7 fe8b 	bl	8000158 <__aeabi_dsub>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4620      	mov	r0, r4
 8008448:	4629      	mov	r1, r5
 800844a:	f7f7 fe85 	bl	8000158 <__aeabi_dsub>
 800844e:	4642      	mov	r2, r8
 8008450:	4606      	mov	r6, r0
 8008452:	460f      	mov	r7, r1
 8008454:	464b      	mov	r3, r9
 8008456:	4640      	mov	r0, r8
 8008458:	4649      	mov	r1, r9
 800845a:	f7f8 f835 	bl	80004c8 <__aeabi_dmul>
 800845e:	a35c      	add	r3, pc, #368	; (adr r3, 80085d0 <__ieee754_pow+0x9d0>)
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	4604      	mov	r4, r0
 8008466:	460d      	mov	r5, r1
 8008468:	f7f8 f82e 	bl	80004c8 <__aeabi_dmul>
 800846c:	a35a      	add	r3, pc, #360	; (adr r3, 80085d8 <__ieee754_pow+0x9d8>)
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	f7f7 fe71 	bl	8000158 <__aeabi_dsub>
 8008476:	4622      	mov	r2, r4
 8008478:	462b      	mov	r3, r5
 800847a:	f7f8 f825 	bl	80004c8 <__aeabi_dmul>
 800847e:	a358      	add	r3, pc, #352	; (adr r3, 80085e0 <__ieee754_pow+0x9e0>)
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	f7f7 fe6a 	bl	800015c <__adddf3>
 8008488:	4622      	mov	r2, r4
 800848a:	462b      	mov	r3, r5
 800848c:	f7f8 f81c 	bl	80004c8 <__aeabi_dmul>
 8008490:	a355      	add	r3, pc, #340	; (adr r3, 80085e8 <__ieee754_pow+0x9e8>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f7 fe5f 	bl	8000158 <__aeabi_dsub>
 800849a:	4622      	mov	r2, r4
 800849c:	462b      	mov	r3, r5
 800849e:	f7f8 f813 	bl	80004c8 <__aeabi_dmul>
 80084a2:	a353      	add	r3, pc, #332	; (adr r3, 80085f0 <__ieee754_pow+0x9f0>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f7f7 fe58 	bl	800015c <__adddf3>
 80084ac:	4622      	mov	r2, r4
 80084ae:	462b      	mov	r3, r5
 80084b0:	f7f8 f80a 	bl	80004c8 <__aeabi_dmul>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	4640      	mov	r0, r8
 80084ba:	4649      	mov	r1, r9
 80084bc:	f7f7 fe4c 	bl	8000158 <__aeabi_dsub>
 80084c0:	4604      	mov	r4, r0
 80084c2:	460d      	mov	r5, r1
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4640      	mov	r0, r8
 80084ca:	4649      	mov	r1, r9
 80084cc:	f7f7 fffc 	bl	80004c8 <__aeabi_dmul>
 80084d0:	2200      	movs	r2, #0
 80084d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084da:	4620      	mov	r0, r4
 80084dc:	4629      	mov	r1, r5
 80084de:	f7f7 fe3b 	bl	8000158 <__aeabi_dsub>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ea:	f7f8 f917 	bl	800071c <__aeabi_ddiv>
 80084ee:	4632      	mov	r2, r6
 80084f0:	4604      	mov	r4, r0
 80084f2:	460d      	mov	r5, r1
 80084f4:	463b      	mov	r3, r7
 80084f6:	4640      	mov	r0, r8
 80084f8:	4649      	mov	r1, r9
 80084fa:	f7f7 ffe5 	bl	80004c8 <__aeabi_dmul>
 80084fe:	4632      	mov	r2, r6
 8008500:	463b      	mov	r3, r7
 8008502:	f7f7 fe2b 	bl	800015c <__adddf3>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4620      	mov	r0, r4
 800850c:	4629      	mov	r1, r5
 800850e:	f7f7 fe23 	bl	8000158 <__aeabi_dsub>
 8008512:	4642      	mov	r2, r8
 8008514:	464b      	mov	r3, r9
 8008516:	f7f7 fe1f 	bl	8000158 <__aeabi_dsub>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	2000      	movs	r0, #0
 8008520:	4939      	ldr	r1, [pc, #228]	; (8008608 <__ieee754_pow+0xa08>)
 8008522:	f7f7 fe19 	bl	8000158 <__aeabi_dsub>
 8008526:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800852a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800852e:	da2b      	bge.n	8008588 <__ieee754_pow+0x988>
 8008530:	4652      	mov	r2, sl
 8008532:	f001 f8e9 	bl	8009708 <scalbn>
 8008536:	e9dd 2300 	ldrd	r2, r3, [sp]
 800853a:	f7ff bbf6 	b.w	8007d2a <__ieee754_pow+0x12a>
 800853e:	4b33      	ldr	r3, [pc, #204]	; (800860c <__ieee754_pow+0xa0c>)
 8008540:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008544:	429f      	cmp	r7, r3
 8008546:	f77f af13 	ble.w	8008370 <__ieee754_pow+0x770>
 800854a:	4b31      	ldr	r3, [pc, #196]	; (8008610 <__ieee754_pow+0xa10>)
 800854c:	440b      	add	r3, r1
 800854e:	4303      	orrs	r3, r0
 8008550:	d00b      	beq.n	800856a <__ieee754_pow+0x96a>
 8008552:	a329      	add	r3, pc, #164	; (adr r3, 80085f8 <__ieee754_pow+0x9f8>)
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	e9dd 0100 	ldrd	r0, r1, [sp]
 800855c:	f7f7 ffb4 	bl	80004c8 <__aeabi_dmul>
 8008560:	a325      	add	r3, pc, #148	; (adr r3, 80085f8 <__ieee754_pow+0x9f8>)
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	f7ff bbe0 	b.w	8007d2a <__ieee754_pow+0x12a>
 800856a:	4622      	mov	r2, r4
 800856c:	462b      	mov	r3, r5
 800856e:	f7f7 fdf3 	bl	8000158 <__aeabi_dsub>
 8008572:	4642      	mov	r2, r8
 8008574:	464b      	mov	r3, r9
 8008576:	f7f8 fa2d 	bl	80009d4 <__aeabi_dcmpge>
 800857a:	2800      	cmp	r0, #0
 800857c:	f43f aef8 	beq.w	8008370 <__ieee754_pow+0x770>
 8008580:	e7e7      	b.n	8008552 <__ieee754_pow+0x952>
 8008582:	f04f 0a00 	mov.w	sl, #0
 8008586:	e71e      	b.n	80083c6 <__ieee754_pow+0x7c6>
 8008588:	4621      	mov	r1, r4
 800858a:	e7d4      	b.n	8008536 <__ieee754_pow+0x936>
 800858c:	f04f 0b00 	mov.w	fp, #0
 8008590:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008608 <__ieee754_pow+0xa08>
 8008594:	f7ff bb95 	b.w	8007cc2 <__ieee754_pow+0xc2>
 8008598:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800859c:	f7ff bb91 	b.w	8007cc2 <__ieee754_pow+0xc2>
 80085a0:	4638      	mov	r0, r7
 80085a2:	4641      	mov	r1, r8
 80085a4:	f7ff bbc3 	b.w	8007d2e <__ieee754_pow+0x12e>
 80085a8:	9200      	str	r2, [sp, #0]
 80085aa:	f7ff bb9f 	b.w	8007cec <__ieee754_pow+0xec>
 80085ae:	bf00      	nop
 80085b0:	652b82fe 	.word	0x652b82fe
 80085b4:	3c971547 	.word	0x3c971547
 80085b8:	00000000 	.word	0x00000000
 80085bc:	3fe62e43 	.word	0x3fe62e43
 80085c0:	fefa39ef 	.word	0xfefa39ef
 80085c4:	3fe62e42 	.word	0x3fe62e42
 80085c8:	0ca86c39 	.word	0x0ca86c39
 80085cc:	be205c61 	.word	0xbe205c61
 80085d0:	72bea4d0 	.word	0x72bea4d0
 80085d4:	3e663769 	.word	0x3e663769
 80085d8:	c5d26bf1 	.word	0xc5d26bf1
 80085dc:	3ebbbd41 	.word	0x3ebbbd41
 80085e0:	af25de2c 	.word	0xaf25de2c
 80085e4:	3f11566a 	.word	0x3f11566a
 80085e8:	16bebd93 	.word	0x16bebd93
 80085ec:	3f66c16c 	.word	0x3f66c16c
 80085f0:	5555553e 	.word	0x5555553e
 80085f4:	3fc55555 	.word	0x3fc55555
 80085f8:	c2f8f359 	.word	0xc2f8f359
 80085fc:	01a56e1f 	.word	0x01a56e1f
 8008600:	3fe00000 	.word	0x3fe00000
 8008604:	000fffff 	.word	0x000fffff
 8008608:	3ff00000 	.word	0x3ff00000
 800860c:	4090cbff 	.word	0x4090cbff
 8008610:	3f6f3400 	.word	0x3f6f3400
 8008614:	00000000 	.word	0x00000000

08008618 <__ieee754_rem_pio2>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	4614      	mov	r4, r2
 800861e:	4ac2      	ldr	r2, [pc, #776]	; (8008928 <__ieee754_rem_pio2+0x310>)
 8008620:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008624:	4592      	cmp	sl, r2
 8008626:	b08d      	sub	sp, #52	; 0x34
 8008628:	468b      	mov	fp, r1
 800862a:	dc07      	bgt.n	800863c <__ieee754_rem_pio2+0x24>
 800862c:	2200      	movs	r2, #0
 800862e:	2300      	movs	r3, #0
 8008630:	e9c4 0100 	strd	r0, r1, [r4]
 8008634:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008638:	2500      	movs	r5, #0
 800863a:	e023      	b.n	8008684 <__ieee754_rem_pio2+0x6c>
 800863c:	4abb      	ldr	r2, [pc, #748]	; (800892c <__ieee754_rem_pio2+0x314>)
 800863e:	4592      	cmp	sl, r2
 8008640:	dc71      	bgt.n	8008726 <__ieee754_rem_pio2+0x10e>
 8008642:	a3ab      	add	r3, pc, #684	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x2d8>)
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	2900      	cmp	r1, #0
 800864a:	4db9      	ldr	r5, [pc, #740]	; (8008930 <__ieee754_rem_pio2+0x318>)
 800864c:	dd36      	ble.n	80086bc <__ieee754_rem_pio2+0xa4>
 800864e:	f7f7 fd83 	bl	8000158 <__aeabi_dsub>
 8008652:	45aa      	cmp	sl, r5
 8008654:	4606      	mov	r6, r0
 8008656:	460f      	mov	r7, r1
 8008658:	d018      	beq.n	800868c <__ieee754_rem_pio2+0x74>
 800865a:	a3a7      	add	r3, pc, #668	; (adr r3, 80088f8 <__ieee754_rem_pio2+0x2e0>)
 800865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008660:	f7f7 fd7a 	bl	8000158 <__aeabi_dsub>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4630      	mov	r0, r6
 800866a:	e9c4 2300 	strd	r2, r3, [r4]
 800866e:	4639      	mov	r1, r7
 8008670:	f7f7 fd72 	bl	8000158 <__aeabi_dsub>
 8008674:	a3a0      	add	r3, pc, #640	; (adr r3, 80088f8 <__ieee754_rem_pio2+0x2e0>)
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f7f7 fd6d 	bl	8000158 <__aeabi_dsub>
 800867e:	2501      	movs	r5, #1
 8008680:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008684:	4628      	mov	r0, r5
 8008686:	b00d      	add	sp, #52	; 0x34
 8008688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868c:	a39c      	add	r3, pc, #624	; (adr r3, 8008900 <__ieee754_rem_pio2+0x2e8>)
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	f7f7 fd61 	bl	8000158 <__aeabi_dsub>
 8008696:	a39c      	add	r3, pc, #624	; (adr r3, 8008908 <__ieee754_rem_pio2+0x2f0>)
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	4606      	mov	r6, r0
 800869e:	460f      	mov	r7, r1
 80086a0:	f7f7 fd5a 	bl	8000158 <__aeabi_dsub>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4630      	mov	r0, r6
 80086aa:	e9c4 2300 	strd	r2, r3, [r4]
 80086ae:	4639      	mov	r1, r7
 80086b0:	f7f7 fd52 	bl	8000158 <__aeabi_dsub>
 80086b4:	a394      	add	r3, pc, #592	; (adr r3, 8008908 <__ieee754_rem_pio2+0x2f0>)
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	e7de      	b.n	800867a <__ieee754_rem_pio2+0x62>
 80086bc:	f7f7 fd4e 	bl	800015c <__adddf3>
 80086c0:	45aa      	cmp	sl, r5
 80086c2:	4606      	mov	r6, r0
 80086c4:	460f      	mov	r7, r1
 80086c6:	d016      	beq.n	80086f6 <__ieee754_rem_pio2+0xde>
 80086c8:	a38b      	add	r3, pc, #556	; (adr r3, 80088f8 <__ieee754_rem_pio2+0x2e0>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f7f7 fd45 	bl	800015c <__adddf3>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4630      	mov	r0, r6
 80086d8:	e9c4 2300 	strd	r2, r3, [r4]
 80086dc:	4639      	mov	r1, r7
 80086de:	f7f7 fd3b 	bl	8000158 <__aeabi_dsub>
 80086e2:	a385      	add	r3, pc, #532	; (adr r3, 80088f8 <__ieee754_rem_pio2+0x2e0>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 fd38 	bl	800015c <__adddf3>
 80086ec:	f04f 35ff 	mov.w	r5, #4294967295
 80086f0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80086f4:	e7c6      	b.n	8008684 <__ieee754_rem_pio2+0x6c>
 80086f6:	a382      	add	r3, pc, #520	; (adr r3, 8008900 <__ieee754_rem_pio2+0x2e8>)
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	f7f7 fd2e 	bl	800015c <__adddf3>
 8008700:	a381      	add	r3, pc, #516	; (adr r3, 8008908 <__ieee754_rem_pio2+0x2f0>)
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	4606      	mov	r6, r0
 8008708:	460f      	mov	r7, r1
 800870a:	f7f7 fd27 	bl	800015c <__adddf3>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4630      	mov	r0, r6
 8008714:	e9c4 2300 	strd	r2, r3, [r4]
 8008718:	4639      	mov	r1, r7
 800871a:	f7f7 fd1d 	bl	8000158 <__aeabi_dsub>
 800871e:	a37a      	add	r3, pc, #488	; (adr r3, 8008908 <__ieee754_rem_pio2+0x2f0>)
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	e7e0      	b.n	80086e8 <__ieee754_rem_pio2+0xd0>
 8008726:	4a83      	ldr	r2, [pc, #524]	; (8008934 <__ieee754_rem_pio2+0x31c>)
 8008728:	4592      	cmp	sl, r2
 800872a:	f300 80d2 	bgt.w	80088d2 <__ieee754_rem_pio2+0x2ba>
 800872e:	f7fe fe27 	bl	8007380 <fabs>
 8008732:	a377      	add	r3, pc, #476	; (adr r3, 8008910 <__ieee754_rem_pio2+0x2f8>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	4606      	mov	r6, r0
 800873a:	460f      	mov	r7, r1
 800873c:	f7f7 fec4 	bl	80004c8 <__aeabi_dmul>
 8008740:	2200      	movs	r2, #0
 8008742:	4b7d      	ldr	r3, [pc, #500]	; (8008938 <__ieee754_rem_pio2+0x320>)
 8008744:	f7f7 fd0a 	bl	800015c <__adddf3>
 8008748:	f7f8 f96e 	bl	8000a28 <__aeabi_d2iz>
 800874c:	4605      	mov	r5, r0
 800874e:	f7f7 fe51 	bl	80003f4 <__aeabi_i2d>
 8008752:	a367      	add	r3, pc, #412	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x2d8>)
 8008754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800875c:	f7f7 feb4 	bl	80004c8 <__aeabi_dmul>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4630      	mov	r0, r6
 8008766:	4639      	mov	r1, r7
 8008768:	f7f7 fcf6 	bl	8000158 <__aeabi_dsub>
 800876c:	a362      	add	r3, pc, #392	; (adr r3, 80088f8 <__ieee754_rem_pio2+0x2e0>)
 800876e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008772:	4606      	mov	r6, r0
 8008774:	460f      	mov	r7, r1
 8008776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800877a:	f7f7 fea5 	bl	80004c8 <__aeabi_dmul>
 800877e:	2d1f      	cmp	r5, #31
 8008780:	4680      	mov	r8, r0
 8008782:	4689      	mov	r9, r1
 8008784:	dc0e      	bgt.n	80087a4 <__ieee754_rem_pio2+0x18c>
 8008786:	4b6d      	ldr	r3, [pc, #436]	; (800893c <__ieee754_rem_pio2+0x324>)
 8008788:	1e6a      	subs	r2, r5, #1
 800878a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878e:	4553      	cmp	r3, sl
 8008790:	d008      	beq.n	80087a4 <__ieee754_rem_pio2+0x18c>
 8008792:	4642      	mov	r2, r8
 8008794:	464b      	mov	r3, r9
 8008796:	4630      	mov	r0, r6
 8008798:	4639      	mov	r1, r7
 800879a:	f7f7 fcdd 	bl	8000158 <__aeabi_dsub>
 800879e:	e9c4 0100 	strd	r0, r1, [r4]
 80087a2:	e011      	b.n	80087c8 <__ieee754_rem_pio2+0x1b0>
 80087a4:	464b      	mov	r3, r9
 80087a6:	4642      	mov	r2, r8
 80087a8:	4630      	mov	r0, r6
 80087aa:	4639      	mov	r1, r7
 80087ac:	f7f7 fcd4 	bl	8000158 <__aeabi_dsub>
 80087b0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80087b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80087b8:	ebaa 0303 	sub.w	r3, sl, r3
 80087bc:	2b10      	cmp	r3, #16
 80087be:	dc1f      	bgt.n	8008800 <__ieee754_rem_pio2+0x1e8>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	e9c4 2300 	strd	r2, r3, [r4]
 80087c8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80087cc:	4630      	mov	r0, r6
 80087ce:	4653      	mov	r3, sl
 80087d0:	4639      	mov	r1, r7
 80087d2:	f7f7 fcc1 	bl	8000158 <__aeabi_dsub>
 80087d6:	4642      	mov	r2, r8
 80087d8:	464b      	mov	r3, r9
 80087da:	f7f7 fcbd 	bl	8000158 <__aeabi_dsub>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	f1bb 0f00 	cmp.w	fp, #0
 80087e6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80087ea:	f6bf af4b 	bge.w	8008684 <__ieee754_rem_pio2+0x6c>
 80087ee:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80087f2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 80087f6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80087fa:	60e1      	str	r1, [r4, #12]
 80087fc:	426d      	negs	r5, r5
 80087fe:	e741      	b.n	8008684 <__ieee754_rem_pio2+0x6c>
 8008800:	a33f      	add	r3, pc, #252	; (adr r3, 8008900 <__ieee754_rem_pio2+0x2e8>)
 8008802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800880a:	f7f7 fe5d 	bl	80004c8 <__aeabi_dmul>
 800880e:	4680      	mov	r8, r0
 8008810:	4689      	mov	r9, r1
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4630      	mov	r0, r6
 8008818:	4639      	mov	r1, r7
 800881a:	f7f7 fc9d 	bl	8000158 <__aeabi_dsub>
 800881e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4630      	mov	r0, r6
 8008828:	4639      	mov	r1, r7
 800882a:	f7f7 fc95 	bl	8000158 <__aeabi_dsub>
 800882e:	4642      	mov	r2, r8
 8008830:	464b      	mov	r3, r9
 8008832:	f7f7 fc91 	bl	8000158 <__aeabi_dsub>
 8008836:	a334      	add	r3, pc, #208	; (adr r3, 8008908 <__ieee754_rem_pio2+0x2f0>)
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	4606      	mov	r6, r0
 800883e:	460f      	mov	r7, r1
 8008840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008844:	f7f7 fe40 	bl	80004c8 <__aeabi_dmul>
 8008848:	4632      	mov	r2, r6
 800884a:	463b      	mov	r3, r7
 800884c:	f7f7 fc84 	bl	8000158 <__aeabi_dsub>
 8008850:	460b      	mov	r3, r1
 8008852:	4602      	mov	r2, r0
 8008854:	4680      	mov	r8, r0
 8008856:	4689      	mov	r9, r1
 8008858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800885c:	f7f7 fc7c 	bl	8000158 <__aeabi_dsub>
 8008860:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008864:	ebaa 0a03 	sub.w	sl, sl, r3
 8008868:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800886c:	dc06      	bgt.n	800887c <__ieee754_rem_pio2+0x264>
 800886e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	e9c4 2300 	strd	r2, r3, [r4]
 800887a:	e7a5      	b.n	80087c8 <__ieee754_rem_pio2+0x1b0>
 800887c:	a326      	add	r3, pc, #152	; (adr r3, 8008918 <__ieee754_rem_pio2+0x300>)
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008886:	f7f7 fe1f 	bl	80004c8 <__aeabi_dmul>
 800888a:	4680      	mov	r8, r0
 800888c:	4689      	mov	r9, r1
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008896:	f7f7 fc5f 	bl	8000158 <__aeabi_dsub>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	4606      	mov	r6, r0
 80088a0:	460f      	mov	r7, r1
 80088a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088a6:	f7f7 fc57 	bl	8000158 <__aeabi_dsub>
 80088aa:	4642      	mov	r2, r8
 80088ac:	464b      	mov	r3, r9
 80088ae:	f7f7 fc53 	bl	8000158 <__aeabi_dsub>
 80088b2:	a31b      	add	r3, pc, #108	; (adr r3, 8008920 <__ieee754_rem_pio2+0x308>)
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	4680      	mov	r8, r0
 80088ba:	4689      	mov	r9, r1
 80088bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088c0:	f7f7 fe02 	bl	80004c8 <__aeabi_dmul>
 80088c4:	4642      	mov	r2, r8
 80088c6:	464b      	mov	r3, r9
 80088c8:	f7f7 fc46 	bl	8000158 <__aeabi_dsub>
 80088cc:	4680      	mov	r8, r0
 80088ce:	4689      	mov	r9, r1
 80088d0:	e75f      	b.n	8008792 <__ieee754_rem_pio2+0x17a>
 80088d2:	4a1b      	ldr	r2, [pc, #108]	; (8008940 <__ieee754_rem_pio2+0x328>)
 80088d4:	4592      	cmp	sl, r2
 80088d6:	dd35      	ble.n	8008944 <__ieee754_rem_pio2+0x32c>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	f7f7 fc3c 	bl	8000158 <__aeabi_dsub>
 80088e0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80088e4:	e9c4 0100 	strd	r0, r1, [r4]
 80088e8:	e6a6      	b.n	8008638 <__ieee754_rem_pio2+0x20>
 80088ea:	bf00      	nop
 80088ec:	f3af 8000 	nop.w
 80088f0:	54400000 	.word	0x54400000
 80088f4:	3ff921fb 	.word	0x3ff921fb
 80088f8:	1a626331 	.word	0x1a626331
 80088fc:	3dd0b461 	.word	0x3dd0b461
 8008900:	1a600000 	.word	0x1a600000
 8008904:	3dd0b461 	.word	0x3dd0b461
 8008908:	2e037073 	.word	0x2e037073
 800890c:	3ba3198a 	.word	0x3ba3198a
 8008910:	6dc9c883 	.word	0x6dc9c883
 8008914:	3fe45f30 	.word	0x3fe45f30
 8008918:	2e000000 	.word	0x2e000000
 800891c:	3ba3198a 	.word	0x3ba3198a
 8008920:	252049c1 	.word	0x252049c1
 8008924:	397b839a 	.word	0x397b839a
 8008928:	3fe921fb 	.word	0x3fe921fb
 800892c:	4002d97b 	.word	0x4002d97b
 8008930:	3ff921fb 	.word	0x3ff921fb
 8008934:	413921fb 	.word	0x413921fb
 8008938:	3fe00000 	.word	0x3fe00000
 800893c:	08009918 	.word	0x08009918
 8008940:	7fefffff 	.word	0x7fefffff
 8008944:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008948:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800894c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008950:	460f      	mov	r7, r1
 8008952:	4606      	mov	r6, r0
 8008954:	f7f8 f868 	bl	8000a28 <__aeabi_d2iz>
 8008958:	f7f7 fd4c 	bl	80003f4 <__aeabi_i2d>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	4630      	mov	r0, r6
 8008962:	4639      	mov	r1, r7
 8008964:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008968:	f7f7 fbf6 	bl	8000158 <__aeabi_dsub>
 800896c:	2200      	movs	r2, #0
 800896e:	4b20      	ldr	r3, [pc, #128]	; (80089f0 <__ieee754_rem_pio2+0x3d8>)
 8008970:	f7f7 fdaa 	bl	80004c8 <__aeabi_dmul>
 8008974:	460f      	mov	r7, r1
 8008976:	4606      	mov	r6, r0
 8008978:	f7f8 f856 	bl	8000a28 <__aeabi_d2iz>
 800897c:	f7f7 fd3a 	bl	80003f4 <__aeabi_i2d>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4630      	mov	r0, r6
 8008986:	4639      	mov	r1, r7
 8008988:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800898c:	f7f7 fbe4 	bl	8000158 <__aeabi_dsub>
 8008990:	2200      	movs	r2, #0
 8008992:	4b17      	ldr	r3, [pc, #92]	; (80089f0 <__ieee754_rem_pio2+0x3d8>)
 8008994:	f7f7 fd98 	bl	80004c8 <__aeabi_dmul>
 8008998:	f04f 0803 	mov.w	r8, #3
 800899c:	2600      	movs	r6, #0
 800899e:	2700      	movs	r7, #0
 80089a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80089a4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80089a8:	4632      	mov	r2, r6
 80089aa:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80089ae:	463b      	mov	r3, r7
 80089b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80089b4:	f7f7 fff0 	bl	8000998 <__aeabi_dcmpeq>
 80089b8:	b9b8      	cbnz	r0, 80089ea <__ieee754_rem_pio2+0x3d2>
 80089ba:	4b0e      	ldr	r3, [pc, #56]	; (80089f4 <__ieee754_rem_pio2+0x3dc>)
 80089bc:	462a      	mov	r2, r5
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	2302      	movs	r3, #2
 80089c2:	4621      	mov	r1, r4
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	a806      	add	r0, sp, #24
 80089c8:	4643      	mov	r3, r8
 80089ca:	f000 f97f 	bl	8008ccc <__kernel_rem_pio2>
 80089ce:	f1bb 0f00 	cmp.w	fp, #0
 80089d2:	4605      	mov	r5, r0
 80089d4:	f6bf ae56 	bge.w	8008684 <__ieee754_rem_pio2+0x6c>
 80089d8:	6863      	ldr	r3, [r4, #4]
 80089da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089de:	6063      	str	r3, [r4, #4]
 80089e0:	68e3      	ldr	r3, [r4, #12]
 80089e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	60e3      	str	r3, [r4, #12]
 80089e8:	e708      	b.n	80087fc <__ieee754_rem_pio2+0x1e4>
 80089ea:	46d0      	mov	r8, sl
 80089ec:	e7dc      	b.n	80089a8 <__ieee754_rem_pio2+0x390>
 80089ee:	bf00      	nop
 80089f0:	41700000 	.word	0x41700000
 80089f4:	08009998 	.word	0x08009998

080089f8 <__ieee754_sqrt>:
 80089f8:	4b54      	ldr	r3, [pc, #336]	; (8008b4c <__ieee754_sqrt+0x154>)
 80089fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	438b      	bics	r3, r1
 8008a00:	4606      	mov	r6, r0
 8008a02:	460d      	mov	r5, r1
 8008a04:	460a      	mov	r2, r1
 8008a06:	460c      	mov	r4, r1
 8008a08:	d10f      	bne.n	8008a2a <__ieee754_sqrt+0x32>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	f7f7 fd5b 	bl	80004c8 <__aeabi_dmul>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4630      	mov	r0, r6
 8008a18:	4629      	mov	r1, r5
 8008a1a:	f7f7 fb9f 	bl	800015c <__adddf3>
 8008a1e:	4606      	mov	r6, r0
 8008a20:	460d      	mov	r5, r1
 8008a22:	4630      	mov	r0, r6
 8008a24:	4629      	mov	r1, r5
 8008a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a2a:	2900      	cmp	r1, #0
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	dc0e      	bgt.n	8008a50 <__ieee754_sqrt+0x58>
 8008a32:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008a36:	ea5c 0707 	orrs.w	r7, ip, r7
 8008a3a:	d0f2      	beq.n	8008a22 <__ieee754_sqrt+0x2a>
 8008a3c:	b141      	cbz	r1, 8008a50 <__ieee754_sqrt+0x58>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	f7f7 fb89 	bl	8000158 <__aeabi_dsub>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	f7f7 fe67 	bl	800071c <__aeabi_ddiv>
 8008a4e:	e7e6      	b.n	8008a1e <__ieee754_sqrt+0x26>
 8008a50:	1512      	asrs	r2, r2, #20
 8008a52:	d074      	beq.n	8008b3e <__ieee754_sqrt+0x146>
 8008a54:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008a58:	07d5      	lsls	r5, r2, #31
 8008a5a:	f04f 0500 	mov.w	r5, #0
 8008a5e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008a62:	bf48      	it	mi
 8008a64:	0fd9      	lsrmi	r1, r3, #31
 8008a66:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008a6a:	bf44      	itt	mi
 8008a6c:	005b      	lslmi	r3, r3, #1
 8008a6e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8008a72:	1051      	asrs	r1, r2, #1
 8008a74:	0fda      	lsrs	r2, r3, #31
 8008a76:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	2216      	movs	r2, #22
 8008a7e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008a82:	005b      	lsls	r3, r3, #1
 8008a84:	1987      	adds	r7, r0, r6
 8008a86:	42a7      	cmp	r7, r4
 8008a88:	bfde      	ittt	le
 8008a8a:	19b8      	addle	r0, r7, r6
 8008a8c:	1be4      	suble	r4, r4, r7
 8008a8e:	19ad      	addle	r5, r5, r6
 8008a90:	0fdf      	lsrs	r7, r3, #31
 8008a92:	3a01      	subs	r2, #1
 8008a94:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8008a98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a9c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008aa0:	d1f0      	bne.n	8008a84 <__ieee754_sqrt+0x8c>
 8008aa2:	f04f 0c20 	mov.w	ip, #32
 8008aa6:	4696      	mov	lr, r2
 8008aa8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008aac:	4284      	cmp	r4, r0
 8008aae:	eb06 070e 	add.w	r7, r6, lr
 8008ab2:	dc02      	bgt.n	8008aba <__ieee754_sqrt+0xc2>
 8008ab4:	d112      	bne.n	8008adc <__ieee754_sqrt+0xe4>
 8008ab6:	429f      	cmp	r7, r3
 8008ab8:	d810      	bhi.n	8008adc <__ieee754_sqrt+0xe4>
 8008aba:	2f00      	cmp	r7, #0
 8008abc:	eb07 0e06 	add.w	lr, r7, r6
 8008ac0:	da42      	bge.n	8008b48 <__ieee754_sqrt+0x150>
 8008ac2:	f1be 0f00 	cmp.w	lr, #0
 8008ac6:	db3f      	blt.n	8008b48 <__ieee754_sqrt+0x150>
 8008ac8:	f100 0801 	add.w	r8, r0, #1
 8008acc:	1a24      	subs	r4, r4, r0
 8008ace:	4640      	mov	r0, r8
 8008ad0:	429f      	cmp	r7, r3
 8008ad2:	bf88      	it	hi
 8008ad4:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8008ad8:	1bdb      	subs	r3, r3, r7
 8008ada:	4432      	add	r2, r6
 8008adc:	0064      	lsls	r4, r4, #1
 8008ade:	f1bc 0c01 	subs.w	ip, ip, #1
 8008ae2:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8008ae6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008aea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008aee:	d1dd      	bne.n	8008aac <__ieee754_sqrt+0xb4>
 8008af0:	4323      	orrs	r3, r4
 8008af2:	d006      	beq.n	8008b02 <__ieee754_sqrt+0x10a>
 8008af4:	1c54      	adds	r4, r2, #1
 8008af6:	bf0b      	itete	eq
 8008af8:	4662      	moveq	r2, ip
 8008afa:	3201      	addne	r2, #1
 8008afc:	3501      	addeq	r5, #1
 8008afe:	f022 0201 	bicne.w	r2, r2, #1
 8008b02:	106b      	asrs	r3, r5, #1
 8008b04:	0852      	lsrs	r2, r2, #1
 8008b06:	07e8      	lsls	r0, r5, #31
 8008b08:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008b0c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008b10:	bf48      	it	mi
 8008b12:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008b16:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8008b1a:	4616      	mov	r6, r2
 8008b1c:	e781      	b.n	8008a22 <__ieee754_sqrt+0x2a>
 8008b1e:	0adc      	lsrs	r4, r3, #11
 8008b20:	3915      	subs	r1, #21
 8008b22:	055b      	lsls	r3, r3, #21
 8008b24:	2c00      	cmp	r4, #0
 8008b26:	d0fa      	beq.n	8008b1e <__ieee754_sqrt+0x126>
 8008b28:	02e6      	lsls	r6, r4, #11
 8008b2a:	d50a      	bpl.n	8008b42 <__ieee754_sqrt+0x14a>
 8008b2c:	f1c2 0020 	rsb	r0, r2, #32
 8008b30:	fa23 f000 	lsr.w	r0, r3, r0
 8008b34:	1e55      	subs	r5, r2, #1
 8008b36:	4093      	lsls	r3, r2
 8008b38:	4304      	orrs	r4, r0
 8008b3a:	1b4a      	subs	r2, r1, r5
 8008b3c:	e78a      	b.n	8008a54 <__ieee754_sqrt+0x5c>
 8008b3e:	4611      	mov	r1, r2
 8008b40:	e7f0      	b.n	8008b24 <__ieee754_sqrt+0x12c>
 8008b42:	0064      	lsls	r4, r4, #1
 8008b44:	3201      	adds	r2, #1
 8008b46:	e7ef      	b.n	8008b28 <__ieee754_sqrt+0x130>
 8008b48:	4680      	mov	r8, r0
 8008b4a:	e7bf      	b.n	8008acc <__ieee754_sqrt+0xd4>
 8008b4c:	7ff00000 	.word	0x7ff00000

08008b50 <__kernel_cos>:
 8008b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008b58:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008b5c:	4680      	mov	r8, r0
 8008b5e:	460f      	mov	r7, r1
 8008b60:	e9cd 2300 	strd	r2, r3, [sp]
 8008b64:	da04      	bge.n	8008b70 <__kernel_cos+0x20>
 8008b66:	f7f7 ff5f 	bl	8000a28 <__aeabi_d2iz>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	f000 8086 	beq.w	8008c7c <__kernel_cos+0x12c>
 8008b70:	4642      	mov	r2, r8
 8008b72:	463b      	mov	r3, r7
 8008b74:	4640      	mov	r0, r8
 8008b76:	4639      	mov	r1, r7
 8008b78:	f7f7 fca6 	bl	80004c8 <__aeabi_dmul>
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4b4e      	ldr	r3, [pc, #312]	; (8008cb8 <__kernel_cos+0x168>)
 8008b80:	4604      	mov	r4, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	f7f7 fca0 	bl	80004c8 <__aeabi_dmul>
 8008b88:	a33f      	add	r3, pc, #252	; (adr r3, 8008c88 <__kernel_cos+0x138>)
 8008b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8e:	4682      	mov	sl, r0
 8008b90:	468b      	mov	fp, r1
 8008b92:	4620      	mov	r0, r4
 8008b94:	4629      	mov	r1, r5
 8008b96:	f7f7 fc97 	bl	80004c8 <__aeabi_dmul>
 8008b9a:	a33d      	add	r3, pc, #244	; (adr r3, 8008c90 <__kernel_cos+0x140>)
 8008b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba0:	f7f7 fadc 	bl	800015c <__adddf3>
 8008ba4:	4622      	mov	r2, r4
 8008ba6:	462b      	mov	r3, r5
 8008ba8:	f7f7 fc8e 	bl	80004c8 <__aeabi_dmul>
 8008bac:	a33a      	add	r3, pc, #232	; (adr r3, 8008c98 <__kernel_cos+0x148>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	f7f7 fad1 	bl	8000158 <__aeabi_dsub>
 8008bb6:	4622      	mov	r2, r4
 8008bb8:	462b      	mov	r3, r5
 8008bba:	f7f7 fc85 	bl	80004c8 <__aeabi_dmul>
 8008bbe:	a338      	add	r3, pc, #224	; (adr r3, 8008ca0 <__kernel_cos+0x150>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 faca 	bl	800015c <__adddf3>
 8008bc8:	4622      	mov	r2, r4
 8008bca:	462b      	mov	r3, r5
 8008bcc:	f7f7 fc7c 	bl	80004c8 <__aeabi_dmul>
 8008bd0:	a335      	add	r3, pc, #212	; (adr r3, 8008ca8 <__kernel_cos+0x158>)
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f7f7 fabf 	bl	8000158 <__aeabi_dsub>
 8008bda:	4622      	mov	r2, r4
 8008bdc:	462b      	mov	r3, r5
 8008bde:	f7f7 fc73 	bl	80004c8 <__aeabi_dmul>
 8008be2:	a333      	add	r3, pc, #204	; (adr r3, 8008cb0 <__kernel_cos+0x160>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 fab8 	bl	800015c <__adddf3>
 8008bec:	4622      	mov	r2, r4
 8008bee:	462b      	mov	r3, r5
 8008bf0:	f7f7 fc6a 	bl	80004c8 <__aeabi_dmul>
 8008bf4:	4622      	mov	r2, r4
 8008bf6:	462b      	mov	r3, r5
 8008bf8:	f7f7 fc66 	bl	80004c8 <__aeabi_dmul>
 8008bfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c00:	4604      	mov	r4, r0
 8008c02:	460d      	mov	r5, r1
 8008c04:	4640      	mov	r0, r8
 8008c06:	4639      	mov	r1, r7
 8008c08:	f7f7 fc5e 	bl	80004c8 <__aeabi_dmul>
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4629      	mov	r1, r5
 8008c12:	4620      	mov	r0, r4
 8008c14:	f7f7 faa0 	bl	8000158 <__aeabi_dsub>
 8008c18:	4b28      	ldr	r3, [pc, #160]	; (8008cbc <__kernel_cos+0x16c>)
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	429e      	cmp	r6, r3
 8008c1e:	4689      	mov	r9, r1
 8008c20:	dc0e      	bgt.n	8008c40 <__kernel_cos+0xf0>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4650      	mov	r0, sl
 8008c28:	4659      	mov	r1, fp
 8008c2a:	f7f7 fa95 	bl	8000158 <__aeabi_dsub>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	2000      	movs	r0, #0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4922      	ldr	r1, [pc, #136]	; (8008cc0 <__kernel_cos+0x170>)
 8008c36:	f7f7 fa8f 	bl	8000158 <__aeabi_dsub>
 8008c3a:	b003      	add	sp, #12
 8008c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c40:	2400      	movs	r4, #0
 8008c42:	4b20      	ldr	r3, [pc, #128]	; (8008cc4 <__kernel_cos+0x174>)
 8008c44:	4622      	mov	r2, r4
 8008c46:	429e      	cmp	r6, r3
 8008c48:	bfcc      	ite	gt
 8008c4a:	4d1f      	ldrgt	r5, [pc, #124]	; (8008cc8 <__kernel_cos+0x178>)
 8008c4c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008c50:	462b      	mov	r3, r5
 8008c52:	2000      	movs	r0, #0
 8008c54:	491a      	ldr	r1, [pc, #104]	; (8008cc0 <__kernel_cos+0x170>)
 8008c56:	f7f7 fa7f 	bl	8000158 <__aeabi_dsub>
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	460f      	mov	r7, r1
 8008c60:	462b      	mov	r3, r5
 8008c62:	4650      	mov	r0, sl
 8008c64:	4659      	mov	r1, fp
 8008c66:	f7f7 fa77 	bl	8000158 <__aeabi_dsub>
 8008c6a:	4642      	mov	r2, r8
 8008c6c:	464b      	mov	r3, r9
 8008c6e:	f7f7 fa73 	bl	8000158 <__aeabi_dsub>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4630      	mov	r0, r6
 8008c78:	4639      	mov	r1, r7
 8008c7a:	e7dc      	b.n	8008c36 <__kernel_cos+0xe6>
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	4910      	ldr	r1, [pc, #64]	; (8008cc0 <__kernel_cos+0x170>)
 8008c80:	e7db      	b.n	8008c3a <__kernel_cos+0xea>
 8008c82:	bf00      	nop
 8008c84:	f3af 8000 	nop.w
 8008c88:	be8838d4 	.word	0xbe8838d4
 8008c8c:	bda8fae9 	.word	0xbda8fae9
 8008c90:	bdb4b1c4 	.word	0xbdb4b1c4
 8008c94:	3e21ee9e 	.word	0x3e21ee9e
 8008c98:	809c52ad 	.word	0x809c52ad
 8008c9c:	3e927e4f 	.word	0x3e927e4f
 8008ca0:	19cb1590 	.word	0x19cb1590
 8008ca4:	3efa01a0 	.word	0x3efa01a0
 8008ca8:	16c15177 	.word	0x16c15177
 8008cac:	3f56c16c 	.word	0x3f56c16c
 8008cb0:	5555554c 	.word	0x5555554c
 8008cb4:	3fa55555 	.word	0x3fa55555
 8008cb8:	3fe00000 	.word	0x3fe00000
 8008cbc:	3fd33332 	.word	0x3fd33332
 8008cc0:	3ff00000 	.word	0x3ff00000
 8008cc4:	3fe90000 	.word	0x3fe90000
 8008cc8:	3fd20000 	.word	0x3fd20000

08008ccc <__kernel_rem_pio2>:
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008cd4:	9307      	str	r3, [sp, #28]
 8008cd6:	9104      	str	r1, [sp, #16]
 8008cd8:	4bbf      	ldr	r3, [pc, #764]	; (8008fd8 <__kernel_rem_pio2+0x30c>)
 8008cda:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008cdc:	1ed4      	subs	r4, r2, #3
 8008cde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ce2:	2500      	movs	r5, #0
 8008ce4:	9302      	str	r3, [sp, #8]
 8008ce6:	9b07      	ldr	r3, [sp, #28]
 8008ce8:	9008      	str	r0, [sp, #32]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	9306      	str	r3, [sp, #24]
 8008cee:	2318      	movs	r3, #24
 8008cf0:	fb94 f4f3 	sdiv	r4, r4, r3
 8008cf4:	f06f 0317 	mvn.w	r3, #23
 8008cf8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008cfc:	fb04 3303 	mla	r3, r4, r3, r3
 8008d00:	eb03 0a02 	add.w	sl, r3, r2
 8008d04:	9a06      	ldr	r2, [sp, #24]
 8008d06:	9b02      	ldr	r3, [sp, #8]
 8008d08:	1aa7      	subs	r7, r4, r2
 8008d0a:	eb03 0802 	add.w	r8, r3, r2
 8008d0e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008d10:	2200      	movs	r2, #0
 8008d12:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008d16:	2300      	movs	r3, #0
 8008d18:	ae1e      	add	r6, sp, #120	; 0x78
 8008d1a:	4545      	cmp	r5, r8
 8008d1c:	dd14      	ble.n	8008d48 <__kernel_rem_pio2+0x7c>
 8008d1e:	2600      	movs	r6, #0
 8008d20:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8008d24:	9b02      	ldr	r3, [sp, #8]
 8008d26:	429e      	cmp	r6, r3
 8008d28:	dc39      	bgt.n	8008d9e <__kernel_rem_pio2+0xd2>
 8008d2a:	9b08      	ldr	r3, [sp, #32]
 8008d2c:	f04f 0800 	mov.w	r8, #0
 8008d30:	3b08      	subs	r3, #8
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	9b07      	ldr	r3, [sp, #28]
 8008d36:	f04f 0900 	mov.w	r9, #0
 8008d3a:	199d      	adds	r5, r3, r6
 8008d3c:	ab20      	add	r3, sp, #128	; 0x80
 8008d3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d42:	9305      	str	r3, [sp, #20]
 8008d44:	2700      	movs	r7, #0
 8008d46:	e023      	b.n	8008d90 <__kernel_rem_pio2+0xc4>
 8008d48:	42ef      	cmn	r7, r5
 8008d4a:	d40b      	bmi.n	8008d64 <__kernel_rem_pio2+0x98>
 8008d4c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008d50:	e9cd 2300 	strd	r2, r3, [sp]
 8008d54:	f7f7 fb4e 	bl	80003f4 <__aeabi_i2d>
 8008d58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d5c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8008d60:	3501      	adds	r5, #1
 8008d62:	e7da      	b.n	8008d1a <__kernel_rem_pio2+0x4e>
 8008d64:	4610      	mov	r0, r2
 8008d66:	4619      	mov	r1, r3
 8008d68:	e7f8      	b.n	8008d5c <__kernel_rem_pio2+0x90>
 8008d6a:	9905      	ldr	r1, [sp, #20]
 8008d6c:	9d00      	ldr	r5, [sp, #0]
 8008d6e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008d72:	9105      	str	r1, [sp, #20]
 8008d74:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8008d78:	9500      	str	r5, [sp, #0]
 8008d7a:	f7f7 fba5 	bl	80004c8 <__aeabi_dmul>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4640      	mov	r0, r8
 8008d84:	4649      	mov	r1, r9
 8008d86:	f7f7 f9e9 	bl	800015c <__adddf3>
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	4689      	mov	r9, r1
 8008d8e:	3701      	adds	r7, #1
 8008d90:	9b06      	ldr	r3, [sp, #24]
 8008d92:	429f      	cmp	r7, r3
 8008d94:	dde9      	ble.n	8008d6a <__kernel_rem_pio2+0x9e>
 8008d96:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8008d9a:	3601      	adds	r6, #1
 8008d9c:	e7c2      	b.n	8008d24 <__kernel_rem_pio2+0x58>
 8008d9e:	9b02      	ldr	r3, [sp, #8]
 8008da0:	aa0c      	add	r2, sp, #48	; 0x30
 8008da2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008da8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008daa:	9f02      	ldr	r7, [sp, #8]
 8008dac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008db0:	930a      	str	r3, [sp, #40]	; 0x28
 8008db2:	2600      	movs	r6, #0
 8008db4:	ab98      	add	r3, sp, #608	; 0x260
 8008db6:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8008dba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008dbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008dc2:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008dc6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8008dca:	ab98      	add	r3, sp, #608	; 0x260
 8008dcc:	445b      	add	r3, fp
 8008dce:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 8008dd2:	1bbb      	subs	r3, r7, r6
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	dc71      	bgt.n	8008ebc <__kernel_rem_pio2+0x1f0>
 8008dd8:	4652      	mov	r2, sl
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4649      	mov	r1, r9
 8008dde:	f000 fc93 	bl	8009708 <scalbn>
 8008de2:	2200      	movs	r2, #0
 8008de4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008de8:	4604      	mov	r4, r0
 8008dea:	460d      	mov	r5, r1
 8008dec:	f7f7 fb6c 	bl	80004c8 <__aeabi_dmul>
 8008df0:	f000 fb72 	bl	80094d8 <floor>
 8008df4:	2200      	movs	r2, #0
 8008df6:	4b79      	ldr	r3, [pc, #484]	; (8008fdc <__kernel_rem_pio2+0x310>)
 8008df8:	f7f7 fb66 	bl	80004c8 <__aeabi_dmul>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4620      	mov	r0, r4
 8008e02:	4629      	mov	r1, r5
 8008e04:	f7f7 f9a8 	bl	8000158 <__aeabi_dsub>
 8008e08:	460d      	mov	r5, r1
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	f7f7 fe0c 	bl	8000a28 <__aeabi_d2iz>
 8008e10:	9005      	str	r0, [sp, #20]
 8008e12:	f7f7 faef 	bl	80003f4 <__aeabi_i2d>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	f7f7 f99b 	bl	8000158 <__aeabi_dsub>
 8008e22:	f1ba 0f00 	cmp.w	sl, #0
 8008e26:	4680      	mov	r8, r0
 8008e28:	4689      	mov	r9, r1
 8008e2a:	dd6c      	ble.n	8008f06 <__kernel_rem_pio2+0x23a>
 8008e2c:	1e7a      	subs	r2, r7, #1
 8008e2e:	ab0c      	add	r3, sp, #48	; 0x30
 8008e30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008e34:	f1ca 0118 	rsb	r1, sl, #24
 8008e38:	9c05      	ldr	r4, [sp, #20]
 8008e3a:	fa40 f301 	asr.w	r3, r0, r1
 8008e3e:	441c      	add	r4, r3
 8008e40:	408b      	lsls	r3, r1
 8008e42:	1ac0      	subs	r0, r0, r3
 8008e44:	ab0c      	add	r3, sp, #48	; 0x30
 8008e46:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008e4a:	f1ca 0317 	rsb	r3, sl, #23
 8008e4e:	9405      	str	r4, [sp, #20]
 8008e50:	fa40 f303 	asr.w	r3, r0, r3
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	9b00      	ldr	r3, [sp, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	dd62      	ble.n	8008f22 <__kernel_rem_pio2+0x256>
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008e62:	4614      	mov	r4, r2
 8008e64:	9b05      	ldr	r3, [sp, #20]
 8008e66:	3301      	adds	r3, #1
 8008e68:	9305      	str	r3, [sp, #20]
 8008e6a:	4297      	cmp	r7, r2
 8008e6c:	f300 809f 	bgt.w	8008fae <__kernel_rem_pio2+0x2e2>
 8008e70:	f1ba 0f00 	cmp.w	sl, #0
 8008e74:	dd07      	ble.n	8008e86 <__kernel_rem_pio2+0x1ba>
 8008e76:	f1ba 0f01 	cmp.w	sl, #1
 8008e7a:	f000 80bb 	beq.w	8008ff4 <__kernel_rem_pio2+0x328>
 8008e7e:	f1ba 0f02 	cmp.w	sl, #2
 8008e82:	f000 80c1 	beq.w	8009008 <__kernel_rem_pio2+0x33c>
 8008e86:	9b00      	ldr	r3, [sp, #0]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d14a      	bne.n	8008f22 <__kernel_rem_pio2+0x256>
 8008e8c:	4642      	mov	r2, r8
 8008e8e:	464b      	mov	r3, r9
 8008e90:	2000      	movs	r0, #0
 8008e92:	4953      	ldr	r1, [pc, #332]	; (8008fe0 <__kernel_rem_pio2+0x314>)
 8008e94:	f7f7 f960 	bl	8000158 <__aeabi_dsub>
 8008e98:	4680      	mov	r8, r0
 8008e9a:	4689      	mov	r9, r1
 8008e9c:	2c00      	cmp	r4, #0
 8008e9e:	d040      	beq.n	8008f22 <__kernel_rem_pio2+0x256>
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	494e      	ldr	r1, [pc, #312]	; (8008fe0 <__kernel_rem_pio2+0x314>)
 8008ea6:	f000 fc2f 	bl	8009708 <scalbn>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4640      	mov	r0, r8
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	f7f7 f951 	bl	8000158 <__aeabi_dsub>
 8008eb6:	4680      	mov	r8, r0
 8008eb8:	4689      	mov	r9, r1
 8008eba:	e032      	b.n	8008f22 <__kernel_rem_pio2+0x256>
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	4b49      	ldr	r3, [pc, #292]	; (8008fe4 <__kernel_rem_pio2+0x318>)
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	f7f7 fb00 	bl	80004c8 <__aeabi_dmul>
 8008ec8:	f7f7 fdae 	bl	8000a28 <__aeabi_d2iz>
 8008ecc:	f7f7 fa92 	bl	80003f4 <__aeabi_i2d>
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4b45      	ldr	r3, [pc, #276]	; (8008fe8 <__kernel_rem_pio2+0x31c>)
 8008ed4:	e9cd 0100 	strd	r0, r1, [sp]
 8008ed8:	f7f7 faf6 	bl	80004c8 <__aeabi_dmul>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	f7f7 f938 	bl	8000158 <__aeabi_dsub>
 8008ee8:	f7f7 fd9e 	bl	8000a28 <__aeabi_d2iz>
 8008eec:	ab0c      	add	r3, sp, #48	; 0x30
 8008eee:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008ef2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008ef6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008efa:	f7f7 f92f 	bl	800015c <__adddf3>
 8008efe:	3601      	adds	r6, #1
 8008f00:	4680      	mov	r8, r0
 8008f02:	4689      	mov	r9, r1
 8008f04:	e765      	b.n	8008dd2 <__kernel_rem_pio2+0x106>
 8008f06:	d105      	bne.n	8008f14 <__kernel_rem_pio2+0x248>
 8008f08:	1e7b      	subs	r3, r7, #1
 8008f0a:	aa0c      	add	r2, sp, #48	; 0x30
 8008f0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008f10:	15c3      	asrs	r3, r0, #23
 8008f12:	e79f      	b.n	8008e54 <__kernel_rem_pio2+0x188>
 8008f14:	2200      	movs	r2, #0
 8008f16:	4b35      	ldr	r3, [pc, #212]	; (8008fec <__kernel_rem_pio2+0x320>)
 8008f18:	f7f7 fd5c 	bl	80009d4 <__aeabi_dcmpge>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d143      	bne.n	8008fa8 <__kernel_rem_pio2+0x2dc>
 8008f20:	9000      	str	r0, [sp, #0]
 8008f22:	2200      	movs	r2, #0
 8008f24:	2300      	movs	r3, #0
 8008f26:	4640      	mov	r0, r8
 8008f28:	4649      	mov	r1, r9
 8008f2a:	f7f7 fd35 	bl	8000998 <__aeabi_dcmpeq>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f000 80c3 	beq.w	80090ba <__kernel_rem_pio2+0x3ee>
 8008f34:	1e7c      	subs	r4, r7, #1
 8008f36:	4623      	mov	r3, r4
 8008f38:	2200      	movs	r2, #0
 8008f3a:	9902      	ldr	r1, [sp, #8]
 8008f3c:	428b      	cmp	r3, r1
 8008f3e:	da6a      	bge.n	8009016 <__kernel_rem_pio2+0x34a>
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	f000 8084 	beq.w	800904e <__kernel_rem_pio2+0x382>
 8008f46:	ab0c      	add	r3, sp, #48	; 0x30
 8008f48:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008f4c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 80b0 	beq.w	80090b6 <__kernel_rem_pio2+0x3ea>
 8008f56:	4652      	mov	r2, sl
 8008f58:	2000      	movs	r0, #0
 8008f5a:	4921      	ldr	r1, [pc, #132]	; (8008fe0 <__kernel_rem_pio2+0x314>)
 8008f5c:	f000 fbd4 	bl	8009708 <scalbn>
 8008f60:	4625      	mov	r5, r4
 8008f62:	4606      	mov	r6, r0
 8008f64:	460f      	mov	r7, r1
 8008f66:	f04f 0a00 	mov.w	sl, #0
 8008f6a:	00e3      	lsls	r3, r4, #3
 8008f6c:	aa98      	add	r2, sp, #608	; 0x260
 8008f6e:	eb02 0803 	add.w	r8, r2, r3
 8008f72:	f8df b070 	ldr.w	fp, [pc, #112]	; 8008fe4 <__kernel_rem_pio2+0x318>
 8008f76:	9306      	str	r3, [sp, #24]
 8008f78:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8008f7c:	2d00      	cmp	r5, #0
 8008f7e:	f280 80d2 	bge.w	8009126 <__kernel_rem_pio2+0x45a>
 8008f82:	2500      	movs	r5, #0
 8008f84:	9a06      	ldr	r2, [sp, #24]
 8008f86:	ab98      	add	r3, sp, #608	; 0x260
 8008f88:	189e      	adds	r6, r3, r2
 8008f8a:	3ea8      	subs	r6, #168	; 0xa8
 8008f8c:	1b63      	subs	r3, r4, r5
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f2c0 80f9 	blt.w	8009186 <__kernel_rem_pio2+0x4ba>
 8008f94:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8008ff0 <__kernel_rem_pio2+0x324>
 8008f98:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8008f9c:	f04f 0a00 	mov.w	sl, #0
 8008fa0:	f04f 0b00 	mov.w	fp, #0
 8008fa4:	2700      	movs	r7, #0
 8008fa6:	e0e2      	b.n	800916e <__kernel_rem_pio2+0x4a2>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	e756      	b.n	8008e5c <__kernel_rem_pio2+0x190>
 8008fae:	ab0c      	add	r3, sp, #48	; 0x30
 8008fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb4:	b94c      	cbnz	r4, 8008fca <__kernel_rem_pio2+0x2fe>
 8008fb6:	b12b      	cbz	r3, 8008fc4 <__kernel_rem_pio2+0x2f8>
 8008fb8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008fbc:	a80c      	add	r0, sp, #48	; 0x30
 8008fbe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	3201      	adds	r2, #1
 8008fc6:	461c      	mov	r4, r3
 8008fc8:	e74f      	b.n	8008e6a <__kernel_rem_pio2+0x19e>
 8008fca:	1acb      	subs	r3, r1, r3
 8008fcc:	a80c      	add	r0, sp, #48	; 0x30
 8008fce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008fd2:	4623      	mov	r3, r4
 8008fd4:	e7f6      	b.n	8008fc4 <__kernel_rem_pio2+0x2f8>
 8008fd6:	bf00      	nop
 8008fd8:	08009ae0 	.word	0x08009ae0
 8008fdc:	40200000 	.word	0x40200000
 8008fe0:	3ff00000 	.word	0x3ff00000
 8008fe4:	3e700000 	.word	0x3e700000
 8008fe8:	41700000 	.word	0x41700000
 8008fec:	3fe00000 	.word	0x3fe00000
 8008ff0:	08009a98 	.word	0x08009a98
 8008ff4:	1e7a      	subs	r2, r7, #1
 8008ff6:	ab0c      	add	r3, sp, #48	; 0x30
 8008ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009000:	a90c      	add	r1, sp, #48	; 0x30
 8009002:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009006:	e73e      	b.n	8008e86 <__kernel_rem_pio2+0x1ba>
 8009008:	1e7a      	subs	r2, r7, #1
 800900a:	ab0c      	add	r3, sp, #48	; 0x30
 800900c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009010:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009014:	e7f4      	b.n	8009000 <__kernel_rem_pio2+0x334>
 8009016:	a90c      	add	r1, sp, #48	; 0x30
 8009018:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800901c:	3b01      	subs	r3, #1
 800901e:	430a      	orrs	r2, r1
 8009020:	e78b      	b.n	8008f3a <__kernel_rem_pio2+0x26e>
 8009022:	3401      	adds	r4, #1
 8009024:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009028:	2a00      	cmp	r2, #0
 800902a:	d0fa      	beq.n	8009022 <__kernel_rem_pio2+0x356>
 800902c:	ab98      	add	r3, sp, #608	; 0x260
 800902e:	449b      	add	fp, r3
 8009030:	9b07      	ldr	r3, [sp, #28]
 8009032:	1c7e      	adds	r6, r7, #1
 8009034:	19dd      	adds	r5, r3, r7
 8009036:	ab98      	add	r3, sp, #608	; 0x260
 8009038:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800903c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8009040:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8009044:	443c      	add	r4, r7
 8009046:	42b4      	cmp	r4, r6
 8009048:	da04      	bge.n	8009054 <__kernel_rem_pio2+0x388>
 800904a:	4627      	mov	r7, r4
 800904c:	e6b1      	b.n	8008db2 <__kernel_rem_pio2+0xe6>
 800904e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009050:	2401      	movs	r4, #1
 8009052:	e7e7      	b.n	8009024 <__kernel_rem_pio2+0x358>
 8009054:	f105 0308 	add.w	r3, r5, #8
 8009058:	9309      	str	r3, [sp, #36]	; 0x24
 800905a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800905c:	2700      	movs	r7, #0
 800905e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009062:	f7f7 f9c7 	bl	80003f4 <__aeabi_i2d>
 8009066:	f04f 0800 	mov.w	r8, #0
 800906a:	f04f 0900 	mov.w	r9, #0
 800906e:	9b08      	ldr	r3, [sp, #32]
 8009070:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009074:	3b08      	subs	r3, #8
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	f105 0310 	add.w	r3, r5, #16
 800907c:	9305      	str	r3, [sp, #20]
 800907e:	9b06      	ldr	r3, [sp, #24]
 8009080:	429f      	cmp	r7, r3
 8009082:	dd04      	ble.n	800908e <__kernel_rem_pio2+0x3c2>
 8009084:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8009088:	3601      	adds	r6, #1
 800908a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800908c:	e7db      	b.n	8009046 <__kernel_rem_pio2+0x37a>
 800908e:	9905      	ldr	r1, [sp, #20]
 8009090:	9d00      	ldr	r5, [sp, #0]
 8009092:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009096:	9105      	str	r1, [sp, #20]
 8009098:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800909c:	9500      	str	r5, [sp, #0]
 800909e:	f7f7 fa13 	bl	80004c8 <__aeabi_dmul>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4640      	mov	r0, r8
 80090a8:	4649      	mov	r1, r9
 80090aa:	f7f7 f857 	bl	800015c <__adddf3>
 80090ae:	3701      	adds	r7, #1
 80090b0:	4680      	mov	r8, r0
 80090b2:	4689      	mov	r9, r1
 80090b4:	e7e3      	b.n	800907e <__kernel_rem_pio2+0x3b2>
 80090b6:	3c01      	subs	r4, #1
 80090b8:	e745      	b.n	8008f46 <__kernel_rem_pio2+0x27a>
 80090ba:	f1ca 0200 	rsb	r2, sl, #0
 80090be:	4640      	mov	r0, r8
 80090c0:	4649      	mov	r1, r9
 80090c2:	f000 fb21 	bl	8009708 <scalbn>
 80090c6:	2200      	movs	r2, #0
 80090c8:	4ba3      	ldr	r3, [pc, #652]	; (8009358 <__kernel_rem_pio2+0x68c>)
 80090ca:	4604      	mov	r4, r0
 80090cc:	460d      	mov	r5, r1
 80090ce:	f7f7 fc81 	bl	80009d4 <__aeabi_dcmpge>
 80090d2:	b1f8      	cbz	r0, 8009114 <__kernel_rem_pio2+0x448>
 80090d4:	2200      	movs	r2, #0
 80090d6:	4ba1      	ldr	r3, [pc, #644]	; (800935c <__kernel_rem_pio2+0x690>)
 80090d8:	4620      	mov	r0, r4
 80090da:	4629      	mov	r1, r5
 80090dc:	f7f7 f9f4 	bl	80004c8 <__aeabi_dmul>
 80090e0:	f7f7 fca2 	bl	8000a28 <__aeabi_d2iz>
 80090e4:	4606      	mov	r6, r0
 80090e6:	f7f7 f985 	bl	80003f4 <__aeabi_i2d>
 80090ea:	2200      	movs	r2, #0
 80090ec:	4b9a      	ldr	r3, [pc, #616]	; (8009358 <__kernel_rem_pio2+0x68c>)
 80090ee:	f7f7 f9eb 	bl	80004c8 <__aeabi_dmul>
 80090f2:	460b      	mov	r3, r1
 80090f4:	4602      	mov	r2, r0
 80090f6:	4629      	mov	r1, r5
 80090f8:	4620      	mov	r0, r4
 80090fa:	f7f7 f82d 	bl	8000158 <__aeabi_dsub>
 80090fe:	f7f7 fc93 	bl	8000a28 <__aeabi_d2iz>
 8009102:	1c7c      	adds	r4, r7, #1
 8009104:	ab0c      	add	r3, sp, #48	; 0x30
 8009106:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800910a:	f10a 0a18 	add.w	sl, sl, #24
 800910e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8009112:	e720      	b.n	8008f56 <__kernel_rem_pio2+0x28a>
 8009114:	4620      	mov	r0, r4
 8009116:	4629      	mov	r1, r5
 8009118:	f7f7 fc86 	bl	8000a28 <__aeabi_d2iz>
 800911c:	ab0c      	add	r3, sp, #48	; 0x30
 800911e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009122:	463c      	mov	r4, r7
 8009124:	e717      	b.n	8008f56 <__kernel_rem_pio2+0x28a>
 8009126:	ab0c      	add	r3, sp, #48	; 0x30
 8009128:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800912c:	f7f7 f962 	bl	80003f4 <__aeabi_i2d>
 8009130:	4632      	mov	r2, r6
 8009132:	463b      	mov	r3, r7
 8009134:	f7f7 f9c8 	bl	80004c8 <__aeabi_dmul>
 8009138:	4652      	mov	r2, sl
 800913a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800913e:	465b      	mov	r3, fp
 8009140:	4630      	mov	r0, r6
 8009142:	4639      	mov	r1, r7
 8009144:	f7f7 f9c0 	bl	80004c8 <__aeabi_dmul>
 8009148:	3d01      	subs	r5, #1
 800914a:	4606      	mov	r6, r0
 800914c:	460f      	mov	r7, r1
 800914e:	e715      	b.n	8008f7c <__kernel_rem_pio2+0x2b0>
 8009150:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8009154:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8009158:	f7f7 f9b6 	bl	80004c8 <__aeabi_dmul>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4650      	mov	r0, sl
 8009162:	4659      	mov	r1, fp
 8009164:	f7f6 fffa 	bl	800015c <__adddf3>
 8009168:	4682      	mov	sl, r0
 800916a:	468b      	mov	fp, r1
 800916c:	3701      	adds	r7, #1
 800916e:	9b02      	ldr	r3, [sp, #8]
 8009170:	429f      	cmp	r7, r3
 8009172:	dc01      	bgt.n	8009178 <__kernel_rem_pio2+0x4ac>
 8009174:	42bd      	cmp	r5, r7
 8009176:	daeb      	bge.n	8009150 <__kernel_rem_pio2+0x484>
 8009178:	ab48      	add	r3, sp, #288	; 0x120
 800917a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800917e:	e9c3 ab00 	strd	sl, fp, [r3]
 8009182:	3501      	adds	r5, #1
 8009184:	e702      	b.n	8008f8c <__kernel_rem_pio2+0x2c0>
 8009186:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009188:	2b03      	cmp	r3, #3
 800918a:	d86c      	bhi.n	8009266 <__kernel_rem_pio2+0x59a>
 800918c:	e8df f003 	tbb	[pc, r3]
 8009190:	022f2f59 	.word	0x022f2f59
 8009194:	9a06      	ldr	r2, [sp, #24]
 8009196:	ab48      	add	r3, sp, #288	; 0x120
 8009198:	189d      	adds	r5, r3, r2
 800919a:	46aa      	mov	sl, r5
 800919c:	46a3      	mov	fp, r4
 800919e:	f1bb 0f00 	cmp.w	fp, #0
 80091a2:	f300 8087 	bgt.w	80092b4 <__kernel_rem_pio2+0x5e8>
 80091a6:	46a2      	mov	sl, r4
 80091a8:	f1ba 0f01 	cmp.w	sl, #1
 80091ac:	f300 809f 	bgt.w	80092ee <__kernel_rem_pio2+0x622>
 80091b0:	2700      	movs	r7, #0
 80091b2:	463e      	mov	r6, r7
 80091b4:	9d06      	ldr	r5, [sp, #24]
 80091b6:	ab48      	add	r3, sp, #288	; 0x120
 80091b8:	3508      	adds	r5, #8
 80091ba:	441d      	add	r5, r3
 80091bc:	2c01      	cmp	r4, #1
 80091be:	f300 80b3 	bgt.w	8009328 <__kernel_rem_pio2+0x65c>
 80091c2:	9b00      	ldr	r3, [sp, #0]
 80091c4:	9d48      	ldr	r5, [sp, #288]	; 0x120
 80091c6:	9849      	ldr	r0, [sp, #292]	; 0x124
 80091c8:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 80091ca:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f040 80b5 	bne.w	800933c <__kernel_rem_pio2+0x670>
 80091d2:	4603      	mov	r3, r0
 80091d4:	462a      	mov	r2, r5
 80091d6:	9804      	ldr	r0, [sp, #16]
 80091d8:	e9c0 2300 	strd	r2, r3, [r0]
 80091dc:	4622      	mov	r2, r4
 80091de:	460b      	mov	r3, r1
 80091e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80091e4:	463a      	mov	r2, r7
 80091e6:	4633      	mov	r3, r6
 80091e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80091ec:	e03b      	b.n	8009266 <__kernel_rem_pio2+0x59a>
 80091ee:	f04f 0c00 	mov.w	ip, #0
 80091f2:	4626      	mov	r6, r4
 80091f4:	4667      	mov	r7, ip
 80091f6:	9d06      	ldr	r5, [sp, #24]
 80091f8:	ab48      	add	r3, sp, #288	; 0x120
 80091fa:	3508      	adds	r5, #8
 80091fc:	441d      	add	r5, r3
 80091fe:	2e00      	cmp	r6, #0
 8009200:	da42      	bge.n	8009288 <__kernel_rem_pio2+0x5bc>
 8009202:	9b00      	ldr	r3, [sp, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d049      	beq.n	800929c <__kernel_rem_pio2+0x5d0>
 8009208:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800920c:	4662      	mov	r2, ip
 800920e:	460b      	mov	r3, r1
 8009210:	9904      	ldr	r1, [sp, #16]
 8009212:	2601      	movs	r6, #1
 8009214:	e9c1 2300 	strd	r2, r3, [r1]
 8009218:	a948      	add	r1, sp, #288	; 0x120
 800921a:	463b      	mov	r3, r7
 800921c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009220:	f7f6 ff9a 	bl	8000158 <__aeabi_dsub>
 8009224:	4684      	mov	ip, r0
 8009226:	460f      	mov	r7, r1
 8009228:	ad48      	add	r5, sp, #288	; 0x120
 800922a:	42b4      	cmp	r4, r6
 800922c:	da38      	bge.n	80092a0 <__kernel_rem_pio2+0x5d4>
 800922e:	9b00      	ldr	r3, [sp, #0]
 8009230:	b10b      	cbz	r3, 8009236 <__kernel_rem_pio2+0x56a>
 8009232:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009236:	4662      	mov	r2, ip
 8009238:	463b      	mov	r3, r7
 800923a:	9904      	ldr	r1, [sp, #16]
 800923c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009240:	e011      	b.n	8009266 <__kernel_rem_pio2+0x59a>
 8009242:	2700      	movs	r7, #0
 8009244:	463d      	mov	r5, r7
 8009246:	9b06      	ldr	r3, [sp, #24]
 8009248:	aa98      	add	r2, sp, #608	; 0x260
 800924a:	4413      	add	r3, r2
 800924c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8009250:	2c00      	cmp	r4, #0
 8009252:	da0f      	bge.n	8009274 <__kernel_rem_pio2+0x5a8>
 8009254:	9b00      	ldr	r3, [sp, #0]
 8009256:	b10b      	cbz	r3, 800925c <__kernel_rem_pio2+0x590>
 8009258:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800925c:	463a      	mov	r2, r7
 800925e:	462b      	mov	r3, r5
 8009260:	9904      	ldr	r1, [sp, #16]
 8009262:	e9c1 2300 	strd	r2, r3, [r1]
 8009266:	9b05      	ldr	r3, [sp, #20]
 8009268:	f003 0007 	and.w	r0, r3, #7
 800926c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009274:	4638      	mov	r0, r7
 8009276:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800927a:	4629      	mov	r1, r5
 800927c:	f7f6 ff6e 	bl	800015c <__adddf3>
 8009280:	3c01      	subs	r4, #1
 8009282:	4607      	mov	r7, r0
 8009284:	460d      	mov	r5, r1
 8009286:	e7e3      	b.n	8009250 <__kernel_rem_pio2+0x584>
 8009288:	4660      	mov	r0, ip
 800928a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800928e:	4639      	mov	r1, r7
 8009290:	f7f6 ff64 	bl	800015c <__adddf3>
 8009294:	3e01      	subs	r6, #1
 8009296:	4684      	mov	ip, r0
 8009298:	460f      	mov	r7, r1
 800929a:	e7b0      	b.n	80091fe <__kernel_rem_pio2+0x532>
 800929c:	4639      	mov	r1, r7
 800929e:	e7b5      	b.n	800920c <__kernel_rem_pio2+0x540>
 80092a0:	4660      	mov	r0, ip
 80092a2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80092a6:	4639      	mov	r1, r7
 80092a8:	f7f6 ff58 	bl	800015c <__adddf3>
 80092ac:	3601      	adds	r6, #1
 80092ae:	4684      	mov	ip, r0
 80092b0:	460f      	mov	r7, r1
 80092b2:	e7ba      	b.n	800922a <__kernel_rem_pio2+0x55e>
 80092b4:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 80092b8:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80092bc:	4640      	mov	r0, r8
 80092be:	4649      	mov	r1, r9
 80092c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092c4:	f7f6 ff4a 	bl	800015c <__adddf3>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4606      	mov	r6, r0
 80092ce:	460f      	mov	r7, r1
 80092d0:	4640      	mov	r0, r8
 80092d2:	4649      	mov	r1, r9
 80092d4:	f7f6 ff40 	bl	8000158 <__aeabi_dsub>
 80092d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092dc:	f7f6 ff3e 	bl	800015c <__adddf3>
 80092e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80092e8:	e9ca 6700 	strd	r6, r7, [sl]
 80092ec:	e757      	b.n	800919e <__kernel_rem_pio2+0x4d2>
 80092ee:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 80092f2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80092f6:	4630      	mov	r0, r6
 80092f8:	4639      	mov	r1, r7
 80092fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092fe:	f7f6 ff2d 	bl	800015c <__adddf3>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4680      	mov	r8, r0
 8009308:	4689      	mov	r9, r1
 800930a:	4630      	mov	r0, r6
 800930c:	4639      	mov	r1, r7
 800930e:	f7f6 ff23 	bl	8000158 <__aeabi_dsub>
 8009312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009316:	f7f6 ff21 	bl	800015c <__adddf3>
 800931a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800931e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009322:	e9c5 8900 	strd	r8, r9, [r5]
 8009326:	e73f      	b.n	80091a8 <__kernel_rem_pio2+0x4dc>
 8009328:	4638      	mov	r0, r7
 800932a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800932e:	4631      	mov	r1, r6
 8009330:	f7f6 ff14 	bl	800015c <__adddf3>
 8009334:	3c01      	subs	r4, #1
 8009336:	4607      	mov	r7, r0
 8009338:	460e      	mov	r6, r1
 800933a:	e73f      	b.n	80091bc <__kernel_rem_pio2+0x4f0>
 800933c:	9b04      	ldr	r3, [sp, #16]
 800933e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009342:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009346:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800934a:	601d      	str	r5, [r3, #0]
 800934c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8009350:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8009354:	615e      	str	r6, [r3, #20]
 8009356:	e786      	b.n	8009266 <__kernel_rem_pio2+0x59a>
 8009358:	41700000 	.word	0x41700000
 800935c:	3e700000 	.word	0x3e700000

08009360 <__kernel_sin>:
 8009360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009364:	b086      	sub	sp, #24
 8009366:	e9cd 2300 	strd	r2, r3, [sp]
 800936a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800936e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009372:	4682      	mov	sl, r0
 8009374:	460c      	mov	r4, r1
 8009376:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009378:	da03      	bge.n	8009382 <__kernel_sin+0x22>
 800937a:	f7f7 fb55 	bl	8000a28 <__aeabi_d2iz>
 800937e:	2800      	cmp	r0, #0
 8009380:	d050      	beq.n	8009424 <__kernel_sin+0xc4>
 8009382:	4652      	mov	r2, sl
 8009384:	4623      	mov	r3, r4
 8009386:	4650      	mov	r0, sl
 8009388:	4621      	mov	r1, r4
 800938a:	f7f7 f89d 	bl	80004c8 <__aeabi_dmul>
 800938e:	4606      	mov	r6, r0
 8009390:	460f      	mov	r7, r1
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4650      	mov	r0, sl
 8009398:	4621      	mov	r1, r4
 800939a:	f7f7 f895 	bl	80004c8 <__aeabi_dmul>
 800939e:	a33e      	add	r3, pc, #248	; (adr r3, 8009498 <__kernel_sin+0x138>)
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	4680      	mov	r8, r0
 80093a6:	4689      	mov	r9, r1
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f7 f88c 	bl	80004c8 <__aeabi_dmul>
 80093b0:	a33b      	add	r3, pc, #236	; (adr r3, 80094a0 <__kernel_sin+0x140>)
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	f7f6 fecf 	bl	8000158 <__aeabi_dsub>
 80093ba:	4632      	mov	r2, r6
 80093bc:	463b      	mov	r3, r7
 80093be:	f7f7 f883 	bl	80004c8 <__aeabi_dmul>
 80093c2:	a339      	add	r3, pc, #228	; (adr r3, 80094a8 <__kernel_sin+0x148>)
 80093c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c8:	f7f6 fec8 	bl	800015c <__adddf3>
 80093cc:	4632      	mov	r2, r6
 80093ce:	463b      	mov	r3, r7
 80093d0:	f7f7 f87a 	bl	80004c8 <__aeabi_dmul>
 80093d4:	a336      	add	r3, pc, #216	; (adr r3, 80094b0 <__kernel_sin+0x150>)
 80093d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093da:	f7f6 febd 	bl	8000158 <__aeabi_dsub>
 80093de:	4632      	mov	r2, r6
 80093e0:	463b      	mov	r3, r7
 80093e2:	f7f7 f871 	bl	80004c8 <__aeabi_dmul>
 80093e6:	a334      	add	r3, pc, #208	; (adr r3, 80094b8 <__kernel_sin+0x158>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f7f6 feb6 	bl	800015c <__adddf3>
 80093f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093f4:	b9dd      	cbnz	r5, 800942e <__kernel_sin+0xce>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	4630      	mov	r0, r6
 80093fc:	4639      	mov	r1, r7
 80093fe:	f7f7 f863 	bl	80004c8 <__aeabi_dmul>
 8009402:	a32f      	add	r3, pc, #188	; (adr r3, 80094c0 <__kernel_sin+0x160>)
 8009404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009408:	f7f6 fea6 	bl	8000158 <__aeabi_dsub>
 800940c:	4642      	mov	r2, r8
 800940e:	464b      	mov	r3, r9
 8009410:	f7f7 f85a 	bl	80004c8 <__aeabi_dmul>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4650      	mov	r0, sl
 800941a:	4621      	mov	r1, r4
 800941c:	f7f6 fe9e 	bl	800015c <__adddf3>
 8009420:	4682      	mov	sl, r0
 8009422:	460c      	mov	r4, r1
 8009424:	4650      	mov	r0, sl
 8009426:	4621      	mov	r1, r4
 8009428:	b006      	add	sp, #24
 800942a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942e:	2200      	movs	r2, #0
 8009430:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009434:	4b24      	ldr	r3, [pc, #144]	; (80094c8 <__kernel_sin+0x168>)
 8009436:	f7f7 f847 	bl	80004c8 <__aeabi_dmul>
 800943a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800943e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009442:	4640      	mov	r0, r8
 8009444:	4649      	mov	r1, r9
 8009446:	f7f7 f83f 	bl	80004c8 <__aeabi_dmul>
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009452:	f7f6 fe81 	bl	8000158 <__aeabi_dsub>
 8009456:	4632      	mov	r2, r6
 8009458:	463b      	mov	r3, r7
 800945a:	f7f7 f835 	bl	80004c8 <__aeabi_dmul>
 800945e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009462:	f7f6 fe79 	bl	8000158 <__aeabi_dsub>
 8009466:	a316      	add	r3, pc, #88	; (adr r3, 80094c0 <__kernel_sin+0x160>)
 8009468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946c:	4606      	mov	r6, r0
 800946e:	460f      	mov	r7, r1
 8009470:	4640      	mov	r0, r8
 8009472:	4649      	mov	r1, r9
 8009474:	f7f7 f828 	bl	80004c8 <__aeabi_dmul>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	4630      	mov	r0, r6
 800947e:	4639      	mov	r1, r7
 8009480:	f7f6 fe6c 	bl	800015c <__adddf3>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	4650      	mov	r0, sl
 800948a:	4621      	mov	r1, r4
 800948c:	f7f6 fe64 	bl	8000158 <__aeabi_dsub>
 8009490:	e7c6      	b.n	8009420 <__kernel_sin+0xc0>
 8009492:	bf00      	nop
 8009494:	f3af 8000 	nop.w
 8009498:	5acfd57c 	.word	0x5acfd57c
 800949c:	3de5d93a 	.word	0x3de5d93a
 80094a0:	8a2b9ceb 	.word	0x8a2b9ceb
 80094a4:	3e5ae5e6 	.word	0x3e5ae5e6
 80094a8:	57b1fe7d 	.word	0x57b1fe7d
 80094ac:	3ec71de3 	.word	0x3ec71de3
 80094b0:	19c161d5 	.word	0x19c161d5
 80094b4:	3f2a01a0 	.word	0x3f2a01a0
 80094b8:	1110f8a6 	.word	0x1110f8a6
 80094bc:	3f811111 	.word	0x3f811111
 80094c0:	55555549 	.word	0x55555549
 80094c4:	3fc55555 	.word	0x3fc55555
 80094c8:	3fe00000 	.word	0x3fe00000

080094cc <finite>:
 80094cc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80094d0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80094d4:	0fc0      	lsrs	r0, r0, #31
 80094d6:	4770      	bx	lr

080094d8 <floor>:
 80094d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094dc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80094e0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80094e4:	2e13      	cmp	r6, #19
 80094e6:	4607      	mov	r7, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	460c      	mov	r4, r1
 80094ec:	4605      	mov	r5, r0
 80094ee:	dc35      	bgt.n	800955c <floor+0x84>
 80094f0:	2e00      	cmp	r6, #0
 80094f2:	da16      	bge.n	8009522 <floor+0x4a>
 80094f4:	a336      	add	r3, pc, #216	; (adr r3, 80095d0 <floor+0xf8>)
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	f7f6 fe2f 	bl	800015c <__adddf3>
 80094fe:	2200      	movs	r2, #0
 8009500:	2300      	movs	r3, #0
 8009502:	f7f7 fa71 	bl	80009e8 <__aeabi_dcmpgt>
 8009506:	b148      	cbz	r0, 800951c <floor+0x44>
 8009508:	2c00      	cmp	r4, #0
 800950a:	da5b      	bge.n	80095c4 <floor+0xec>
 800950c:	2500      	movs	r5, #0
 800950e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009512:	4a31      	ldr	r2, [pc, #196]	; (80095d8 <floor+0x100>)
 8009514:	433b      	orrs	r3, r7
 8009516:	42ab      	cmp	r3, r5
 8009518:	bf18      	it	ne
 800951a:	4614      	movne	r4, r2
 800951c:	4623      	mov	r3, r4
 800951e:	462f      	mov	r7, r5
 8009520:	e026      	b.n	8009570 <floor+0x98>
 8009522:	4a2e      	ldr	r2, [pc, #184]	; (80095dc <floor+0x104>)
 8009524:	fa42 f806 	asr.w	r8, r2, r6
 8009528:	ea01 0208 	and.w	r2, r1, r8
 800952c:	4302      	orrs	r2, r0
 800952e:	d01f      	beq.n	8009570 <floor+0x98>
 8009530:	a327      	add	r3, pc, #156	; (adr r3, 80095d0 <floor+0xf8>)
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	f7f6 fe11 	bl	800015c <__adddf3>
 800953a:	2200      	movs	r2, #0
 800953c:	2300      	movs	r3, #0
 800953e:	f7f7 fa53 	bl	80009e8 <__aeabi_dcmpgt>
 8009542:	2800      	cmp	r0, #0
 8009544:	d0ea      	beq.n	800951c <floor+0x44>
 8009546:	2c00      	cmp	r4, #0
 8009548:	bfbe      	ittt	lt
 800954a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800954e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009552:	19a4      	addlt	r4, r4, r6
 8009554:	ea24 0408 	bic.w	r4, r4, r8
 8009558:	2500      	movs	r5, #0
 800955a:	e7df      	b.n	800951c <floor+0x44>
 800955c:	2e33      	cmp	r6, #51	; 0x33
 800955e:	dd0b      	ble.n	8009578 <floor+0xa0>
 8009560:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009564:	d104      	bne.n	8009570 <floor+0x98>
 8009566:	4602      	mov	r2, r0
 8009568:	f7f6 fdf8 	bl	800015c <__adddf3>
 800956c:	4607      	mov	r7, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4638      	mov	r0, r7
 8009572:	4619      	mov	r1, r3
 8009574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009578:	f04f 32ff 	mov.w	r2, #4294967295
 800957c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009580:	fa22 f808 	lsr.w	r8, r2, r8
 8009584:	ea18 0f00 	tst.w	r8, r0
 8009588:	d0f2      	beq.n	8009570 <floor+0x98>
 800958a:	a311      	add	r3, pc, #68	; (adr r3, 80095d0 <floor+0xf8>)
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	f7f6 fde4 	bl	800015c <__adddf3>
 8009594:	2200      	movs	r2, #0
 8009596:	2300      	movs	r3, #0
 8009598:	f7f7 fa26 	bl	80009e8 <__aeabi_dcmpgt>
 800959c:	2800      	cmp	r0, #0
 800959e:	d0bd      	beq.n	800951c <floor+0x44>
 80095a0:	2c00      	cmp	r4, #0
 80095a2:	da02      	bge.n	80095aa <floor+0xd2>
 80095a4:	2e14      	cmp	r6, #20
 80095a6:	d103      	bne.n	80095b0 <floor+0xd8>
 80095a8:	3401      	adds	r4, #1
 80095aa:	ea25 0508 	bic.w	r5, r5, r8
 80095ae:	e7b5      	b.n	800951c <floor+0x44>
 80095b0:	2301      	movs	r3, #1
 80095b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80095b6:	fa03 f606 	lsl.w	r6, r3, r6
 80095ba:	4435      	add	r5, r6
 80095bc:	42bd      	cmp	r5, r7
 80095be:	bf38      	it	cc
 80095c0:	18e4      	addcc	r4, r4, r3
 80095c2:	e7f2      	b.n	80095aa <floor+0xd2>
 80095c4:	2500      	movs	r5, #0
 80095c6:	462c      	mov	r4, r5
 80095c8:	e7a8      	b.n	800951c <floor+0x44>
 80095ca:	bf00      	nop
 80095cc:	f3af 8000 	nop.w
 80095d0:	8800759c 	.word	0x8800759c
 80095d4:	7e37e43c 	.word	0x7e37e43c
 80095d8:	bff00000 	.word	0xbff00000
 80095dc:	000fffff 	.word	0x000fffff

080095e0 <matherr>:
 80095e0:	2000      	movs	r0, #0
 80095e2:	4770      	bx	lr

080095e4 <nan>:
 80095e4:	2000      	movs	r0, #0
 80095e6:	4901      	ldr	r1, [pc, #4]	; (80095ec <nan+0x8>)
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	7ff80000 	.word	0x7ff80000

080095f0 <rint>:
 80095f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80095f6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 80095fa:	f1bc 0f13 	cmp.w	ip, #19
 80095fe:	4604      	mov	r4, r0
 8009600:	460d      	mov	r5, r1
 8009602:	460b      	mov	r3, r1
 8009604:	4606      	mov	r6, r0
 8009606:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800960a:	dc5a      	bgt.n	80096c2 <rint+0xd2>
 800960c:	f1bc 0f00 	cmp.w	ip, #0
 8009610:	da2b      	bge.n	800966a <rint+0x7a>
 8009612:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009616:	4302      	orrs	r2, r0
 8009618:	d023      	beq.n	8009662 <rint+0x72>
 800961a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800961e:	4302      	orrs	r2, r0
 8009620:	4256      	negs	r6, r2
 8009622:	4316      	orrs	r6, r2
 8009624:	0c4b      	lsrs	r3, r1, #17
 8009626:	0b36      	lsrs	r6, r6, #12
 8009628:	4934      	ldr	r1, [pc, #208]	; (80096fc <rint+0x10c>)
 800962a:	045b      	lsls	r3, r3, #17
 800962c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8009630:	ea46 0503 	orr.w	r5, r6, r3
 8009634:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8009638:	4602      	mov	r2, r0
 800963a:	462b      	mov	r3, r5
 800963c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8009640:	4620      	mov	r0, r4
 8009642:	4629      	mov	r1, r5
 8009644:	f7f6 fd8a 	bl	800015c <__adddf3>
 8009648:	e9cd 0100 	strd	r0, r1, [sp]
 800964c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009650:	462b      	mov	r3, r5
 8009652:	4622      	mov	r2, r4
 8009654:	f7f6 fd80 	bl	8000158 <__aeabi_dsub>
 8009658:	4604      	mov	r4, r0
 800965a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800965e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8009662:	4620      	mov	r0, r4
 8009664:	4629      	mov	r1, r5
 8009666:	b003      	add	sp, #12
 8009668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800966a:	4a25      	ldr	r2, [pc, #148]	; (8009700 <rint+0x110>)
 800966c:	fa42 f20c 	asr.w	r2, r2, ip
 8009670:	4011      	ands	r1, r2
 8009672:	4301      	orrs	r1, r0
 8009674:	d0f5      	beq.n	8009662 <rint+0x72>
 8009676:	0852      	lsrs	r2, r2, #1
 8009678:	ea05 0102 	and.w	r1, r5, r2
 800967c:	ea50 0601 	orrs.w	r6, r0, r1
 8009680:	d00c      	beq.n	800969c <rint+0xac>
 8009682:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009686:	f1bc 0f13 	cmp.w	ip, #19
 800968a:	bf0c      	ite	eq
 800968c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8009690:	2600      	movne	r6, #0
 8009692:	ea25 0202 	bic.w	r2, r5, r2
 8009696:	fa43 f30c 	asr.w	r3, r3, ip
 800969a:	4313      	orrs	r3, r2
 800969c:	4917      	ldr	r1, [pc, #92]	; (80096fc <rint+0x10c>)
 800969e:	4632      	mov	r2, r6
 80096a0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80096a4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80096a8:	4620      	mov	r0, r4
 80096aa:	4629      	mov	r1, r5
 80096ac:	f7f6 fd56 	bl	800015c <__adddf3>
 80096b0:	e9cd 0100 	strd	r0, r1, [sp]
 80096b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096b8:	4622      	mov	r2, r4
 80096ba:	462b      	mov	r3, r5
 80096bc:	f7f6 fd4c 	bl	8000158 <__aeabi_dsub>
 80096c0:	e008      	b.n	80096d4 <rint+0xe4>
 80096c2:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 80096c6:	dd08      	ble.n	80096da <rint+0xea>
 80096c8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80096cc:	d1c9      	bne.n	8009662 <rint+0x72>
 80096ce:	4602      	mov	r2, r0
 80096d0:	f7f6 fd44 	bl	800015c <__adddf3>
 80096d4:	4604      	mov	r4, r0
 80096d6:	460d      	mov	r5, r1
 80096d8:	e7c3      	b.n	8009662 <rint+0x72>
 80096da:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 80096de:	f04f 32ff 	mov.w	r2, #4294967295
 80096e2:	40ca      	lsrs	r2, r1
 80096e4:	4210      	tst	r0, r2
 80096e6:	d0bc      	beq.n	8009662 <rint+0x72>
 80096e8:	0852      	lsrs	r2, r2, #1
 80096ea:	4210      	tst	r0, r2
 80096ec:	bf1f      	itttt	ne
 80096ee:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80096f2:	ea20 0202 	bicne.w	r2, r0, r2
 80096f6:	410e      	asrne	r6, r1
 80096f8:	4316      	orrne	r6, r2
 80096fa:	e7cf      	b.n	800969c <rint+0xac>
 80096fc:	08009af0 	.word	0x08009af0
 8009700:	000fffff 	.word	0x000fffff
 8009704:	00000000 	.word	0x00000000

08009708 <scalbn>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	4616      	mov	r6, r2
 800970c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009710:	4604      	mov	r4, r0
 8009712:	460d      	mov	r5, r1
 8009714:	460b      	mov	r3, r1
 8009716:	b982      	cbnz	r2, 800973a <scalbn+0x32>
 8009718:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800971c:	4303      	orrs	r3, r0
 800971e:	d034      	beq.n	800978a <scalbn+0x82>
 8009720:	4b2d      	ldr	r3, [pc, #180]	; (80097d8 <scalbn+0xd0>)
 8009722:	2200      	movs	r2, #0
 8009724:	f7f6 fed0 	bl	80004c8 <__aeabi_dmul>
 8009728:	4b2c      	ldr	r3, [pc, #176]	; (80097dc <scalbn+0xd4>)
 800972a:	4604      	mov	r4, r0
 800972c:	429e      	cmp	r6, r3
 800972e:	460d      	mov	r5, r1
 8009730:	da0d      	bge.n	800974e <scalbn+0x46>
 8009732:	a325      	add	r3, pc, #148	; (adr r3, 80097c8 <scalbn+0xc0>)
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	e01c      	b.n	8009774 <scalbn+0x6c>
 800973a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800973e:	42ba      	cmp	r2, r7
 8009740:	d109      	bne.n	8009756 <scalbn+0x4e>
 8009742:	4602      	mov	r2, r0
 8009744:	f7f6 fd0a 	bl	800015c <__adddf3>
 8009748:	4604      	mov	r4, r0
 800974a:	460d      	mov	r5, r1
 800974c:	e01d      	b.n	800978a <scalbn+0x82>
 800974e:	460b      	mov	r3, r1
 8009750:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009754:	3a36      	subs	r2, #54	; 0x36
 8009756:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800975a:	4432      	add	r2, r6
 800975c:	428a      	cmp	r2, r1
 800975e:	dd0c      	ble.n	800977a <scalbn+0x72>
 8009760:	4622      	mov	r2, r4
 8009762:	462b      	mov	r3, r5
 8009764:	a11a      	add	r1, pc, #104	; (adr r1, 80097d0 <scalbn+0xc8>)
 8009766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800976a:	f000 f83b 	bl	80097e4 <copysign>
 800976e:	a318      	add	r3, pc, #96	; (adr r3, 80097d0 <scalbn+0xc8>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f7f6 fea8 	bl	80004c8 <__aeabi_dmul>
 8009778:	e7e6      	b.n	8009748 <scalbn+0x40>
 800977a:	2a00      	cmp	r2, #0
 800977c:	dd08      	ble.n	8009790 <scalbn+0x88>
 800977e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009782:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009786:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800978a:	4620      	mov	r0, r4
 800978c:	4629      	mov	r1, r5
 800978e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009790:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009794:	da0b      	bge.n	80097ae <scalbn+0xa6>
 8009796:	f24c 3350 	movw	r3, #50000	; 0xc350
 800979a:	429e      	cmp	r6, r3
 800979c:	4622      	mov	r2, r4
 800979e:	462b      	mov	r3, r5
 80097a0:	dce0      	bgt.n	8009764 <scalbn+0x5c>
 80097a2:	a109      	add	r1, pc, #36	; (adr r1, 80097c8 <scalbn+0xc0>)
 80097a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a8:	f000 f81c 	bl	80097e4 <copysign>
 80097ac:	e7c1      	b.n	8009732 <scalbn+0x2a>
 80097ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80097b2:	3236      	adds	r2, #54	; 0x36
 80097b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80097b8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80097bc:	4620      	mov	r0, r4
 80097be:	4629      	mov	r1, r5
 80097c0:	2200      	movs	r2, #0
 80097c2:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <scalbn+0xd8>)
 80097c4:	e7d6      	b.n	8009774 <scalbn+0x6c>
 80097c6:	bf00      	nop
 80097c8:	c2f8f359 	.word	0xc2f8f359
 80097cc:	01a56e1f 	.word	0x01a56e1f
 80097d0:	8800759c 	.word	0x8800759c
 80097d4:	7e37e43c 	.word	0x7e37e43c
 80097d8:	43500000 	.word	0x43500000
 80097dc:	ffff3cb0 	.word	0xffff3cb0
 80097e0:	3c900000 	.word	0x3c900000

080097e4 <copysign>:
 80097e4:	b530      	push	{r4, r5, lr}
 80097e6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80097ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097ee:	ea42 0503 	orr.w	r5, r2, r3
 80097f2:	4629      	mov	r1, r5
 80097f4:	bd30      	pop	{r4, r5, pc}
	...

080097f8 <_init>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr

08009804 <_fini>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	bf00      	nop
 8009808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980a:	bc08      	pop	{r3}
 800980c:	469e      	mov	lr, r3
 800980e:	4770      	bx	lr
