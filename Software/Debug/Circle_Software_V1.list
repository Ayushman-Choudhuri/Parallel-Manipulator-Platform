
Circle_Software_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005890  08005890  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08005890  08005890  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005890  08005890  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08005898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000030  080058c8  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  080058c8  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ba3  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026e5  00000000  00000000  00030bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001090  00000000  00000000  000332e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  00034378  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018fd8  00000000  00000000  000352d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7a8  00000000  00000000  0004e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092039  00000000  00000000  0005ca58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eea91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004628  00000000  00000000  000eeb0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	080057b0 	.word	0x080057b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	080057b0 	.word	0x080057b0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <__aeabi_f2uiz>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	d20e      	bcs.n	8000762 <__aeabi_f2uiz+0x22>
 8000744:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000748:	d30b      	bcc.n	8000762 <__aeabi_f2uiz+0x22>
 800074a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000752:	d409      	bmi.n	8000768 <__aeabi_f2uiz+0x28>
 8000754:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075c:	fa23 f002 	lsr.w	r0, r3, r2
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr
 8000768:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800076c:	d101      	bne.n	8000772 <__aeabi_f2uiz+0x32>
 800076e:	0242      	lsls	r2, r0, #9
 8000770:	d102      	bne.n	8000778 <__aeabi_f2uiz+0x38>
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	4770      	bx	lr
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_ADC1_Init+0x74>)
 8000792:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <MX_ADC1_Init+0x78>)
 8000794:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_ADC1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_ADC1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_ADC1_Init+0x74>)
 80007aa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_ADC1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_ADC1_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x74>)
 80007be:	f001 fba3 	bl	8001f08 <HAL_ADC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 faa5 	bl	8000d16 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_ADC1_Init+0x74>)
 80007de:	f001 fc6b 	bl	80020b8 <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007e8:	f000 fa95 	bl	8000d16 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000e4 	.word	0x200000e4
 80007f8:	40012400 	.word	0x40012400

080007fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <HAL_ADC_MspInit+0x6c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d121      	bne.n	8000860 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <HAL_ADC_MspInit+0x70>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <HAL_ADC_MspInit+0x70>)
 8000822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_ADC_MspInit+0x70>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_ADC_MspInit+0x70>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <HAL_ADC_MspInit+0x70>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_ADC_MspInit+0x70>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = INPUT_VOLTAGE_FEEDBACK_Pin;
 800084c:	2301      	movs	r3, #1
 800084e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000850:	2303      	movs	r3, #3
 8000852:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(INPUT_VOLTAGE_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <HAL_ADC_MspInit+0x74>)
 800085c:	f001 fe6c 	bl	8002538 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40012400 	.word	0x40012400
 800086c:	40021000 	.word	0x40021000
 8000870:	40010800 	.word	0x40010800

08000874 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	4b59      	ldr	r3, [pc, #356]	; (80009f0 <MX_GPIO_Init+0x17c>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a58      	ldr	r2, [pc, #352]	; (80009f0 <MX_GPIO_Init+0x17c>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b56      	ldr	r3, [pc, #344]	; (80009f0 <MX_GPIO_Init+0x17c>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a0:	4b53      	ldr	r3, [pc, #332]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a52      	ldr	r2, [pc, #328]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008a6:	f043 0320 	orr.w	r3, r3, #32
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0320 	and.w	r3, r3, #32
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b4d      	ldr	r3, [pc, #308]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a4c      	ldr	r2, [pc, #304]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b4a      	ldr	r3, [pc, #296]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d0:	4b47      	ldr	r3, [pc, #284]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a46      	ldr	r2, [pc, #280]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008d6:	f043 0308 	orr.w	r3, r3, #8
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b44      	ldr	r3, [pc, #272]	; (80009f0 <MX_GPIO_Init+0x17c>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0308 	and.w	r3, r3, #8
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ee:	4841      	ldr	r0, [pc, #260]	; (80009f4 <MX_GPIO_Init+0x180>)
 80008f0:	f001 ff7c 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_3_DIR_Pin|MOTOR_4_DIR_Pin|MOTOR_5_DIR_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f648 0120 	movw	r1, #34848	; 0x8820
 80008fa:	483f      	ldr	r0, [pc, #252]	; (80009f8 <MX_GPIO_Init+0x184>)
 80008fc:	f001 ff76 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_2_DIR_Pin|MOTOR_1_DIR_Pin|MOTOR_6_DIR_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 4198 	mov.w	r1, #19456	; 0x4c00
 8000906:	483d      	ldr	r0, [pc, #244]	; (80009fc <MX_GPIO_Init+0x188>)
 8000908:	f001 ff70 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800090c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	4833      	ldr	r0, [pc, #204]	; (80009f4 <MX_GPIO_Init+0x180>)
 8000926:	f001 fe07 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_3_Pin|LIMIT_SWITCH_2_Pin|LIMIT_SWITCH_1_Pin;
 800092a:	2386      	movs	r3, #134	; 0x86
 800092c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <MX_GPIO_Init+0x18c>)
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	4619      	mov	r1, r3
 800093c:	482e      	ldr	r0, [pc, #184]	; (80009f8 <MX_GPIO_Init+0x184>)
 800093e:	f001 fdfb 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_3_DIR_Pin|MOTOR_4_DIR_Pin|MOTOR_5_DIR_Pin;
 8000942:	f648 0320 	movw	r3, #34848	; 0x8820
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2302      	movs	r3, #2
 8000952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4619      	mov	r1, r3
 800095a:	4827      	ldr	r0, [pc, #156]	; (80009f8 <MX_GPIO_Init+0x184>)
 800095c:	f001 fdec 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_2_DIR_Pin|MOTOR_1_DIR_Pin|MOTOR_6_DIR_Pin;
 8000960:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2302      	movs	r3, #2
 8000970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	4619      	mov	r1, r3
 8000978:	4820      	ldr	r0, [pc, #128]	; (80009fc <MX_GPIO_Init+0x188>)
 800097a:	f001 fddd 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_6_Pin|LIMIT_SWITCH_5_Pin|LIMIT_SWITCH_4_Pin;
 800097e:	f243 0310 	movw	r3, #12304	; 0x3010
 8000982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_GPIO_Init+0x18c>)
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	4619      	mov	r1, r3
 8000992:	481a      	ldr	r0, [pc, #104]	; (80009fc <MX_GPIO_Init+0x188>)
 8000994:	f001 fdd0 	bl	8002538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2007      	movs	r0, #7
 800099e:	f001 fd94 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009a2:	2007      	movs	r0, #7
 80009a4:	f001 fdad 	bl	8002502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2008      	movs	r0, #8
 80009ae:	f001 fd8c 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009b2:	2008      	movs	r0, #8
 80009b4:	f001 fda5 	bl	8002502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	200a      	movs	r0, #10
 80009be:	f001 fd84 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009c2:	200a      	movs	r0, #10
 80009c4:	f001 fd9d 	bl	8002502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2017      	movs	r0, #23
 80009ce:	f001 fd7c 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009d2:	2017      	movs	r0, #23
 80009d4:	f001 fd95 	bl	8002502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2028      	movs	r0, #40	; 0x28
 80009de:	f001 fd74 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e2:	2028      	movs	r0, #40	; 0x28
 80009e4:	f001 fd8d 	bl	8002502 <HAL_NVIC_EnableIRQ>

}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40011000 	.word	0x40011000
 80009f8:	40010800 	.word	0x40010800
 80009fc:	40010c00 	.word	0x40010c00
 8000a00:	10310000 	.word	0x10310000

08000a04 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a0a:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <MX_I2C1_Init+0x54>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a10:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_I2C1_Init+0x58>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a42:	f001 ff03 	bl	800284c <HAL_I2C_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a4c:	f000 f963 	bl	8000d16 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000114 	.word	0x20000114
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	000186a0 	.word	0x000186a0

08000a60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <HAL_I2C_MspInit+0x90>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d132      	bne.n	8000ae6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <HAL_I2C_MspInit+0x94>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <HAL_I2C_MspInit+0x94>)
 8000a86:	f043 0308 	orr.w	r3, r3, #8
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_I2C_MspInit+0x94>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0308 	and.w	r3, r3, #8
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU_9250_I2C_SCL_Pin|MPU_9250_I2C_SDA_Pin;
 8000a98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9e:	2312      	movs	r3, #18
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4812      	ldr	r0, [pc, #72]	; (8000af8 <HAL_I2C_MspInit+0x98>)
 8000aae:	f001 fd43 	bl	8002538 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_I2C_MspInit+0x9c>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <HAL_I2C_MspInit+0x9c>)
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_I2C_MspInit+0x94>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_I2C_MspInit+0x94>)
 8000ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_I2C_MspInit+0x94>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010c00 	.word	0x40010c00
 8000afc:	40010000 	.word	0x40010000

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	b090      	sub	sp, #64	; 0x40
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

/*Test*/
char MPUStatus1[] = "MPU 9250 Connected\n";
 8000b06:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <main+0xe0>)
 8000b08:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000b0c:	461d      	mov	r5, r3
 8000b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b12:	682b      	ldr	r3, [r5, #0]
 8000b14:	6023      	str	r3, [r4, #0]
char MPUStatus2[] = "MPU 9250 Not Connected\n";
 8000b16:	4b33      	ldr	r3, [pc, #204]	; (8000be4 <main+0xe4>)
 8000b18:	f107 0410 	add.w	r4, r7, #16
 8000b1c:	461d      	mov	r5, r3
 8000b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b26:	e884 0003 	stmia.w	r4, {r0, r1}
char MPUStatus3[] = "MPU 9250 Error\n";
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <main+0xe8>)
 8000b2c:	463c      	mov	r4, r7
 8000b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f001 f964 	bl	8001e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f85e 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f7ff fe9a 	bl	8000874 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b40:	f7ff ff60 	bl	8000a04 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000b44:	f000 ff86 	bl	8001a54 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b48:	f000 fecc 	bl	80018e4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000b4c:	f001 f8ae 	bl	8001cac <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000b50:	f7ff fe16 	bl	8000780 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /*Start Motor Timers*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);		/* Start timer of motor 1*/
 8000b54:	210c      	movs	r1, #12
 8000b56:	4825      	ldr	r0, [pc, #148]	; (8000bec <main+0xec>)
 8000b58:	f003 fe6c 	bl	8004834 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		/* Start timer of motor 2*/
 8000b5c:	2108      	movs	r1, #8
 8000b5e:	4823      	ldr	r0, [pc, #140]	; (8000bec <main+0xec>)
 8000b60:	f003 fe68 	bl	8004834 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		/* Start timer of motor 3*/
 8000b64:	2100      	movs	r1, #0
 8000b66:	4821      	ldr	r0, [pc, #132]	; (8000bec <main+0xec>)
 8000b68:	f003 fe64 	bl	8004834 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		/* Start timer of motor 4*/
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <main+0xf0>)
 8000b70:	f003 fe60 	bl	8004834 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);		/* Start timer of motor 6*/
 8000b74:	2100      	movs	r1, #0
 8000b76:	481e      	ldr	r0, [pc, #120]	; (8000bf0 <main+0xf0>)
 8000b78:	f003 fe5c 	bl	8004834 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);		/* Start timer of motor 5*/
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	481c      	ldr	r0, [pc, #112]	; (8000bf0 <main+0xf0>)
 8000b80:	f003 fe58 	bl	8004834 <HAL_TIM_PWM_Start>


  /*Initialize Inertial Measurement Unit*/
  MPU9250Init();
 8000b84:	f000 f98c 	bl	8000ea0 <MPU9250Init>
  AK8963Init();
 8000b88:	f000 fa0e 	bl	8000fa8 <AK8963Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  bool MPU9250Status = MPU9250IsConnected();
 8000b8c:	f000 f8c8 	bl	8000d20 <MPU9250IsConnected>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	  if (MPU9250Status == true)
 8000b96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d007      	beq.n	8000bae <main+0xae>
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t *)MPUStatus1, sizeof(MPUStatus1),100);
 8000b9e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ba2:	2364      	movs	r3, #100	; 0x64
 8000ba4:	2214      	movs	r2, #20
 8000ba6:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <main+0xf4>)
 8000ba8:	f004 fc60 	bl	800546c <HAL_UART_Transmit>
 8000bac:	e014      	b.n	8000bd8 <main+0xd8>
	  }

	  else if (MPU9250Status == false)
 8000bae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bb2:	f083 0301 	eor.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d007      	beq.n	8000bcc <main+0xcc>
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t *)MPUStatus2, sizeof(MPUStatus2),100);
 8000bbc:	f107 0110 	add.w	r1, r7, #16
 8000bc0:	2364      	movs	r3, #100	; 0x64
 8000bc2:	2218      	movs	r2, #24
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <main+0xf4>)
 8000bc6:	f004 fc51 	bl	800546c <HAL_UART_Transmit>
 8000bca:	e005      	b.n	8000bd8 <main+0xd8>
	  }

	  else
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t *)MPUStatus3, sizeof(MPUStatus3),100);
 8000bcc:	4639      	mov	r1, r7
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	2210      	movs	r2, #16
 8000bd2:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <main+0xf4>)
 8000bd4:	f004 fc4a 	bl	800546c <HAL_UART_Transmit>
	  }




	  HAL_Delay(100);
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f001 f973 	bl	8001ec4 <HAL_Delay>
  {
 8000bde:	e7d5      	b.n	8000b8c <main+0x8c>
 8000be0:	080057c8 	.word	0x080057c8
 8000be4:	080057dc 	.word	0x080057dc
 8000be8:	080057f4 	.word	0x080057f4
 8000bec:	2000016c 	.word	0x2000016c
 8000bf0:	200001b4 	.word	0x200001b4
 8000bf4:	200001fc 	.word	0x200001fc

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b094      	sub	sp, #80	; 0x50
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c02:	2228      	movs	r2, #40	; 0x28
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 fdc9 	bl	800579e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c36:	2301      	movs	r3, #1
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 f876 	bl	8003d40 <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c5a:	f000 f85c 	bl	8000d16 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	230f      	movs	r3, #15
 8000c60:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 fae0 	bl	8004240 <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c86:	f000 f846 	bl	8000d16 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c92:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fc6e 	bl	8004578 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ca2:	f000 f838 	bl	8000d16 <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3750      	adds	r7, #80	; 0x50
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_GPIO_EXTI_Callback>:
	__NOP();
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)			/*Callback Function for all the external interrupt functions for limit switches 1-6*/
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	2b10      	cmp	r3, #16
 8000cbc:	d01b      	beq.n	8000cf6 <HAL_GPIO_EXTI_Callback+0x48>
 8000cbe:	2b10      	cmp	r3, #16
 8000cc0:	dc04      	bgt.n	8000ccc <HAL_GPIO_EXTI_Callback+0x1e>
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_EXTI_Callback+0x40>
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	d00d      	beq.n	8000ce6 <HAL_GPIO_EXTI_Callback+0x38>
					  break;

	case GPIO_PIN_13: LimitSwitchStateDetect(6)	;		/* Limit Switch 6 State Update */
					  break;

	default: 		  break;
 8000cca:	e020      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	switch(GPIO_Pin)
 8000ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cd0:	d015      	beq.n	8000cfe <HAL_GPIO_EXTI_Callback+0x50>
 8000cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd6:	d016      	beq.n	8000d06 <HAL_GPIO_EXTI_Callback+0x58>
 8000cd8:	2b80      	cmp	r3, #128	; 0x80
 8000cda:	d000      	beq.n	8000cde <HAL_GPIO_EXTI_Callback+0x30>
	default: 		  break;
 8000cdc:	e017      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_7 : LimitSwitchStateDetect(1);		/* Limit Switch 1 State Update*/
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f000 f9da 	bl	8001098 <LimitSwitchStateDetect>
					  break;
 8000ce4:	e013      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_2	: LimitSwitchStateDetect(2)	;		/* Limit Switch 2 State Update */
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f000 f9d6 	bl	8001098 <LimitSwitchStateDetect>
					  break;
 8000cec:	e00f      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_1	: LimitSwitchStateDetect(3)	;		/* Limit Switch 3 State Update */
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f000 f9d2 	bl	8001098 <LimitSwitchStateDetect>
					  break;
 8000cf4:	e00b      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_4 : LimitSwitchStateDetect(4)	;		/* Limit Switch 4 State Update */
 8000cf6:	2004      	movs	r0, #4
 8000cf8:	f000 f9ce 	bl	8001098 <LimitSwitchStateDetect>
					  break;
 8000cfc:	e007      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_12: LimitSwitchStateDetect(5)	;		/* Limit Switch 5 State Update */
 8000cfe:	2005      	movs	r0, #5
 8000d00:	f000 f9ca 	bl	8001098 <LimitSwitchStateDetect>
					  break;
 8000d04:	e003      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x60>
	case GPIO_PIN_13: LimitSwitchStateDetect(6)	;		/* Limit Switch 6 State Update */
 8000d06:	2006      	movs	r0, #6
 8000d08:	f000 f9c6 	bl	8001098 <LimitSwitchStateDetect>
					  break;
 8000d0c:	bf00      	nop

	}
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x6>
	...

08000d20 <MPU9250IsConnected>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com		Basic function using HAL_I2C_IsDeviceReady function
*/

bool  MPU9250IsConnected()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1,MPU9250_ADDRESS,MPU9250_I2C_COMM_CHECK_TRY, MPU9250_I2C_COMM_CHECK_TIMEOUT) == HAL_OK)
 8000d24:	230a      	movs	r3, #10
 8000d26:	2201      	movs	r2, #1
 8000d28:	21d0      	movs	r1, #208	; 0xd0
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MPU9250IsConnected+0x20>)
 8000d2c:	f002 fb18 	bl	8003360 <HAL_I2C_IsDeviceReady>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <MPU9250IsConnected+0x1a>
		{
			return true;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <MPU9250IsConnected+0x1c>
		}
	else
		{
			return false;
 8000d3a:	2300      	movs	r3, #0
		}

}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000114 	.word	0x20000114

08000d44 <I2CWrite>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com		Basic routine using HAL_I2C_Mem_Write function
*/

static void I2CWrite(uint8_t *data,uint8_t device_address ,uint8_t write_address , uint16_t num_bytes)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af04      	add	r7, sp, #16
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	4611      	mov	r1, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	4603      	mov	r3, r0
 8000d54:	70fb      	strb	r3, [r7, #3]
 8000d56:	460b      	mov	r3, r1
 8000d58:	70bb      	strb	r3, [r7, #2]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	803b      	strh	r3, [r7, #0]
	MPUReturnStatus = HAL_I2C_Mem_Write(&hi2c1, device_address, write_address, I2C_MEMADD_SIZE_8BIT, data, num_bytes, HAL_MAX_DELAY);
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	b299      	uxth	r1, r3
 8000d62:	78bb      	ldrb	r3, [r7, #2]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	883b      	ldrh	r3, [r7, #0]
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2301      	movs	r3, #1
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <I2CWrite+0x48>)
 8000d78:	f002 f9f8 	bl	800316c <HAL_I2C_Mem_Write>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <I2CWrite+0x4c>)
 8000d82:	701a      	strb	r2, [r3, #0]

	/*Insert Error Handling Routine*/


}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000114 	.word	0x20000114
 8000d90:	20000168 	.word	0x20000168

08000d94 <I2CRead>:
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com		Basic routine using HAL_I2C_Master_Transmit
 * 	  																			and HAL_I2C_Master_Receive function
*/

static void I2CRead(uint8_t *data_recieve_buffer,uint8_t device_address ,uint8_t read_address, uint16_t num_bytes_to_read)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	4611      	mov	r1, r2
 8000da0:	461a      	mov	r2, r3
 8000da2:	4603      	mov	r3, r0
 8000da4:	70fb      	strb	r3, [r7, #3]
 8000da6:	460b      	mov	r3, r1
 8000da8:	70bb      	strb	r3, [r7, #2]
 8000daa:	4613      	mov	r3, r2
 8000dac:	803b      	strh	r3, [r7, #0]

	uint8_t data_send = read_address;
 8000dae:	78bb      	ldrb	r3, [r7, #2]
 8000db0:	73fb      	strb	r3, [r7, #15]

	/*Transmit the register address(to be read) in the MPU 9250*/
	MPUReturnStatus = HAL_I2C_Master_Transmit(&hi2c1 , device_address, &data_send , 1 , HAL_MAX_DELAY);
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	b299      	uxth	r1, r3
 8000db6:	f107 020f 	add.w	r2, r7, #15
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <I2CRead+0x64>)
 8000dc4:	f001 fe7a 	bl	8002abc <HAL_I2C_Master_Transmit>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <I2CRead+0x68>)
 8000dce:	701a      	strb	r2, [r3, #0]

	/*Insert Error Handling Routine*/


	/* Recieve data in the register in MPU9250 and store it in data_recieve_buffer*/
	MPUReturnStatus = HAL_I2C_Master_Receive(&hi2c1 , device_address, data_recieve_buffer, num_bytes_to_read , HAL_MAX_DELAY);
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	b299      	uxth	r1, r3
 8000dd4:	883a      	ldrh	r2, [r7, #0]
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <I2CRead+0x64>)
 8000de2:	f001 ff69 	bl	8002cb8 <HAL_I2C_Master_Receive>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <I2CRead+0x68>)
 8000dec:	701a      	strb	r2, [r3, #0]

}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000114 	.word	0x20000114
 8000dfc:	20000168 	.word	0x20000168

08000e00 <WriteMPURegister>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void WriteMPURegister(uint8_t register_address , uint8_t data)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	460a      	mov	r2, r1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	71bb      	strb	r3, [r7, #6]
	I2CWrite(&data,MPU9250_ADDRESS,register_address, sizeof(data));
 8000e10:	79fa      	ldrb	r2, [r7, #7]
 8000e12:	1db8      	adds	r0, r7, #6
 8000e14:	2301      	movs	r3, #1
 8000e16:	21d0      	movs	r1, #208	; 0xd0
 8000e18:	f7ff ff94 	bl	8000d44 <I2CWrite>
	HAL_Delay(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f001 f851 	bl	8001ec4 <HAL_Delay>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <ReadMPURegister>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void ReadMPURegister(uint8_t register_address , uint8_t* data_buffer, uint8_t data_size)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	6039      	str	r1, [r7, #0]
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	4613      	mov	r3, r2
 8000e38:	71bb      	strb	r3, [r7, #6]
	I2CRead(data_buffer ,MPU9250_ADDRESS	 ,register_address, data_size);
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	79fa      	ldrb	r2, [r7, #7]
 8000e40:	21d0      	movs	r1, #208	; 0xd0
 8000e42:	6838      	ldr	r0, [r7, #0]
 8000e44:	f7ff ffa6 	bl	8000d94 <I2CRead>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <WriteAK8963Register>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void WriteAK8963Register(uint8_t register_address , uint8_t data)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	71bb      	strb	r3, [r7, #6]
	I2CWrite(&data,AK8963_ADDRESS,register_address, sizeof(data));
 8000e60:	79fa      	ldrb	r2, [r7, #7]
 8000e62:	1db8      	adds	r0, r7, #6
 8000e64:	2301      	movs	r3, #1
 8000e66:	2118      	movs	r1, #24
 8000e68:	f7ff ff6c 	bl	8000d44 <I2CWrite>
	HAL_Delay(10);
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f001 f829 	bl	8001ec4 <HAL_Delay>

}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <ReadAK8963Register>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

static void ReadAK8963Register(uint8_t register_address, uint8_t* data_buffer, uint8_t data_size)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	6039      	str	r1, [r7, #0]
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	4613      	mov	r3, r2
 8000e88:	71bb      	strb	r3, [r7, #6]

	I2CRead(data_buffer ,AK8963_ADDRESS,register_address, data_size);
 8000e8a:	79bb      	ldrb	r3, [r7, #6]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	79fa      	ldrb	r2, [r7, #7]
 8000e90:	2118      	movs	r1, #24
 8000e92:	6838      	ldr	r0, [r7, #0]
 8000e94:	f7ff ff7e 	bl	8000d94 <I2CRead>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <MPU9250Init>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void MPU9250Init()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
	WriteMPURegister(PWR_MGMT_1,0x00);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	206b      	movs	r0, #107	; 0x6b
 8000eaa:	f7ff ffa9 	bl	8000e00 <WriteMPURegister>
	HAL_Delay(100);
 8000eae:	2064      	movs	r0, #100	; 0x64
 8000eb0:	f001 f808 	bl	8001ec4 <HAL_Delay>
	WriteMPURegister(PWR_MGMT_1,0x01);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	206b      	movs	r0, #107	; 0x6b
 8000eb8:	f7ff ffa2 	bl	8000e00 <WriteMPURegister>
	HAL_Delay(200);
 8000ebc:	20c8      	movs	r0, #200	; 0xc8
 8000ebe:	f001 f801 	bl	8001ec4 <HAL_Delay>
	WriteMPURegister(CONFIG,0x03);
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	201a      	movs	r0, #26
 8000ec6:	f7ff ff9b 	bl	8000e00 <WriteMPURegister>
	WriteMPURegister(SMPLRT_DIV,0x04);
 8000eca:	2104      	movs	r1, #4
 8000ecc:	2019      	movs	r0, #25
 8000ece:	f7ff ff97 	bl	8000e00 <WriteMPURegister>

	/*Set Gyroscope Scale Configuration*/
	uint8_t gyro_config = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	70fb      	strb	r3, [r7, #3]
	uint8_t* gyro_config_addr = &gyro_config;
 8000ed6:	1cfb      	adds	r3, r7, #3
 8000ed8:	60fb      	str	r3, [r7, #12]
	ReadMPURegister(GYRO_CONFIG,gyro_config_addr,sizeof(gyro_config));
 8000eda:	2201      	movs	r2, #1
 8000edc:	68f9      	ldr	r1, [r7, #12]
 8000ede:	201b      	movs	r0, #27
 8000ee0:	f7ff ffa3 	bl	8000e2a <ReadMPURegister>
	gyro_config = gyro_config &~0x02;
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	f023 0302 	bic.w	r3, r3, #2
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	70fb      	strb	r3, [r7, #3]
	gyro_config = gyro_config &~0x18;
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	f023 0318 	bic.w	r3, r3, #24
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	70fb      	strb	r3, [r7, #3]
	gyro_config = gyro_config|GScale << 3;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MPU9250Init+0x100>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	70fb      	strb	r3, [r7, #3]
	/*gyro_config = gyro_config|0x00;*/
	WriteMPURegister(GYRO_CONFIG,gyro_config);
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	201b      	movs	r0, #27
 8000f12:	f7ff ff75 	bl	8000e00 <WriteMPURegister>

	/*Set Accelerometer Scale Configuration*/
	uint8_t accel_config = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	70bb      	strb	r3, [r7, #2]
	uint8_t* accel_config_addr = &accel_config;
 8000f1a:	1cbb      	adds	r3, r7, #2
 8000f1c:	60bb      	str	r3, [r7, #8]
	ReadMPURegister(ACCEL_CONFIG,accel_config_addr,sizeof(accel_config));
 8000f1e:	2201      	movs	r2, #1
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	201c      	movs	r0, #28
 8000f24:	f7ff ff81 	bl	8000e2a <ReadMPURegister>
	/*accel_config = accel_config &~0xE0;*/
	accel_config = accel_config &~0x18;
 8000f28:	78bb      	ldrb	r3, [r7, #2]
 8000f2a:	f023 0318 	bic.w	r3, r3, #24
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	70bb      	strb	r3, [r7, #2]
	accel_config = accel_config | AScale << 3;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MPU9250Init+0x104>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	78bb      	ldrb	r3, [r7, #2]
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	70bb      	strb	r3, [r7, #2]
	WriteMPURegister(ACCEL_CONFIG,accel_config);
 8000f46:	78bb      	ldrb	r3, [r7, #2]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	201c      	movs	r0, #28
 8000f4c:	f7ff ff58 	bl	8000e00 <WriteMPURegister>

	/*Set accelerometer sample rate configuration*/
	uint8_t accel_config_2 = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	707b      	strb	r3, [r7, #1]
	uint8_t* accel_config_2_addr = &accel_config_2;
 8000f54:	1c7b      	adds	r3, r7, #1
 8000f56:	607b      	str	r3, [r7, #4]
	ReadMPURegister(ACCEL_CONFIG2,accel_config_2_addr,sizeof(accel_config_2));
 8000f58:	2201      	movs	r2, #1
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	201d      	movs	r0, #29
 8000f5e:	f7ff ff64 	bl	8000e2a <ReadMPURegister>
	accel_config = accel_config_2 &~0x0F;
 8000f62:	787b      	ldrb	r3, [r7, #1]
 8000f64:	f023 030f 	bic.w	r3, r3, #15
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	70bb      	strb	r3, [r7, #2]
	accel_config = accel_config_2 | 0x03;
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	f043 0303 	orr.w	r3, r3, #3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	70bb      	strb	r3, [r7, #2]
	WriteMPURegister(ACCEL_CONFIG2,accel_config_2);
 8000f76:	787b      	ldrb	r3, [r7, #1]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	201d      	movs	r0, #29
 8000f7c:	f7ff ff40 	bl	8000e00 <WriteMPURegister>

	WriteMPURegister(INT_PIN_CFG,0x22);
 8000f80:	2122      	movs	r1, #34	; 0x22
 8000f82:	2037      	movs	r0, #55	; 0x37
 8000f84:	f7ff ff3c 	bl	8000e00 <WriteMPURegister>
	WriteMPURegister(INT_ENABLE,0x01);
 8000f88:	2101      	movs	r1, #1
 8000f8a:	2038      	movs	r0, #56	; 0x38
 8000f8c:	f7ff ff38 	bl	8000e00 <WriteMPURegister>
	HAL_Delay(100);
 8000f90:	2064      	movs	r0, #100	; 0x64
 8000f92:	f000 ff97 	bl	8001ec4 <HAL_Delay>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000059 	.word	0x20000059
 8000fa4:	20000058 	.word	0x20000058

08000fa8 <AK8963Init>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-01-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void AK8963Init()
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	uint8_t raw_data[3];
	WriteAK8963Register( AK8963_CNTL,0x00);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f7ff ff4d 	bl	8000e50 <WriteAK8963Register>
	HAL_Delay(100);
 8000fb6:	2064      	movs	r0, #100	; 0x64
 8000fb8:	f000 ff84 	bl	8001ec4 <HAL_Delay>
	WriteAK8963Register( AK8963_CNTL,0x0F);
 8000fbc:	210f      	movs	r1, #15
 8000fbe:	200a      	movs	r0, #10
 8000fc0:	f7ff ff46 	bl	8000e50 <WriteAK8963Register>
	HAL_Delay(100);
 8000fc4:	2064      	movs	r0, #100	; 0x64
 8000fc6:	f000 ff7d 	bl	8001ec4 <HAL_Delay>
	ReadAK8963Register(AK8963_ASAX, &raw_data[0], sizeof(raw_data));
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2203      	movs	r2, #3
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2010      	movs	r0, #16
 8000fd2:	f7ff ff52 	bl	8000e7a <ReadAK8963Register>

	MagBiasFactory[0] = (float)(raw_data[0] - 128)/256.0f +1.0f;
 8000fd6:	793b      	ldrb	r3, [r7, #4]
 8000fd8:	3b80      	subs	r3, #128	; 0x80
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f970 	bl	80002c0 <__aeabi_i2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa72 	bl	80004d0 <__aeabi_fdiv>
 8000fec:	4603      	mov	r3, r0
 8000fee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f8b0 	bl	8000158 <__addsf3>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <AK8963Init+0xe4>)
 8000ffe:	601a      	str	r2, [r3, #0]
	MagBiasFactory[1] = (float)(raw_data[1] - 128)/256.0f +1.0f;
 8001000:	797b      	ldrb	r3, [r7, #5]
 8001002:	3b80      	subs	r3, #128	; 0x80
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f95b 	bl	80002c0 <__aeabi_i2f>
 800100a:	4603      	mov	r3, r0
 800100c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa5d 	bl	80004d0 <__aeabi_fdiv>
 8001016:	4603      	mov	r3, r0
 8001018:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f89b 	bl	8000158 <__addsf3>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <AK8963Init+0xe4>)
 8001028:	605a      	str	r2, [r3, #4]
	MagBiasFactory[2] = (float)(raw_data[2] - 128)/256.0f +1.0f;
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	3b80      	subs	r3, #128	; 0x80
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f946 	bl	80002c0 <__aeabi_i2f>
 8001034:	4603      	mov	r3, r0
 8001036:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa48 	bl	80004d0 <__aeabi_fdiv>
 8001040:	4603      	mov	r3, r0
 8001042:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f886 	bl	8000158 <__addsf3>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <AK8963Init+0xe4>)
 8001052:	609a      	str	r2, [r3, #8]

	WriteAK8963Register(AK8963_CNTL,0x00);
 8001054:	2100      	movs	r1, #0
 8001056:	200a      	movs	r0, #10
 8001058:	f7ff fefa 	bl	8000e50 <WriteAK8963Register>
	HAL_Delay(100);
 800105c:	2064      	movs	r0, #100	; 0x64
 800105e:	f000 ff31 	bl	8001ec4 <HAL_Delay>

	WriteAK8963Register(AK8963_CNTL,MScale <<4|MMode);
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <AK8963Init+0xe8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	b25a      	sxtb	r2, r3
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <AK8963Init+0xec>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b25b      	sxtb	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	200a      	movs	r0, #10
 800107a:	f7ff fee9 	bl	8000e50 <WriteAK8963Register>
	HAL_Delay(100);
 800107e:	2064      	movs	r0, #100	; 0x64
 8001080:	f000 ff20 	bl	8001ec4 <HAL_Delay>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000004c 	.word	0x2000004c
 8001090:	20000001 	.word	0x20000001
 8001094:	20000000 	.word	0x20000000

08001098 <LimitSwitchStateDetect>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-03-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void LimitSwitchStateDetect(uint32_t limit_switch_index)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	switch (LimitSwitchState[limit_switch_index -1]) /*Every time the function is triggered from the external interrupt, the updated value is the opposite of the old value*/
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <LimitSwitchStateDetect+0x3c>)
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <LimitSwitchStateDetect+0x1a>
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d006      	beq.n	80010be <LimitSwitchStateDetect+0x26>
						  	  	  	  	  	 break;

						  	  	  case HIGH: LimitSwitchState[limit_switch_index -1] = LOW;
						  	  	  	  	  	 break;

						  	  	  default: break;
 80010b0:	e00b      	b.n	80010ca <LimitSwitchStateDetect+0x32>
						  	  	  case LOW:  LimitSwitchState[limit_switch_index -1] = HIGH;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <LimitSwitchStateDetect+0x3c>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	54d1      	strb	r1, [r2, r3]
						  	  	  	  	  	 break;
 80010bc:	e005      	b.n	80010ca <LimitSwitchStateDetect+0x32>
						  	  	  case HIGH: LimitSwitchState[limit_switch_index -1] = LOW;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <LimitSwitchStateDetect+0x3c>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	54d1      	strb	r1, [r2, r3]
						  	  	  	  	  	 break;
 80010c8:	bf00      	nop
								  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	200000d4 	.word	0x200000d4

080010d8 <MotorRotateAbsolute>:
 * Called by					:
 *  Notes			 			: This function is being executed in the Systick handler for this project. However if you use this in another loop, please update MOTOR_LOOP_UPDATE_FREQUENCY configuration parameter
*/

static void MotorRotateAbsolute(uint8_t motor_index)
{	/*Declare Local variables*/
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	float32_t delta_motor_angle = 0;
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]

	switch(MotorTagetAngleSet[motor_index -1])
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	4aa6      	ldr	r2, [pc, #664]	; (8001388 <MotorRotateAbsolute+0x2b0>)
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <MotorRotateAbsolute+0x22>
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d07c      	beq.n	80011f2 <MotorRotateAbsolute+0x11a>
					}
				}

				break;

	default :  break;
 80010f8:	e142      	b.n	8001380 <MotorRotateAbsolute+0x2a8>
				MotorTargetStepCount[motor_index -1] = (uint32_t)(MotorTargetAngle[motor_index-1]/MOTOR_STEP_ANGLE);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	4aa3      	ldr	r2, [pc, #652]	; (800138c <MotorRotateAbsolute+0x2b4>)
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	49a2      	ldr	r1, [pc, #648]	; (8001390 <MotorRotateAbsolute+0x2b8>)
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f9e2 	bl	80004d0 <__aeabi_fdiv>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	1e5c      	subs	r4, r3, #1
 8001114:	4610      	mov	r0, r2
 8001116:	f7ff fb13 	bl	8000740 <__aeabi_f2uiz>
 800111a:	4602      	mov	r2, r0
 800111c:	4b9d      	ldr	r3, [pc, #628]	; (8001394 <MotorRotateAbsolute+0x2bc>)
 800111e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				delta_motor_angle = MotorTargetAngle[motor_index -1]  - MotorTargetAnglePrevious[motor_index -1];
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	3b01      	subs	r3, #1
 8001126:	4a99      	ldr	r2, [pc, #612]	; (800138c <MotorRotateAbsolute+0x2b4>)
 8001128:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	3b01      	subs	r3, #1
 8001130:	4a99      	ldr	r2, [pc, #612]	; (8001398 <MotorRotateAbsolute+0x2c0>)
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff f80c 	bl	8000154 <__aeabi_fsub>
 800113c:	4603      	mov	r3, r0
 800113e:	60fb      	str	r3, [r7, #12]
				test = delta_motor_angle;
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff fad7 	bl	80006f4 <__aeabi_f2iz>
 8001146:	4603      	mov	r3, r0
 8001148:	b25a      	sxtb	r2, r3
 800114a:	4b94      	ldr	r3, [pc, #592]	; (800139c <MotorRotateAbsolute+0x2c4>)
 800114c:	701a      	strb	r2, [r3, #0]
				if (delta_motor_angle > 0)
 800114e:	f04f 0100 	mov.w	r1, #0
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff fac4 	bl	80006e0 <__aeabi_fcmpgt>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00f      	beq.n	800117e <MotorRotateAbsolute+0xa6>
				  MotorDirection[motor_index-1] = ANGLE_UP;
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	3b01      	subs	r3, #1
 8001162:	4a8f      	ldr	r2, [pc, #572]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 8001164:	2101      	movs	r1, #1
 8001166:	54d1      	strb	r1, [r2, r3]
				  MotorState[motor_index-1] = HIGH;
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a8d      	ldr	r2, [pc, #564]	; (80013a4 <MotorRotateAbsolute+0x2cc>)
 800116e:	2101      	movs	r1, #1
 8001170:	54d1      	strb	r1, [r2, r3]
				  MotorHighStateSetFlag[motor_index -1] = LOW;
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	3b01      	subs	r3, #1
 8001176:	4a8c      	ldr	r2, [pc, #560]	; (80013a8 <MotorRotateAbsolute+0x2d0>)
 8001178:	2100      	movs	r1, #0
 800117a:	54d1      	strb	r1, [r2, r3]
 800117c:	e029      	b.n	80011d2 <MotorRotateAbsolute+0xfa>
				else if (delta_motor_angle < 0)
 800117e:	f04f 0100 	mov.w	r1, #0
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff fa8e 	bl	80006a4 <__aeabi_fcmplt>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00f      	beq.n	80011ae <MotorRotateAbsolute+0xd6>
					MotorDirection[motor_index-1] = ANGLE_DOWN;
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	3b01      	subs	r3, #1
 8001192:	4a83      	ldr	r2, [pc, #524]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 8001194:	21ff      	movs	r1, #255	; 0xff
 8001196:	54d1      	strb	r1, [r2, r3]
					MotorState[motor_index-1] = HIGH;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	3b01      	subs	r3, #1
 800119c:	4a81      	ldr	r2, [pc, #516]	; (80013a4 <MotorRotateAbsolute+0x2cc>)
 800119e:	2101      	movs	r1, #1
 80011a0:	54d1      	strb	r1, [r2, r3]
					MotorHighStateSetFlag[motor_index -1] = LOW;
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	4a80      	ldr	r2, [pc, #512]	; (80013a8 <MotorRotateAbsolute+0x2d0>)
 80011a8:	2100      	movs	r1, #0
 80011aa:	54d1      	strb	r1, [r2, r3]
 80011ac:	e011      	b.n	80011d2 <MotorRotateAbsolute+0xfa>
				else if (delta_motor_angle == 0)
 80011ae:	f04f 0100 	mov.w	r1, #0
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff fa6c 	bl	8000690 <__aeabi_fcmpeq>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d009      	beq.n	80011d2 <MotorRotateAbsolute+0xfa>
					MotorDirection[motor_index-1] = ANGLE_HOLD;
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4a77      	ldr	r2, [pc, #476]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 80011c4:	2100      	movs	r1, #0
 80011c6:	54d1      	strb	r1, [r2, r3]
					MotorState[motor_index-1] = LOW;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	4a75      	ldr	r2, [pc, #468]	; (80013a4 <MotorRotateAbsolute+0x2cc>)
 80011ce:	2100      	movs	r1, #0
 80011d0:	54d1      	strb	r1, [r2, r3]
				MotorTargetAnglePrevious[motor_index -1] = MotorTargetAngle[motor_index -1];
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	1e5a      	subs	r2, r3, #1
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	3b01      	subs	r3, #1
 80011da:	496c      	ldr	r1, [pc, #432]	; (800138c <MotorRotateAbsolute+0x2b4>)
 80011dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011e0:	496d      	ldr	r1, [pc, #436]	; (8001398 <MotorRotateAbsolute+0x2c0>)
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				MotorTagetAngleSet[motor_index -1] = TRUE;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	4a67      	ldr	r2, [pc, #412]	; (8001388 <MotorRotateAbsolute+0x2b0>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	54d1      	strb	r1, [r2, r3]
				break;
 80011f0:	e0c6      	b.n	8001380 <MotorRotateAbsolute+0x2a8>
				if (MotorTargetAngle[motor_index -1] != MotorTargetAnglePrevious[motor_index -1]) /*Condition for target angle change*/
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	4a65      	ldr	r2, [pc, #404]	; (800138c <MotorRotateAbsolute+0x2b4>)
 80011f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	3b01      	subs	r3, #1
 8001200:	4a65      	ldr	r2, [pc, #404]	; (8001398 <MotorRotateAbsolute+0x2c0>)
 8001202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fa42 	bl	8000690 <__aeabi_fcmpeq>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d105      	bne.n	800121e <MotorRotateAbsolute+0x146>
				  MotorTagetAngleSet[motor_index -1] = FALSE;
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	3b01      	subs	r3, #1
 8001216:	4a5c      	ldr	r2, [pc, #368]	; (8001388 <MotorRotateAbsolute+0x2b0>)
 8001218:	2100      	movs	r1, #0
 800121a:	54d1      	strb	r1, [r2, r3]
				  break;
 800121c:	e0b0      	b.n	8001380 <MotorRotateAbsolute+0x2a8>
					switch(MotorDirection[motor_index -1])
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	3b01      	subs	r3, #1
 8001222:	4a5f      	ldr	r2, [pc, #380]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 8001224:	56d3      	ldrsb	r3, [r2, r3]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d03d      	beq.n	80012a6 <MotorRotateAbsolute+0x1ce>
 800122a:	2b01      	cmp	r3, #1
 800122c:	d003      	beq.n	8001236 <MotorRotateAbsolute+0x15e>
 800122e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001232:	d01c      	beq.n	800126e <MotorRotateAbsolute+0x196>
						default		   : break;
 8001234:	e038      	b.n	80012a8 <MotorRotateAbsolute+0x1d0>
						case ANGLE_UP:	 MotorCurrentStepCount[motor_index -1] = MotorCurrentStepCount[motor_index -1] + (MOTOR_PWM_TIMER_FREQUENCY/MOTOR_LOOP_UPDATE_FREQUENCY);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	3b01      	subs	r3, #1
 800123a:	4a5c      	ldr	r2, [pc, #368]	; (80013ac <MotorRotateAbsolute+0x2d4>)
 800123c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	3b01      	subs	r3, #1
 8001244:	3204      	adds	r2, #4
 8001246:	4959      	ldr	r1, [pc, #356]	; (80013ac <MotorRotateAbsolute+0x2d4>)
 8001248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
										 MotorCurrentAngle[motor_index -1] += (MOTOR_PWM_TIMER_FREQUENCY/MOTOR_LOOP_UPDATE_FREQUENCY)*MOTOR_STEP_ANGLE;
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	3b01      	subs	r3, #1
 8001250:	4a57      	ldr	r2, [pc, #348]	; (80013b0 <MotorRotateAbsolute+0x2d8>)
 8001252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	1e5c      	subs	r4, r3, #1
 800125a:	4956      	ldr	r1, [pc, #344]	; (80013b4 <MotorRotateAbsolute+0x2dc>)
 800125c:	4610      	mov	r0, r2
 800125e:	f7fe ff7b 	bl	8000158 <__addsf3>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	4b52      	ldr	r3, [pc, #328]	; (80013b0 <MotorRotateAbsolute+0x2d8>)
 8001268:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
										 break;
 800126c:	e01c      	b.n	80012a8 <MotorRotateAbsolute+0x1d0>
						case ANGLE_DOWN: MotorCurrentStepCount[motor_index -1] = MotorCurrentStepCount[motor_index -1] - (MOTOR_PWM_TIMER_FREQUENCY/MOTOR_LOOP_UPDATE_FREQUENCY);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	3b01      	subs	r3, #1
 8001272:	4a4e      	ldr	r2, [pc, #312]	; (80013ac <MotorRotateAbsolute+0x2d4>)
 8001274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	3b01      	subs	r3, #1
 800127c:	3a04      	subs	r2, #4
 800127e:	494b      	ldr	r1, [pc, #300]	; (80013ac <MotorRotateAbsolute+0x2d4>)
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
										 MotorCurrentAngle[motor_index -1] -= (MOTOR_PWM_TIMER_FREQUENCY/MOTOR_LOOP_UPDATE_FREQUENCY)*MOTOR_STEP_ANGLE;
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	3b01      	subs	r3, #1
 8001288:	4a49      	ldr	r2, [pc, #292]	; (80013b0 <MotorRotateAbsolute+0x2d8>)
 800128a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	1e5c      	subs	r4, r3, #1
 8001292:	4948      	ldr	r1, [pc, #288]	; (80013b4 <MotorRotateAbsolute+0x2dc>)
 8001294:	4610      	mov	r0, r2
 8001296:	f7fe ff5d 	bl	8000154 <__aeabi_fsub>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <MotorRotateAbsolute+0x2d8>)
 80012a0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
										 break;
 80012a4:	e000      	b.n	80012a8 <MotorRotateAbsolute+0x1d0>
						case ANGLE_HOLD: break;
 80012a6:	bf00      	nop
				if (MotorCurrentAngle[motor_index -1] >= MotorTargetAngle[motor_index -1])
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	4a40      	ldr	r2, [pc, #256]	; (80013b0 <MotorRotateAbsolute+0x2d8>)
 80012ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4a35      	ldr	r2, [pc, #212]	; (800138c <MotorRotateAbsolute+0x2b4>)
 80012b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fa05 	bl	80006cc <__aeabi_fcmpge>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d024      	beq.n	8001312 <MotorRotateAbsolute+0x23a>
					switch(MotorDirection[motor_index -1])
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	4a34      	ldr	r2, [pc, #208]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 80012ce:	56d3      	ldrsb	r3, [r2, r3]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d01c      	beq.n	8001310 <MotorRotateAbsolute+0x238>
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d000      	beq.n	80012dc <MotorRotateAbsolute+0x204>
					 default : break;
 80012da:	e01a      	b.n	8001312 <MotorRotateAbsolute+0x23a>
					 case ANGLE_UP:	MotorState[motor_index -1] = LOW;
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	3b01      	subs	r3, #1
 80012e0:	4a30      	ldr	r2, [pc, #192]	; (80013a4 <MotorRotateAbsolute+0x2cc>)
 80012e2:	2100      	movs	r1, #0
 80012e4:	54d1      	strb	r1, [r2, r3]
									MotorTargetAnglePrevious[motor_index -1] = MotorTargetAngle[motor_index -1];
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	1e5a      	subs	r2, r3, #1
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4927      	ldr	r1, [pc, #156]	; (800138c <MotorRotateAbsolute+0x2b4>)
 80012f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012f4:	4928      	ldr	r1, [pc, #160]	; (8001398 <MotorRotateAbsolute+0x2c0>)
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
									MotorDirection[motor_index -1] = ANGLE_HOLD;
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a28      	ldr	r2, [pc, #160]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 8001300:	2100      	movs	r1, #0
 8001302:	54d1      	strb	r1, [r2, r3]
									MotorTagetAngleSet[motor_index -1] = FALSE;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	3b01      	subs	r3, #1
 8001308:	4a1f      	ldr	r2, [pc, #124]	; (8001388 <MotorRotateAbsolute+0x2b0>)
 800130a:	2100      	movs	r1, #0
 800130c:	54d1      	strb	r1, [r2, r3]
									break;
 800130e:	e000      	b.n	8001312 <MotorRotateAbsolute+0x23a>
					 case ANGLE_DOWN: break;
 8001310:	bf00      	nop
				if (MotorCurrentAngle[motor_index -1] <= MotorTargetAngle[motor_index -1])
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	3b01      	subs	r3, #1
 8001316:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <MotorRotateAbsolute+0x2d8>)
 8001318:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	3b01      	subs	r3, #1
 8001320:	4a1a      	ldr	r2, [pc, #104]	; (800138c <MotorRotateAbsolute+0x2b4>)
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff f9c6 	bl	80006b8 <__aeabi_fcmple>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d100      	bne.n	8001334 <MotorRotateAbsolute+0x25c>
				break;
 8001332:	e024      	b.n	800137e <MotorRotateAbsolute+0x2a6>
					switch(MotorDirection[motor_index -1])
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	3b01      	subs	r3, #1
 8001338:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 800133a:	56d3      	ldrsb	r3, [r2, r3]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d002      	beq.n	8001348 <MotorRotateAbsolute+0x270>
 8001342:	2b01      	cmp	r3, #1
 8001344:	d01a      	beq.n	800137c <MotorRotateAbsolute+0x2a4>
					 default : break;
 8001346:	e01a      	b.n	800137e <MotorRotateAbsolute+0x2a6>
					 case ANGLE_DOWN: MotorState[motor_index -1] = LOW;
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	3b01      	subs	r3, #1
 800134c:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <MotorRotateAbsolute+0x2cc>)
 800134e:	2100      	movs	r1, #0
 8001350:	54d1      	strb	r1, [r2, r3]
									  MotorTargetAnglePrevious[motor_index -1] = MotorTargetAngle[motor_index -1];
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	1e5a      	subs	r2, r3, #1
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	3b01      	subs	r3, #1
 800135a:	490c      	ldr	r1, [pc, #48]	; (800138c <MotorRotateAbsolute+0x2b4>)
 800135c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001360:	490d      	ldr	r1, [pc, #52]	; (8001398 <MotorRotateAbsolute+0x2c0>)
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
									  MotorDirection[motor_index -1] = ANGLE_HOLD;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	3b01      	subs	r3, #1
 800136a:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <MotorRotateAbsolute+0x2c8>)
 800136c:	2100      	movs	r1, #0
 800136e:	54d1      	strb	r1, [r2, r3]
									  MotorTagetAngleSet[motor_index -1] = FALSE;
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	3b01      	subs	r3, #1
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <MotorRotateAbsolute+0x2b0>)
 8001376:	2100      	movs	r1, #0
 8001378:	54d1      	strb	r1, [r2, r3]
									  break;
 800137a:	e000      	b.n	800137e <MotorRotateAbsolute+0x2a6>
					 case ANGLE_UP:	break;
 800137c:	bf00      	nop
				break;
 800137e:	bf00      	nop

	}

}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	20000074 	.word	0x20000074
 800138c:	20000004 	.word	0x20000004
 8001390:	3e666666 	.word	0x3e666666
 8001394:	20000094 	.word	0x20000094
 8001398:	2000005c 	.word	0x2000005c
 800139c:	200000da 	.word	0x200000da
 80013a0:	200000c4 	.word	0x200000c4
 80013a4:	2000001c 	.word	0x2000001c
 80013a8:	200000cc 	.word	0x200000cc
 80013ac:	200000ac 	.word	0x200000ac
 80013b0:	2000007c 	.word	0x2000007c
 80013b4:	3f666666 	.word	0x3f666666

080013b8 <MotorActuate>:
 * Version No.		 Date			Author 					Email				Description
 * 	  1.0		  20-03-2021	Ayushman Choudhuri	 ayushc205@gmail.com
*/

void MotorActuate()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
	for(uint8_t motor_index = 1 ; motor_index <=6 ; motor_index ++)
 80013be:	2301      	movs	r3, #1
 80013c0:	71fb      	strb	r3, [r7, #7]
 80013c2:	e006      	b.n	80013d2 <MotorActuate+0x1a>
	{
		MotorRotateAbsolute(motor_index);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fe86 	bl	80010d8 <MotorRotateAbsolute>
	for(uint8_t motor_index = 1 ; motor_index <=6 ; motor_index ++)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	3301      	adds	r3, #1
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b06      	cmp	r3, #6
 80013d6:	d9f5      	bls.n	80013c4 <MotorActuate+0xc>
	}
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <MotorActuateTest>:

/*........................................................Test Function.....................................*/

void MotorActuateTest()
{	/*Test Variables*/
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b09a      	sub	sp, #104	; 0x68
 80013e4:	af00      	add	r7, sp, #0

	uint32_t test_set_changeover_time = 2000;
 80013e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013ea:	663b      	str	r3, [r7, #96]	; 0x60

	float32_t motor_test_angle_set[4][6] = {{0,0,0,0,0,0},
 80013ec:	4a20      	ldr	r2, [pc, #128]	; (8001470 <MotorActuateTest+0x90>)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4611      	mov	r1, r2
 80013f2:	2260      	movs	r2, #96	; 0x60
 80013f4:	4618      	mov	r0, r3
 80013f6:	f004 f9c7 	bl	8005788 <memcpy>
											{180,180,180,180,180,180},
											{90,90,90,90,90,90},
											{360,360,360,360,360,360}};
	TestCounter ++;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <MotorActuateTest+0x94>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	3301      	adds	r3, #1
 8001400:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <MotorActuateTest+0x94>)
 8001402:	6013      	str	r3, [r2, #0]

	if (TestCounter >= test_set_changeover_time)
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <MotorActuateTest+0x94>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800140a:	429a      	cmp	r2, r3
 800140c:	d829      	bhi.n	8001462 <MotorActuateTest+0x82>
	{
		for (uint32_t test_angle = 0 ; test_angle <= 5 ; test_angle ++)
 800140e:	2300      	movs	r3, #0
 8001410:	667b      	str	r3, [r7, #100]	; 0x64
 8001412:	e014      	b.n	800143e <MotorActuateTest+0x5e>
		{
			MotorTargetAngle[test_angle] = motor_test_angle_set[TestSetIndex][test_angle];
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MotorActuateTest+0x98>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800142a:	4413      	add	r3, r2
 800142c:	f853 2c68 	ldr.w	r2, [r3, #-104]
 8001430:	4912      	ldr	r1, [pc, #72]	; (800147c <MotorActuateTest+0x9c>)
 8001432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (uint32_t test_angle = 0 ; test_angle <= 5 ; test_angle ++)
 8001438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800143a:	3301      	adds	r3, #1
 800143c:	667b      	str	r3, [r7, #100]	; 0x64
 800143e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001440:	2b05      	cmp	r3, #5
 8001442:	d9e7      	bls.n	8001414 <MotorActuateTest+0x34>
		}

		TestSetIndex ++ ;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MotorActuateTest+0x98>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <MotorActuateTest+0x98>)
 800144c:	6013      	str	r3, [r2, #0]

		if(TestSetIndex >= 3)
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <MotorActuateTest+0x98>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d902      	bls.n	800145c <MotorActuateTest+0x7c>
		{
			TestSetIndex = 0;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MotorActuateTest+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
		}

		TestCounter = 0;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <MotorActuateTest+0x94>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
	}

   MotorActuate();
 8001462:	f7ff ffa9 	bl	80013b8 <MotorActuate>
}
 8001466:	bf00      	nop
 8001468:	3768      	adds	r7, #104	; 0x68
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08005804 	.word	0x08005804
 8001474:	200000dc 	.word	0x200000dc
 8001478:	200000e0 	.word	0x200000e0
 800147c:	20000004 	.word	0x20000004

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_MspInit+0x5c>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <HAL_MspInit+0x5c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_MspInit+0x5c>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_MspInit+0x5c>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_MspInit+0x5c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_MspInit+0x5c>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_MspInit+0x60>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_MspInit+0x60>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	MotorActuateTest();
 800152e:	f7ff ff57 	bl	80013e0 <MotorActuateTest>


	/*Hardware level control of motor direction pins and motor timers*/

	for(uint8_t motor_index = 1 ; motor_index <=6 ; motor_index ++ )
 8001532:	2301      	movs	r3, #1
 8001534:	71fb      	strb	r3, [r7, #7]
 8001536:	e196      	b.n	8001866 <SysTick_Handler+0x33e>
	{
		switch(motor_index)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	3b01      	subs	r3, #1
 800153c:	2b05      	cmp	r3, #5
 800153e:	f200 818f 	bhi.w	8001860 <SysTick_Handler+0x338>
 8001542:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <SysTick_Handler+0x20>)
 8001544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001548:	08001561 	.word	0x08001561
 800154c:	080015dd 	.word	0x080015dd
 8001550:	08001659 	.word	0x08001659
 8001554:	080016d1 	.word	0x080016d1
 8001558:	0800174d 	.word	0x0800174d
 800155c:	080017c9 	.word	0x080017c9
		{
			case 1: switch(MotorState[motor_index -1])
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	3b01      	subs	r3, #1
 8001564:	4aa6      	ldr	r2, [pc, #664]	; (8001800 <SysTick_Handler+0x2d8>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d032      	beq.n	80015d2 <SysTick_Handler+0xaa>
 800156c:	2b01      	cmp	r3, #1
 800156e:	d000      	beq.n	8001572 <SysTick_Handler+0x4a>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
								   break;

						default:  break;
 8001570:	e034      	b.n	80015dc <SysTick_Handler+0xb4>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	3b01      	subs	r3, #1
 8001576:	4aa3      	ldr	r2, [pc, #652]	; (8001804 <SysTick_Handler+0x2dc>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <SysTick_Handler+0x5c>
 800157e:	2b01      	cmp	r3, #1
 8001580:	d00a      	beq.n	8001598 <SysTick_Handler+0x70>
									   default: break ;
 8001582:	e00a      	b.n	800159a <SysTick_Handler+0x72>
									   case LOW: HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001584:	210c      	movs	r1, #12
 8001586:	48a0      	ldr	r0, [pc, #640]	; (8001808 <SysTick_Handler+0x2e0>)
 8001588:	f003 f954 	bl	8004834 <HAL_TIM_PWM_Start>
									   	   	   	 MotorHighStateSetFlag[motor_index -1] = HIGH;
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	3b01      	subs	r3, #1
 8001590:	4a9c      	ldr	r2, [pc, #624]	; (8001804 <SysTick_Handler+0x2dc>)
 8001592:	2101      	movs	r1, #1
 8001594:	54d1      	strb	r1, [r2, r3]
									   			 break;
 8001596:	e000      	b.n	800159a <SysTick_Handler+0x72>
									   case HIGH: break;
 8001598:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	3b01      	subs	r3, #1
 800159e:	4a9b      	ldr	r2, [pc, #620]	; (800180c <SysTick_Handler+0x2e4>)
 80015a0:	56d3      	ldrsb	r3, [r2, r3]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d013      	beq.n	80015ce <SysTick_Handler+0xa6>
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d003      	beq.n	80015b2 <SysTick_Handler+0x8a>
 80015aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ae:	d007      	beq.n	80015c0 <SysTick_Handler+0x98>
										default : break;
 80015b0:	e00e      	b.n	80015d0 <SysTick_Handler+0xa8>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b8:	4895      	ldr	r0, [pc, #596]	; (8001810 <SysTick_Handler+0x2e8>)
 80015ba:	f001 f917 	bl	80027ec <HAL_GPIO_WritePin>
													    break;
 80015be:	e007      	b.n	80015d0 <SysTick_Handler+0xa8>
										case ANGLE_DOWN:HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c6:	4892      	ldr	r0, [pc, #584]	; (8001810 <SysTick_Handler+0x2e8>)
 80015c8:	f001 f910 	bl	80027ec <HAL_GPIO_WritePin>
														break;
 80015cc:	e000      	b.n	80015d0 <SysTick_Handler+0xa8>
										case ANGLE_HOLD:break;
 80015ce:	bf00      	nop
									break;
 80015d0:	e004      	b.n	80015dc <SysTick_Handler+0xb4>
						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80015d2:	210c      	movs	r1, #12
 80015d4:	488c      	ldr	r0, [pc, #560]	; (8001808 <SysTick_Handler+0x2e0>)
 80015d6:	f003 f9cf 	bl	8004978 <HAL_TIM_PWM_Stop>
								   break;
 80015da:	bf00      	nop
					}

			case 2: switch(MotorState[motor_index -1])
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	3b01      	subs	r3, #1
 80015e0:	4a87      	ldr	r2, [pc, #540]	; (8001800 <SysTick_Handler+0x2d8>)
 80015e2:	5cd3      	ldrb	r3, [r2, r3]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d032      	beq.n	800164e <SysTick_Handler+0x126>
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d000      	beq.n	80015ee <SysTick_Handler+0xc6>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
								   break;

						default: break;
 80015ec:	e034      	b.n	8001658 <SysTick_Handler+0x130>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	4a84      	ldr	r2, [pc, #528]	; (8001804 <SysTick_Handler+0x2dc>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <SysTick_Handler+0xd8>
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d00a      	beq.n	8001614 <SysTick_Handler+0xec>
									   default: break ;
 80015fe:	e00a      	b.n	8001616 <SysTick_Handler+0xee>
									   case LOW: HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001600:	2108      	movs	r1, #8
 8001602:	4881      	ldr	r0, [pc, #516]	; (8001808 <SysTick_Handler+0x2e0>)
 8001604:	f003 f916 	bl	8004834 <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	3b01      	subs	r3, #1
 800160c:	4a7d      	ldr	r2, [pc, #500]	; (8001804 <SysTick_Handler+0x2dc>)
 800160e:	2101      	movs	r1, #1
 8001610:	54d1      	strb	r1, [r2, r3]
									   			 break;
 8001612:	e000      	b.n	8001616 <SysTick_Handler+0xee>
									   case HIGH: break;
 8001614:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	3b01      	subs	r3, #1
 800161a:	4a7c      	ldr	r2, [pc, #496]	; (800180c <SysTick_Handler+0x2e4>)
 800161c:	56d3      	ldrsb	r3, [r2, r3]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d013      	beq.n	800164a <SysTick_Handler+0x122>
 8001622:	2b01      	cmp	r3, #1
 8001624:	d003      	beq.n	800162e <SysTick_Handler+0x106>
 8001626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162a:	d007      	beq.n	800163c <SysTick_Handler+0x114>
										default : break;
 800162c:	e00e      	b.n	800164c <SysTick_Handler+0x124>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001634:	4876      	ldr	r0, [pc, #472]	; (8001810 <SysTick_Handler+0x2e8>)
 8001636:	f001 f8d9 	bl	80027ec <HAL_GPIO_WritePin>
														break;
 800163a:	e007      	b.n	800164c <SysTick_Handler+0x124>
										case ANGLE_DOWN: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001642:	4873      	ldr	r0, [pc, #460]	; (8001810 <SysTick_Handler+0x2e8>)
 8001644:	f001 f8d2 	bl	80027ec <HAL_GPIO_WritePin>
														break;
 8001648:	e000      	b.n	800164c <SysTick_Handler+0x124>
										case ANGLE_HOLD:break;
 800164a:	bf00      	nop
									break;
 800164c:	e004      	b.n	8001658 <SysTick_Handler+0x130>
						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800164e:	2108      	movs	r1, #8
 8001650:	486d      	ldr	r0, [pc, #436]	; (8001808 <SysTick_Handler+0x2e0>)
 8001652:	f003 f991 	bl	8004978 <HAL_TIM_PWM_Stop>
								   break;
 8001656:	bf00      	nop
					}

			case 3: switch(MotorState[motor_index -1])
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	3b01      	subs	r3, #1
 800165c:	4a68      	ldr	r2, [pc, #416]	; (8001800 <SysTick_Handler+0x2d8>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d030      	beq.n	80016c6 <SysTick_Handler+0x19e>
 8001664:	2b01      	cmp	r3, #1
 8001666:	d000      	beq.n	800166a <SysTick_Handler+0x142>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
								   break;

						default: break;
 8001668:	e032      	b.n	80016d0 <SysTick_Handler+0x1a8>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	3b01      	subs	r3, #1
 800166e:	4a65      	ldr	r2, [pc, #404]	; (8001804 <SysTick_Handler+0x2dc>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <SysTick_Handler+0x154>
 8001676:	2b01      	cmp	r3, #1
 8001678:	d00a      	beq.n	8001690 <SysTick_Handler+0x168>
									   default: break ;
 800167a:	e00a      	b.n	8001692 <SysTick_Handler+0x16a>
									   case LOW: HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800167c:	2100      	movs	r1, #0
 800167e:	4862      	ldr	r0, [pc, #392]	; (8001808 <SysTick_Handler+0x2e0>)
 8001680:	f003 f8d8 	bl	8004834 <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	3b01      	subs	r3, #1
 8001688:	4a5e      	ldr	r2, [pc, #376]	; (8001804 <SysTick_Handler+0x2dc>)
 800168a:	2101      	movs	r1, #1
 800168c:	54d1      	strb	r1, [r2, r3]
									   			 break;
 800168e:	e000      	b.n	8001692 <SysTick_Handler+0x16a>
									   case HIGH: break;
 8001690:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	3b01      	subs	r3, #1
 8001696:	4a5d      	ldr	r2, [pc, #372]	; (800180c <SysTick_Handler+0x2e4>)
 8001698:	56d3      	ldrsb	r3, [r2, r3]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d011      	beq.n	80016c2 <SysTick_Handler+0x19a>
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d003      	beq.n	80016aa <SysTick_Handler+0x182>
 80016a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a6:	d006      	beq.n	80016b6 <SysTick_Handler+0x18e>
										default : break;
 80016a8:	e00c      	b.n	80016c4 <SysTick_Handler+0x19c>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2120      	movs	r1, #32
 80016ae:	4859      	ldr	r0, [pc, #356]	; (8001814 <SysTick_Handler+0x2ec>)
 80016b0:	f001 f89c 	bl	80027ec <HAL_GPIO_WritePin>
														break;
 80016b4:	e006      	b.n	80016c4 <SysTick_Handler+0x19c>
										case ANGLE_DOWN:HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2120      	movs	r1, #32
 80016ba:	4856      	ldr	r0, [pc, #344]	; (8001814 <SysTick_Handler+0x2ec>)
 80016bc:	f001 f896 	bl	80027ec <HAL_GPIO_WritePin>
														break;
 80016c0:	e000      	b.n	80016c4 <SysTick_Handler+0x19c>
										case ANGLE_HOLD:break;
 80016c2:	bf00      	nop
									break;
 80016c4:	e004      	b.n	80016d0 <SysTick_Handler+0x1a8>
						case LOW : HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80016c6:	2100      	movs	r1, #0
 80016c8:	484f      	ldr	r0, [pc, #316]	; (8001808 <SysTick_Handler+0x2e0>)
 80016ca:	f003 f955 	bl	8004978 <HAL_TIM_PWM_Stop>
								   break;
 80016ce:	bf00      	nop
					}

			case 4: switch(MotorState[motor_index -1])
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	4a4a      	ldr	r2, [pc, #296]	; (8001800 <SysTick_Handler+0x2d8>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d032      	beq.n	8001742 <SysTick_Handler+0x21a>
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d000      	beq.n	80016e2 <SysTick_Handler+0x1ba>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
								   break;

						default: break;
 80016e0:	e034      	b.n	800174c <SysTick_Handler+0x224>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	4a47      	ldr	r2, [pc, #284]	; (8001804 <SysTick_Handler+0x2dc>)
 80016e8:	5cd3      	ldrb	r3, [r2, r3]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <SysTick_Handler+0x1cc>
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d00a      	beq.n	8001708 <SysTick_Handler+0x1e0>
									   default: break ;
 80016f2:	e00a      	b.n	800170a <SysTick_Handler+0x1e2>
									   case LOW: HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80016f4:	2108      	movs	r1, #8
 80016f6:	4848      	ldr	r0, [pc, #288]	; (8001818 <SysTick_Handler+0x2f0>)
 80016f8:	f003 f89c 	bl	8004834 <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	3b01      	subs	r3, #1
 8001700:	4a40      	ldr	r2, [pc, #256]	; (8001804 <SysTick_Handler+0x2dc>)
 8001702:	2101      	movs	r1, #1
 8001704:	54d1      	strb	r1, [r2, r3]
									   			 break;
 8001706:	e000      	b.n	800170a <SysTick_Handler+0x1e2>
									   case HIGH: break;
 8001708:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	3b01      	subs	r3, #1
 800170e:	4a3f      	ldr	r2, [pc, #252]	; (800180c <SysTick_Handler+0x2e4>)
 8001710:	56d3      	ldrsb	r3, [r2, r3]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d013      	beq.n	800173e <SysTick_Handler+0x216>
 8001716:	2b01      	cmp	r3, #1
 8001718:	d003      	beq.n	8001722 <SysTick_Handler+0x1fa>
 800171a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171e:	d007      	beq.n	8001730 <SysTick_Handler+0x208>
										default : break;
 8001720:	e00e      	b.n	8001740 <SysTick_Handler+0x218>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001728:	483a      	ldr	r0, [pc, #232]	; (8001814 <SysTick_Handler+0x2ec>)
 800172a:	f001 f85f 	bl	80027ec <HAL_GPIO_WritePin>
														break;
 800172e:	e007      	b.n	8001740 <SysTick_Handler+0x218>
										case ANGLE_DOWN: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001736:	4837      	ldr	r0, [pc, #220]	; (8001814 <SysTick_Handler+0x2ec>)
 8001738:	f001 f858 	bl	80027ec <HAL_GPIO_WritePin>
														break;
 800173c:	e000      	b.n	8001740 <SysTick_Handler+0x218>
										case ANGLE_HOLD:break;
 800173e:	bf00      	nop
									break;
 8001740:	e004      	b.n	800174c <SysTick_Handler+0x224>
						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001742:	2108      	movs	r1, #8
 8001744:	4834      	ldr	r0, [pc, #208]	; (8001818 <SysTick_Handler+0x2f0>)
 8001746:	f003 f917 	bl	8004978 <HAL_TIM_PWM_Stop>
								   break;
 800174a:	bf00      	nop
					}

			case 5: switch(MotorState[motor_index -1])
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	3b01      	subs	r3, #1
 8001750:	4a2b      	ldr	r2, [pc, #172]	; (8001800 <SysTick_Handler+0x2d8>)
 8001752:	5cd3      	ldrb	r3, [r2, r3]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d032      	beq.n	80017be <SysTick_Handler+0x296>
 8001758:	2b01      	cmp	r3, #1
 800175a:	d000      	beq.n	800175e <SysTick_Handler+0x236>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
								   break;

						default: break;
 800175c:	e034      	b.n	80017c8 <SysTick_Handler+0x2a0>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	3b01      	subs	r3, #1
 8001762:	4a28      	ldr	r2, [pc, #160]	; (8001804 <SysTick_Handler+0x2dc>)
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <SysTick_Handler+0x248>
 800176a:	2b01      	cmp	r3, #1
 800176c:	d00a      	beq.n	8001784 <SysTick_Handler+0x25c>
									   default: break ;
 800176e:	e00a      	b.n	8001786 <SysTick_Handler+0x25e>
									   case LOW: HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001770:	2104      	movs	r1, #4
 8001772:	4829      	ldr	r0, [pc, #164]	; (8001818 <SysTick_Handler+0x2f0>)
 8001774:	f003 f85e 	bl	8004834 <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	3b01      	subs	r3, #1
 800177c:	4a21      	ldr	r2, [pc, #132]	; (8001804 <SysTick_Handler+0x2dc>)
 800177e:	2101      	movs	r1, #1
 8001780:	54d1      	strb	r1, [r2, r3]
									   			 break;
 8001782:	e000      	b.n	8001786 <SysTick_Handler+0x25e>
									   case HIGH: break;
 8001784:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	3b01      	subs	r3, #1
 800178a:	4a20      	ldr	r2, [pc, #128]	; (800180c <SysTick_Handler+0x2e4>)
 800178c:	56d3      	ldrsb	r3, [r2, r3]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d013      	beq.n	80017ba <SysTick_Handler+0x292>
 8001792:	2b01      	cmp	r3, #1
 8001794:	d003      	beq.n	800179e <SysTick_Handler+0x276>
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	d007      	beq.n	80017ac <SysTick_Handler+0x284>
										default : break;
 800179c:	e00e      	b.n	80017bc <SysTick_Handler+0x294>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a4:	481b      	ldr	r0, [pc, #108]	; (8001814 <SysTick_Handler+0x2ec>)
 80017a6:	f001 f821 	bl	80027ec <HAL_GPIO_WritePin>
														break;
 80017aa:	e007      	b.n	80017bc <SysTick_Handler+0x294>
										case ANGLE_DOWN: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b2:	4818      	ldr	r0, [pc, #96]	; (8001814 <SysTick_Handler+0x2ec>)
 80017b4:	f001 f81a 	bl	80027ec <HAL_GPIO_WritePin>
														break;
 80017b8:	e000      	b.n	80017bc <SysTick_Handler+0x294>
										case ANGLE_HOLD:break;
 80017ba:	bf00      	nop
									break;
 80017bc:	e004      	b.n	80017c8 <SysTick_Handler+0x2a0>
						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80017be:	2104      	movs	r1, #4
 80017c0:	4815      	ldr	r0, [pc, #84]	; (8001818 <SysTick_Handler+0x2f0>)
 80017c2:	f003 f8d9 	bl	8004978 <HAL_TIM_PWM_Stop>
								   break;
 80017c6:	bf00      	nop
					}

			case 6: switch(MotorState[motor_index -1])
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <SysTick_Handler+0x2d8>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d040      	beq.n	8001856 <SysTick_Handler+0x32e>
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d000      	beq.n	80017da <SysTick_Handler+0x2b2>
									break;

						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
								   break;

						default: break;
 80017d8:	e042      	b.n	8001860 <SysTick_Handler+0x338>
						case HIGH: switch(MotorHighStateSetFlag[motor_index -1])
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	3b01      	subs	r3, #1
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <SysTick_Handler+0x2dc>)
 80017e0:	5cd3      	ldrb	r3, [r2, r3]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <SysTick_Handler+0x2c4>
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d018      	beq.n	800181c <SysTick_Handler+0x2f4>
									   default: break ;
 80017ea:	e018      	b.n	800181e <SysTick_Handler+0x2f6>
									   case LOW: HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017ec:	2100      	movs	r1, #0
 80017ee:	480a      	ldr	r0, [pc, #40]	; (8001818 <SysTick_Handler+0x2f0>)
 80017f0:	f003 f820 	bl	8004834 <HAL_TIM_PWM_Start>
									   			 MotorHighStateSetFlag[motor_index -1] = HIGH;
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	4a02      	ldr	r2, [pc, #8]	; (8001804 <SysTick_Handler+0x2dc>)
 80017fa:	2101      	movs	r1, #1
 80017fc:	54d1      	strb	r1, [r2, r3]
									   			 break;
 80017fe:	e00e      	b.n	800181e <SysTick_Handler+0x2f6>
 8001800:	2000001c 	.word	0x2000001c
 8001804:	200000cc 	.word	0x200000cc
 8001808:	2000016c 	.word	0x2000016c
 800180c:	200000c4 	.word	0x200000c4
 8001810:	40010c00 	.word	0x40010c00
 8001814:	40010800 	.word	0x40010800
 8001818:	200001b4 	.word	0x200001b4
									   case HIGH: break;
 800181c:	bf00      	nop
									switch(MotorDirection[motor_index-1])
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	3b01      	subs	r3, #1
 8001822:	4a16      	ldr	r2, [pc, #88]	; (800187c <SysTick_Handler+0x354>)
 8001824:	56d3      	ldrsb	r3, [r2, r3]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d013      	beq.n	8001852 <SysTick_Handler+0x32a>
 800182a:	2b01      	cmp	r3, #1
 800182c:	d003      	beq.n	8001836 <SysTick_Handler+0x30e>
 800182e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001832:	d007      	beq.n	8001844 <SysTick_Handler+0x31c>
										default : break;
 8001834:	e00e      	b.n	8001854 <SysTick_Handler+0x32c>
										case ANGLE_UP:  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800183c:	4810      	ldr	r0, [pc, #64]	; (8001880 <SysTick_Handler+0x358>)
 800183e:	f000 ffd5 	bl	80027ec <HAL_GPIO_WritePin>
														break;
 8001842:	e007      	b.n	8001854 <SysTick_Handler+0x32c>
										case ANGLE_DOWN: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <SysTick_Handler+0x358>)
 800184c:	f000 ffce 	bl	80027ec <HAL_GPIO_WritePin>
														break;
 8001850:	e000      	b.n	8001854 <SysTick_Handler+0x32c>
										case ANGLE_HOLD:break;
 8001852:	bf00      	nop
									break;
 8001854:	e004      	b.n	8001860 <SysTick_Handler+0x338>
						case LOW : HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001856:	2100      	movs	r1, #0
 8001858:	480a      	ldr	r0, [pc, #40]	; (8001884 <SysTick_Handler+0x35c>)
 800185a:	f003 f88d 	bl	8004978 <HAL_TIM_PWM_Stop>
								   break;
 800185e:	bf00      	nop
	for(uint8_t motor_index = 1 ; motor_index <=6 ; motor_index ++ )
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	3301      	adds	r3, #1
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b06      	cmp	r3, #6
 800186a:	f67f ae65 	bls.w	8001538 <SysTick_Handler+0x10>
//	}



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186e:	f000 fb0d 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200000c4 	.word	0x200000c4
 8001880:	40010c00 	.word	0x40010c00
 8001884:	200001b4 	.word	0x200001b4

08001888 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800188c:	2002      	movs	r0, #2
 800188e:	f000 ffc5 	bl	800281c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}

08001896 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800189a:	2004      	movs	r0, #4
 800189c:	f000 ffbe 	bl	800281c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80018a8:	2010      	movs	r0, #16
 80018aa:	f000 ffb7 	bl	800281c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80018b6:	2080      	movs	r0, #128	; 0x80
 80018b8:	f000 ffb0 	bl	800281c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80018c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018c8:	f000 ffa8 	bl	800281c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018d0:	f000 ffa4 	bl	800281c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b096      	sub	sp, #88	; 0x58
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]
 8001912:	615a      	str	r2, [r3, #20]
 8001914:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2220      	movs	r2, #32
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f003 ff3e 	bl	800579e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001922:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <MX_TIM1_Init+0x168>)
 8001924:	4a4a      	ldr	r2, [pc, #296]	; (8001a50 <MX_TIM1_Init+0x16c>)
 8001926:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720-1;
 8001928:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <MX_TIM1_Init+0x168>)
 800192a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800192e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001930:	4b46      	ldr	r3, [pc, #280]	; (8001a4c <MX_TIM1_Init+0x168>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25-1;
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <MX_TIM1_Init+0x168>)
 8001938:	2218      	movs	r2, #24
 800193a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193c:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <MX_TIM1_Init+0x168>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001942:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <MX_TIM1_Init+0x168>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001948:	4b40      	ldr	r3, [pc, #256]	; (8001a4c <MX_TIM1_Init+0x168>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800194e:	483f      	ldr	r0, [pc, #252]	; (8001a4c <MX_TIM1_Init+0x168>)
 8001950:	f002 fec8 	bl	80046e4 <HAL_TIM_Base_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800195a:	f7ff f9dc 	bl	8000d16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001964:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001968:	4619      	mov	r1, r3
 800196a:	4838      	ldr	r0, [pc, #224]	; (8001a4c <MX_TIM1_Init+0x168>)
 800196c:	f003 f926 	bl	8004bbc <HAL_TIM_ConfigClockSource>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001976:	f7ff f9ce 	bl	8000d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800197a:	4834      	ldr	r0, [pc, #208]	; (8001a4c <MX_TIM1_Init+0x168>)
 800197c:	f002 ff01 	bl	8004782 <HAL_TIM_PWM_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001986:	f7ff f9c6 	bl	8000d16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001992:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001996:	4619      	mov	r1, r3
 8001998:	482c      	ldr	r0, [pc, #176]	; (8001a4c <MX_TIM1_Init+0x168>)
 800199a:	f003 fc6b 	bl	8005274 <HAL_TIMEx_MasterConfigSynchronization>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019a4:	f7ff f9b7 	bl	8000d16 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a8:	2360      	movs	r3, #96	; 0x60
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 18;
 80019ac:	2312      	movs	r3, #18
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c8:	2200      	movs	r2, #0
 80019ca:	4619      	mov	r1, r3
 80019cc:	481f      	ldr	r0, [pc, #124]	; (8001a4c <MX_TIM1_Init+0x168>)
 80019ce:	f003 f837 	bl	8004a40 <HAL_TIM_PWM_ConfigChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019d8:	f7ff f99d 	bl	8000d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e0:	2204      	movs	r2, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4819      	ldr	r0, [pc, #100]	; (8001a4c <MX_TIM1_Init+0x168>)
 80019e6:	f003 f82b 	bl	8004a40 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80019f0:	f7ff f991 	bl	8000d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	2208      	movs	r2, #8
 80019fa:	4619      	mov	r1, r3
 80019fc:	4813      	ldr	r0, [pc, #76]	; (8001a4c <MX_TIM1_Init+0x168>)
 80019fe:	f003 f81f 	bl	8004a40 <HAL_TIM_PWM_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001a08:	f7ff f985 	bl	8000d16 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <MX_TIM1_Init+0x168>)
 8001a30:	f003 fc7e 	bl	8005330 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001a3a:	f7ff f96c 	bl	8000d16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a3e:	4803      	ldr	r0, [pc, #12]	; (8001a4c <MX_TIM1_Init+0x168>)
 8001a40:	f000 f8c6 	bl	8001bd0 <HAL_TIM_MspPostInit>

}
 8001a44:	bf00      	nop
 8001a46:	3758      	adds	r7, #88	; 0x58
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200001b4 	.word	0x200001b4
 8001a50:	40012c00 	.word	0x40012c00

08001a54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	; 0x38
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]
 8001a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a84:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001a86:	4a38      	ldr	r2, [pc, #224]	; (8001b68 <MX_TIM3_Init+0x114>)
 8001a88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8001a8a:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001a8c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001a90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25-1;
 8001a98:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001a9a:	2218      	movs	r2, #24
 8001a9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aaa:	482e      	ldr	r0, [pc, #184]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001aac:	f002 fe1a 	bl	80046e4 <HAL_TIM_Base_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ab6:	f7ff f92e 	bl	8000d16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4827      	ldr	r0, [pc, #156]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001ac8:	f003 f878 	bl	8004bbc <HAL_TIM_ConfigClockSource>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001ad2:	f7ff f920 	bl	8000d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ad6:	4823      	ldr	r0, [pc, #140]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001ad8:	f002 fe53 	bl	8004782 <HAL_TIM_PWM_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001ae2:	f7ff f918 	bl	8000d16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aee:	f107 0320 	add.w	r3, r7, #32
 8001af2:	4619      	mov	r1, r3
 8001af4:	481b      	ldr	r0, [pc, #108]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001af6:	f003 fbbd 	bl	8005274 <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b00:	f7ff f909 	bl	8000d16 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b04:	2360      	movs	r3, #96	; 0x60
 8001b06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 18;
 8001b08:	2312      	movs	r3, #18
 8001b0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	2200      	movs	r2, #0
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4812      	ldr	r0, [pc, #72]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001b1c:	f002 ff90 	bl	8004a40 <HAL_TIM_PWM_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b26:	f7ff f8f6 	bl	8000d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001b32:	f002 ff85 	bl	8004a40 <HAL_TIM_PWM_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001b3c:	f7ff f8eb 	bl	8000d16 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	220c      	movs	r2, #12
 8001b44:	4619      	mov	r1, r3
 8001b46:	4807      	ldr	r0, [pc, #28]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001b48:	f002 ff7a 	bl	8004a40 <HAL_TIM_PWM_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001b52:	f7ff f8e0 	bl	8000d16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b56:	4803      	ldr	r0, [pc, #12]	; (8001b64 <MX_TIM3_Init+0x110>)
 8001b58:	f000 f83a 	bl	8001bd0 <HAL_TIM_MspPostInit>

}
 8001b5c:	bf00      	nop
 8001b5e:	3738      	adds	r7, #56	; 0x38
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2000016c 	.word	0x2000016c
 8001b68:	40000400 	.word	0x40000400

08001b6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <HAL_TIM_Base_MspInit+0x58>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d10c      	bne.n	8001b98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001b84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b88:	6193      	str	r3, [r2, #24]
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b96:	e010      	b.n	8001bba <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <HAL_TIM_Base_MspInit+0x60>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10b      	bne.n	8001bba <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	40012c00 	.word	0x40012c00
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40000400 	.word	0x40000400

08001bd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <HAL_TIM_MspPostInit+0xc8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d119      	bne.n	8001c24 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_TIM_MspPostInit+0xcc>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a29      	ldr	r2, [pc, #164]	; (8001c9c <HAL_TIM_MspPostInit+0xcc>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_TIM_MspPostInit+0xcc>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_6_STEP_Pin|MOTOR_5_STEP_Pin|MOTOR_4_STEP_Pin;
 8001c08:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2302      	movs	r3, #2
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 0318 	add.w	r3, r7, #24
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4820      	ldr	r0, [pc, #128]	; (8001ca0 <HAL_TIM_MspPostInit+0xd0>)
 8001c1e:	f000 fc8b 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c22:	e034      	b.n	8001c8e <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_TIM_MspPostInit+0xd4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d12f      	bne.n	8001c8e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_TIM_MspPostInit+0xcc>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	4a1a      	ldr	r2, [pc, #104]	; (8001c9c <HAL_TIM_MspPostInit+0xcc>)
 8001c34:	f043 0304 	orr.w	r3, r3, #4
 8001c38:	6193      	str	r3, [r2, #24]
 8001c3a:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_TIM_MspPostInit+0xcc>)
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_TIM_MspPostInit+0xcc>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <HAL_TIM_MspPostInit+0xcc>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6193      	str	r3, [r2, #24]
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_TIM_MspPostInit+0xcc>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_3_STEP_Pin;
 8001c5e:	2340      	movs	r3, #64	; 0x40
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2302      	movs	r3, #2
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_3_STEP_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	f107 0318 	add.w	r3, r7, #24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480b      	ldr	r0, [pc, #44]	; (8001ca0 <HAL_TIM_MspPostInit+0xd0>)
 8001c72:	f000 fc61 	bl	8002538 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_2_STEP_Pin|MOTOR_1_STEP_Pin;
 8001c76:	2303      	movs	r3, #3
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	4619      	mov	r1, r3
 8001c88:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <HAL_TIM_MspPostInit+0xd8>)
 8001c8a:	f000 fc55 	bl	8002538 <HAL_GPIO_Init>
}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40010c00 	.word	0x40010c00

08001cac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <MX_USART1_UART_Init+0x50>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001ce4:	f003 fb75 	bl	80053d2 <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cee:	f7ff f812 	bl	8000d16 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200001fc 	.word	0x200001fc
 8001cfc:	40013800 	.word	0x40013800

08001d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a22      	ldr	r2, [pc, #136]	; (8001da4 <HAL_UART_MspInit+0xa4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d13d      	bne.n	8001d9c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d20:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <HAL_UART_MspInit+0xa8>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a20      	ldr	r2, [pc, #128]	; (8001da8 <HAL_UART_MspInit+0xa8>)
 8001d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_UART_MspInit+0xa8>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_UART_MspInit+0xa8>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a1a      	ldr	r2, [pc, #104]	; (8001da8 <HAL_UART_MspInit+0xa8>)
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_UART_MspInit+0xa8>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	4812      	ldr	r0, [pc, #72]	; (8001dac <HAL_UART_MspInit+0xac>)
 8001d64:	f000 fbe8 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480c      	ldr	r0, [pc, #48]	; (8001dac <HAL_UART_MspInit+0xac>)
 8001d7c:	f000 fbdc 	bl	8002538 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_UART_MspInit+0xb0>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
 8001d96:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <HAL_UART_MspInit+0xb0>)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40013800 	.word	0x40013800
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010c00 	.word	0x40010c00
 8001db0:	40010000 	.word	0x40010000

08001db4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001db4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001db6:	e003      	b.n	8001dc0 <LoopCopyDataInit>

08001db8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001dbc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dbe:	3104      	adds	r1, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001dc0:	480a      	ldr	r0, [pc, #40]	; (8001dec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001dc4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dc6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001dc8:	d3f6      	bcc.n	8001db8 <CopyDataInit>
  ldr r2, =_sbss
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001dcc:	e002      	b.n	8001dd4 <LoopFillZerobss>

08001dce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001dd0:	f842 3b04 	str.w	r3, [r2], #4

08001dd4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001dd6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001dd8:	d3f9      	bcc.n	8001dce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dda:	f7ff fd7d 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f003 fcaf 	bl	8005740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de2:	f7fe fe8d 	bl	8000b00 <main>
  bx lr
 8001de6:	4770      	bx	lr
  ldr r3, =_sidata
 8001de8:	08005898 	.word	0x08005898
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001df0:	20000030 	.word	0x20000030
  ldr r2, =_sbss
 8001df4:	20000030 	.word	0x20000030
  ldr r3, = _ebss
 8001df8:	20000240 	.word	0x20000240

08001dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC1_2_IRQHandler>
	...

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_Init+0x28>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_Init+0x28>)
 8001e0a:	f043 0310 	orr.w	r3, r3, #16
 8001e0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 fb4f 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 f808 	bl	8001e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1c:	f7ff fb30 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40022000 	.word	0x40022000

08001e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x54>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x58>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fb67 	bl	800251e <HAL_SYSTICK_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00e      	b.n	8001e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d80a      	bhi.n	8001e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f000 fb2f 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e6c:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <HAL_InitTick+0x5c>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000024 	.word	0x20000024
 8001e84:	2000002c 	.word	0x2000002c
 8001e88:	20000028 	.word	0x20000028

08001e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_IncTick+0x1c>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_IncTick+0x20>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a03      	ldr	r2, [pc, #12]	; (8001eac <HAL_IncTick+0x20>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	2000002c 	.word	0x2000002c
 8001eac:	2000023c 	.word	0x2000023c

08001eb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <HAL_GetTick+0x10>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	2000023c 	.word	0x2000023c

08001ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff fff0 	bl	8001eb0 <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d005      	beq.n	8001eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_Delay+0x40>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eea:	bf00      	nop
 8001eec:	f7ff ffe0 	bl	8001eb0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d8f7      	bhi.n	8001eec <HAL_Delay+0x28>
  {
  }
}
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000002c 	.word	0x2000002c

08001f08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0be      	b.n	80020a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d109      	bne.n	8001f4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe fc58 	bl	80007fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f9ab 	bl	80022a8 <ADC_ConversionStop_Disable>
 8001f52:	4603      	mov	r3, r0
 8001f54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 8099 	bne.w	8002096 <HAL_ADC_Init+0x18e>
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 8095 	bne.w	8002096 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f74:	f023 0302 	bic.w	r3, r3, #2
 8001f78:	f043 0202 	orr.w	r2, r3, #2
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7b1b      	ldrb	r3, [r3, #12]
 8001f8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa0:	d003      	beq.n	8001faa <HAL_ADC_Init+0xa2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d102      	bne.n	8001fb0 <HAL_ADC_Init+0xa8>
 8001faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fae:	e000      	b.n	8001fb2 <HAL_ADC_Init+0xaa>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7d1b      	ldrb	r3, [r3, #20]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d119      	bne.n	8001ff4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7b1b      	ldrb	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	035a      	lsls	r2, r3, #13
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	e00b      	b.n	8001ff4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	f043 0220 	orr.w	r2, r3, #32
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	430a      	orrs	r2, r1
 8002006:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <HAL_ADC_Init+0x1a8>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	68b9      	ldr	r1, [r7, #8]
 8002018:	430b      	orrs	r3, r1
 800201a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002024:	d003      	beq.n	800202e <HAL_ADC_Init+0x126>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d104      	bne.n	8002038 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	3b01      	subs	r3, #1
 8002034:	051b      	lsls	r3, r3, #20
 8002036:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	430a      	orrs	r2, r1
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_ADC_Init+0x1ac>)
 8002054:	4013      	ands	r3, r2
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	429a      	cmp	r2, r3
 800205a:	d10b      	bne.n	8002074 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	f023 0303 	bic.w	r3, r3, #3
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002072:	e018      	b.n	80020a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f023 0312 	bic.w	r3, r3, #18
 800207c:	f043 0210 	orr.w	r2, r3, #16
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002094:	e007      	b.n	80020a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	f043 0210 	orr.w	r2, r3, #16
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	ffe1f7fd 	.word	0xffe1f7fd
 80020b4:	ff1f0efe 	.word	0xff1f0efe

080020b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x20>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e0dc      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1da>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d81c      	bhi.n	8002122 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3b05      	subs	r3, #5
 80020fa:	221f      	movs	r2, #31
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	4019      	ands	r1, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	3b05      	subs	r3, #5
 8002114:	fa00 f203 	lsl.w	r2, r0, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	635a      	str	r2, [r3, #52]	; 0x34
 8002120:	e03c      	b.n	800219c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d81c      	bhi.n	8002164 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	3b23      	subs	r3, #35	; 0x23
 800213c:	221f      	movs	r2, #31
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	4019      	ands	r1, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b23      	subs	r3, #35	; 0x23
 8002156:	fa00 f203 	lsl.w	r2, r0, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
 8002162:	e01b      	b.n	800219c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3b41      	subs	r3, #65	; 0x41
 8002176:	221f      	movs	r2, #31
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	4019      	ands	r1, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	3b41      	subs	r3, #65	; 0x41
 8002190:	fa00 f203 	lsl.w	r2, r0, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b09      	cmp	r3, #9
 80021a2:	d91c      	bls.n	80021de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68d9      	ldr	r1, [r3, #12]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	3b1e      	subs	r3, #30
 80021b6:	2207      	movs	r2, #7
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	4019      	ands	r1, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6898      	ldr	r0, [r3, #8]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	3b1e      	subs	r3, #30
 80021d0:	fa00 f203 	lsl.w	r2, r0, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	e019      	b.n	8002212 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6919      	ldr	r1, [r3, #16]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	2207      	movs	r2, #7
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	4019      	ands	r1, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6898      	ldr	r0, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	fa00 f203 	lsl.w	r2, r0, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b10      	cmp	r3, #16
 8002218:	d003      	beq.n	8002222 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800221e:	2b11      	cmp	r3, #17
 8002220:	d132      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_ADC_ConfigChannel+0x1e4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d125      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d126      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002248:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b10      	cmp	r3, #16
 8002250:	d11a      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	0c9a      	lsrs	r2, r3, #18
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002268:	e002      	b.n	8002270 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3b01      	subs	r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f9      	bne.n	800226a <HAL_ADC_ConfigChannel+0x1b2>
 8002276:	e007      	b.n	8002288 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	f043 0220 	orr.w	r2, r3, #32
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	40012400 	.word	0x40012400
 80022a0:	20000024 	.word	0x20000024
 80022a4:	431bde83 	.word	0x431bde83

080022a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d127      	bne.n	8002312 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022d2:	f7ff fded 	bl	8001eb0 <HAL_GetTick>
 80022d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022d8:	e014      	b.n	8002304 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022da:	f7ff fde9 	bl	8001eb0 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d90d      	bls.n	8002304 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	f043 0210 	orr.w	r2, r3, #16
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e007      	b.n	8002314 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d0e3      	beq.n	80022da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002338:	4013      	ands	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234e:	4a04      	ldr	r2, [pc, #16]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	60d3      	str	r3, [r2, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <__NVIC_GetPriorityGrouping+0x18>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 0307 	and.w	r3, r3, #7
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	2b00      	cmp	r3, #0
 8002390:	db0b      	blt.n	80023aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	f003 021f 	and.w	r2, r3, #31
 8002398:	4906      	ldr	r1, [pc, #24]	; (80023b4 <__NVIC_EnableIRQ+0x34>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2001      	movs	r0, #1
 80023a2:	fa00 f202 	lsl.w	r2, r0, r2
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	; (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f7ff ff90 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff2d 	bl	800231c <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff42 	bl	8002364 <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff90 	bl	800240c <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5f 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff35 	bl	8002380 <__NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffa2 	bl	8002470 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b08b      	sub	sp, #44	; 0x2c
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254a:	e127      	b.n	800279c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800254c:	2201      	movs	r2, #1
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	429a      	cmp	r2, r3
 8002566:	f040 8116 	bne.w	8002796 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b12      	cmp	r3, #18
 8002570:	d034      	beq.n	80025dc <HAL_GPIO_Init+0xa4>
 8002572:	2b12      	cmp	r3, #18
 8002574:	d80d      	bhi.n	8002592 <HAL_GPIO_Init+0x5a>
 8002576:	2b02      	cmp	r3, #2
 8002578:	d02b      	beq.n	80025d2 <HAL_GPIO_Init+0x9a>
 800257a:	2b02      	cmp	r3, #2
 800257c:	d804      	bhi.n	8002588 <HAL_GPIO_Init+0x50>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d031      	beq.n	80025e6 <HAL_GPIO_Init+0xae>
 8002582:	2b01      	cmp	r3, #1
 8002584:	d01c      	beq.n	80025c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002586:	e048      	b.n	800261a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002588:	2b03      	cmp	r3, #3
 800258a:	d043      	beq.n	8002614 <HAL_GPIO_Init+0xdc>
 800258c:	2b11      	cmp	r3, #17
 800258e:	d01b      	beq.n	80025c8 <HAL_GPIO_Init+0x90>
          break;
 8002590:	e043      	b.n	800261a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002592:	4a89      	ldr	r2, [pc, #548]	; (80027b8 <HAL_GPIO_Init+0x280>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d026      	beq.n	80025e6 <HAL_GPIO_Init+0xae>
 8002598:	4a87      	ldr	r2, [pc, #540]	; (80027b8 <HAL_GPIO_Init+0x280>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d806      	bhi.n	80025ac <HAL_GPIO_Init+0x74>
 800259e:	4a87      	ldr	r2, [pc, #540]	; (80027bc <HAL_GPIO_Init+0x284>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d020      	beq.n	80025e6 <HAL_GPIO_Init+0xae>
 80025a4:	4a86      	ldr	r2, [pc, #536]	; (80027c0 <HAL_GPIO_Init+0x288>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01d      	beq.n	80025e6 <HAL_GPIO_Init+0xae>
          break;
 80025aa:	e036      	b.n	800261a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025ac:	4a85      	ldr	r2, [pc, #532]	; (80027c4 <HAL_GPIO_Init+0x28c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d019      	beq.n	80025e6 <HAL_GPIO_Init+0xae>
 80025b2:	4a85      	ldr	r2, [pc, #532]	; (80027c8 <HAL_GPIO_Init+0x290>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d016      	beq.n	80025e6 <HAL_GPIO_Init+0xae>
 80025b8:	4a84      	ldr	r2, [pc, #528]	; (80027cc <HAL_GPIO_Init+0x294>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0xae>
          break;
 80025be:	e02c      	b.n	800261a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	623b      	str	r3, [r7, #32]
          break;
 80025c6:	e028      	b.n	800261a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	3304      	adds	r3, #4
 80025ce:	623b      	str	r3, [r7, #32]
          break;
 80025d0:	e023      	b.n	800261a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	3308      	adds	r3, #8
 80025d8:	623b      	str	r3, [r7, #32]
          break;
 80025da:	e01e      	b.n	800261a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	330c      	adds	r3, #12
 80025e2:	623b      	str	r3, [r7, #32]
          break;
 80025e4:	e019      	b.n	800261a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ee:	2304      	movs	r3, #4
 80025f0:	623b      	str	r3, [r7, #32]
          break;
 80025f2:	e012      	b.n	800261a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025fc:	2308      	movs	r3, #8
 80025fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	611a      	str	r2, [r3, #16]
          break;
 8002606:	e008      	b.n	800261a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002608:	2308      	movs	r3, #8
 800260a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	615a      	str	r2, [r3, #20]
          break;
 8002612:	e002      	b.n	800261a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
          break;
 8002618:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2bff      	cmp	r3, #255	; 0xff
 800261e:	d801      	bhi.n	8002624 <HAL_GPIO_Init+0xec>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	e001      	b.n	8002628 <HAL_GPIO_Init+0xf0>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3304      	adds	r3, #4
 8002628:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2bff      	cmp	r3, #255	; 0xff
 800262e:	d802      	bhi.n	8002636 <HAL_GPIO_Init+0xfe>
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	e002      	b.n	800263c <HAL_GPIO_Init+0x104>
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	3b08      	subs	r3, #8
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	210f      	movs	r1, #15
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	401a      	ands	r2, r3
 800264e:	6a39      	ldr	r1, [r7, #32]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	431a      	orrs	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8096 	beq.w	8002796 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800266a:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_GPIO_Init+0x298>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	4a58      	ldr	r2, [pc, #352]	; (80027d0 <HAL_GPIO_Init+0x298>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6193      	str	r3, [r2, #24]
 8002676:	4b56      	ldr	r3, [pc, #344]	; (80027d0 <HAL_GPIO_Init+0x298>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002682:	4a54      	ldr	r2, [pc, #336]	; (80027d4 <HAL_GPIO_Init+0x29c>)
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	3302      	adds	r3, #2
 800268a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	220f      	movs	r2, #15
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4013      	ands	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4b      	ldr	r2, [pc, #300]	; (80027d8 <HAL_GPIO_Init+0x2a0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <HAL_GPIO_Init+0x19e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4a      	ldr	r2, [pc, #296]	; (80027dc <HAL_GPIO_Init+0x2a4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00d      	beq.n	80026d2 <HAL_GPIO_Init+0x19a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a49      	ldr	r2, [pc, #292]	; (80027e0 <HAL_GPIO_Init+0x2a8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <HAL_GPIO_Init+0x196>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a48      	ldr	r2, [pc, #288]	; (80027e4 <HAL_GPIO_Init+0x2ac>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_GPIO_Init+0x192>
 80026c6:	2303      	movs	r3, #3
 80026c8:	e006      	b.n	80026d8 <HAL_GPIO_Init+0x1a0>
 80026ca:	2304      	movs	r3, #4
 80026cc:	e004      	b.n	80026d8 <HAL_GPIO_Init+0x1a0>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e002      	b.n	80026d8 <HAL_GPIO_Init+0x1a0>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_GPIO_Init+0x1a0>
 80026d6:	2300      	movs	r3, #0
 80026d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026da:	f002 0203 	and.w	r2, r2, #3
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	4093      	lsls	r3, r2
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026e8:	493a      	ldr	r1, [pc, #232]	; (80027d4 <HAL_GPIO_Init+0x29c>)
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	3302      	adds	r3, #2
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d006      	beq.n	8002710 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002702:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4938      	ldr	r1, [pc, #224]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
 800270e:	e006      	b.n	800271e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	43db      	mvns	r3, r3
 8002718:	4933      	ldr	r1, [pc, #204]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 800271a:	4013      	ands	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800272a:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	492e      	ldr	r1, [pc, #184]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	604b      	str	r3, [r1, #4]
 8002736:	e006      	b.n	8002746 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	43db      	mvns	r3, r3
 8002740:	4929      	ldr	r1, [pc, #164]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 8002742:	4013      	ands	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d006      	beq.n	8002760 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002752:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	4924      	ldr	r1, [pc, #144]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
 800275e:	e006      	b.n	800276e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002760:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	43db      	mvns	r3, r3
 8002768:	491f      	ldr	r1, [pc, #124]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 800276a:	4013      	ands	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d006      	beq.n	8002788 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	491a      	ldr	r1, [pc, #104]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	60cb      	str	r3, [r1, #12]
 8002786:	e006      	b.n	8002796 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002788:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	43db      	mvns	r3, r3
 8002790:	4915      	ldr	r1, [pc, #84]	; (80027e8 <HAL_GPIO_Init+0x2b0>)
 8002792:	4013      	ands	r3, r2
 8002794:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	3301      	adds	r3, #1
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f47f aed0 	bne.w	800254c <HAL_GPIO_Init+0x14>
  }
}
 80027ac:	bf00      	nop
 80027ae:	372c      	adds	r7, #44	; 0x2c
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	10210000 	.word	0x10210000
 80027bc:	10110000 	.word	0x10110000
 80027c0:	10120000 	.word	0x10120000
 80027c4:	10310000 	.word	0x10310000
 80027c8:	10320000 	.word	0x10320000
 80027cc:	10220000 	.word	0x10220000
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40010800 	.word	0x40010800
 80027dc:	40010c00 	.word	0x40010c00
 80027e0:	40011000 	.word	0x40011000
 80027e4:	40011400 	.word	0x40011400
 80027e8:	40010400 	.word	0x40010400

080027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027fc:	787b      	ldrb	r3, [r7, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002808:	e003      	b.n	8002812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800280a:	887b      	ldrh	r3, [r7, #2]
 800280c:	041a      	lsls	r2, r3, #16
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	611a      	str	r2, [r3, #16]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d006      	beq.n	8002840 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fa37 	bl	8000cae <HAL_GPIO_EXTI_Callback>
  }
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40010400 	.word	0x40010400

0800284c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e11f      	b.n	8002a9e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe f8f4 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	; 0x24
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800289e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028b0:	f001 fe1c 	bl	80044ec <HAL_RCC_GetPCLK1Freq>
 80028b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a7b      	ldr	r2, [pc, #492]	; (8002aa8 <HAL_I2C_Init+0x25c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d807      	bhi.n	80028d0 <HAL_I2C_Init+0x84>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4a7a      	ldr	r2, [pc, #488]	; (8002aac <HAL_I2C_Init+0x260>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	bf94      	ite	ls
 80028c8:	2301      	movls	r3, #1
 80028ca:	2300      	movhi	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e006      	b.n	80028de <HAL_I2C_Init+0x92>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a77      	ldr	r2, [pc, #476]	; (8002ab0 <HAL_I2C_Init+0x264>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	bf94      	ite	ls
 80028d8:	2301      	movls	r3, #1
 80028da:	2300      	movhi	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0db      	b.n	8002a9e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a72      	ldr	r2, [pc, #456]	; (8002ab4 <HAL_I2C_Init+0x268>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0c9b      	lsrs	r3, r3, #18
 80028f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a64      	ldr	r2, [pc, #400]	; (8002aa8 <HAL_I2C_Init+0x25c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d802      	bhi.n	8002920 <HAL_I2C_Init+0xd4>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	3301      	adds	r3, #1
 800291e:	e009      	b.n	8002934 <HAL_I2C_Init+0xe8>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	4a63      	ldr	r2, [pc, #396]	; (8002ab8 <HAL_I2C_Init+0x26c>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	3301      	adds	r3, #1
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	430b      	orrs	r3, r1
 800293a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002946:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4956      	ldr	r1, [pc, #344]	; (8002aa8 <HAL_I2C_Init+0x25c>)
 8002950:	428b      	cmp	r3, r1
 8002952:	d80d      	bhi.n	8002970 <HAL_I2C_Init+0x124>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1e59      	subs	r1, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002962:	3301      	adds	r3, #1
 8002964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002968:	2b04      	cmp	r3, #4
 800296a:	bf38      	it	cc
 800296c:	2304      	movcc	r3, #4
 800296e:	e04f      	b.n	8002a10 <HAL_I2C_Init+0x1c4>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d111      	bne.n	800299c <HAL_I2C_Init+0x150>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e58      	subs	r0, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e012      	b.n	80029c2 <HAL_I2C_Init+0x176>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e58      	subs	r0, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	0099      	lsls	r1, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Init+0x17e>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e022      	b.n	8002a10 <HAL_I2C_Init+0x1c4>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10e      	bne.n	80029f0 <HAL_I2C_Init+0x1a4>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1e58      	subs	r0, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	440b      	add	r3, r1
 80029e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ee:	e00f      	b.n	8002a10 <HAL_I2C_Init+0x1c4>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e58      	subs	r0, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	0099      	lsls	r1, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	6809      	ldr	r1, [r1, #0]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6911      	ldr	r1, [r2, #16]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68d2      	ldr	r2, [r2, #12]
 8002a4a:	4311      	orrs	r1, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	430b      	orrs	r3, r1
 8002a52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	000186a0 	.word	0x000186a0
 8002aac:	001e847f 	.word	0x001e847f
 8002ab0:	003d08ff 	.word	0x003d08ff
 8002ab4:	431bde83 	.word	0x431bde83
 8002ab8:	10624dd3 	.word	0x10624dd3

08002abc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	460b      	mov	r3, r1
 8002aca:	817b      	strh	r3, [r7, #10]
 8002acc:	4613      	mov	r3, r2
 8002ace:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7ff f9ee 	bl	8001eb0 <HAL_GetTick>
 8002ad4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	f040 80e0 	bne.w	8002ca4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2319      	movs	r3, #25
 8002aea:	2201      	movs	r2, #1
 8002aec:	4970      	ldr	r1, [pc, #448]	; (8002cb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 ff4a 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0d3      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_I2C_Master_Transmit+0x50>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e0cc      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d007      	beq.n	8002b32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2221      	movs	r2, #33	; 0x21
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	893a      	ldrh	r2, [r7, #8]
 8002b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a50      	ldr	r2, [pc, #320]	; (8002cb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b74:	8979      	ldrh	r1, [r7, #10]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fd1e 	bl	80035bc <I2C_MasterRequestWrite>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e08d      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ba0:	e066      	b.n	8002c70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	6a39      	ldr	r1, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 ffc4 	bl	8003b34 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d107      	bne.n	8002bca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06b      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d11b      	bne.n	8002c44 <HAL_I2C_Master_Transmit+0x188>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d017      	beq.n	8002c44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	6a39      	ldr	r1, [r7, #32]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 ffb4 	bl	8003bb6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d107      	bne.n	8002c6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e01a      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d194      	bne.n	8002ba2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e000      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ca4:	2302      	movs	r3, #2
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	00100002 	.word	0x00100002
 8002cb4:	ffff0000 	.word	0xffff0000

08002cb8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	; 0x30
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	817b      	strh	r3, [r7, #10]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7ff f8ee 	bl	8001eb0 <HAL_GetTick>
 8002cd4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	f040 8238 	bne.w	8003154 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2319      	movs	r3, #25
 8002cea:	2201      	movs	r2, #1
 8002cec:	497e      	ldr	r1, [pc, #504]	; (8002ee8 <HAL_I2C_Master_Receive+0x230>)
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fe4a 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e22b      	b.n	8003156 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_I2C_Master_Receive+0x54>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e224      	b.n	8003156 <HAL_I2C_Master_Receive+0x49e>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d007      	beq.n	8002d32 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2222      	movs	r2, #34	; 0x22
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	893a      	ldrh	r2, [r7, #8]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4a5e      	ldr	r2, [pc, #376]	; (8002eec <HAL_I2C_Master_Receive+0x234>)
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d74:	8979      	ldrh	r1, [r7, #10]
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fca0 	bl	80036c0 <I2C_MasterRequestRead>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e1e5      	b.n	8003156 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d113      	bne.n	8002dba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e1b9      	b.n	800312e <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d11d      	bne.n	8002dfe <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002dfa:	b662      	cpsie	i
 8002dfc:	e197      	b.n	800312e <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d11d      	bne.n	8002e42 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e16:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e3e:	b662      	cpsie	i
 8002e40:	e175      	b.n	800312e <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e68:	e161      	b.n	800312e <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	f200 811a 	bhi.w	80030a8 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d123      	bne.n	8002ec4 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fed9 	bl	8003c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e162      	b.n	8003156 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ec2:	e134      	b.n	800312e <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d150      	bne.n	8002f6e <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4906      	ldr	r1, [pc, #24]	; (8002ef0 <HAL_I2C_Master_Receive+0x238>)
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fd56 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e137      	b.n	8003156 <HAL_I2C_Master_Receive+0x49e>
 8002ee6:	bf00      	nop
 8002ee8:	00100002 	.word	0x00100002
 8002eec:	ffff0000 	.word	0xffff0000
 8002ef0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f04:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f38:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f6c:	e0df      	b.n	800312e <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	2200      	movs	r2, #0
 8002f76:	497a      	ldr	r1, [pc, #488]	; (8003160 <HAL_I2C_Master_Receive+0x4a8>)
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fd05 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0e6      	b.n	8003156 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f98:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fcc:	4b65      	ldr	r3, [pc, #404]	; (8003164 <HAL_I2C_Master_Receive+0x4ac>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	08db      	lsrs	r3, r3, #3
 8002fd2:	4a65      	ldr	r2, [pc, #404]	; (8003168 <HAL_I2C_Master_Receive+0x4b0>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	0a1a      	lsrs	r2, r3, #8
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	00da      	lsls	r2, r3, #3
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d117      	bne.n	8003022 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f043 0220 	orr.w	r2, r3, #32
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003014:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e099      	b.n	8003156 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b04      	cmp	r3, #4
 800302e:	d1da      	bne.n	8002fe6 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003072:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030a6:	e042      	b.n	800312e <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fdc3 	bl	8003c38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e04c      	b.n	8003156 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d118      	bne.n	800312e <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	f47f ae99 	bne.w	8002e6a <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	00010004 	.word	0x00010004
 8003164:	20000024 	.word	0x20000024
 8003168:	14f8b589 	.word	0x14f8b589

0800316c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	4608      	mov	r0, r1
 8003176:	4611      	mov	r1, r2
 8003178:	461a      	mov	r2, r3
 800317a:	4603      	mov	r3, r0
 800317c:	817b      	strh	r3, [r7, #10]
 800317e:	460b      	mov	r3, r1
 8003180:	813b      	strh	r3, [r7, #8]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003186:	f7fe fe93 	bl	8001eb0 <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b20      	cmp	r3, #32
 8003196:	f040 80d9 	bne.w	800334c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	2319      	movs	r3, #25
 80031a0:	2201      	movs	r2, #1
 80031a2:	496d      	ldr	r1, [pc, #436]	; (8003358 <HAL_I2C_Mem_Write+0x1ec>)
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fbef 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
 80031b2:	e0cc      	b.n	800334e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_I2C_Mem_Write+0x56>
 80031be:	2302      	movs	r3, #2
 80031c0:	e0c5      	b.n	800334e <HAL_I2C_Mem_Write+0x1e2>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d007      	beq.n	80031e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2221      	movs	r2, #33	; 0x21
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2240      	movs	r2, #64	; 0x40
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a3a      	ldr	r2, [r7, #32]
 8003212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003218:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4a4d      	ldr	r2, [pc, #308]	; (800335c <HAL_I2C_Mem_Write+0x1f0>)
 8003228:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800322a:	88f8      	ldrh	r0, [r7, #6]
 800322c:	893a      	ldrh	r2, [r7, #8]
 800322e:	8979      	ldrh	r1, [r7, #10]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	4603      	mov	r3, r0
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fb0e 	bl	800385c <I2C_RequestMemoryWrite>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d052      	beq.n	80032ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e081      	b.n	800334e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fc70 	bl	8003b34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b04      	cmp	r3, #4
 8003260:	d107      	bne.n	8003272 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003270:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e06b      	b.n	800334e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	781a      	ldrb	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d11b      	bne.n	80032ec <HAL_I2C_Mem_Write+0x180>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d017      	beq.n	80032ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1aa      	bne.n	800324a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fc5c 	bl	8003bb6 <I2C_WaitOnBTFFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00d      	beq.n	8003320 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	2b04      	cmp	r3, #4
 800330a:	d107      	bne.n	800331c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e016      	b.n	800334e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	e000      	b.n	800334e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	00100002 	.word	0x00100002
 800335c:	ffff0000 	.word	0xffff0000

08003360 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	460b      	mov	r3, r1
 800336e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7fe fd9e 	bl	8001eb0 <HAL_GetTick>
 8003374:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003376:	2301      	movs	r3, #1
 8003378:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b20      	cmp	r3, #32
 8003384:	f040 8111 	bne.w	80035aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2319      	movs	r3, #25
 800338e:	2201      	movs	r2, #1
 8003390:	4988      	ldr	r1, [pc, #544]	; (80035b4 <HAL_I2C_IsDeviceReady+0x254>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 faf8 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
 80033a0:	e104      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_I2C_IsDeviceReady+0x50>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e0fd      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x24c>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d007      	beq.n	80033d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2224      	movs	r2, #36	; 0x24
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a70      	ldr	r2, [pc, #448]	; (80035b8 <HAL_I2C_IsDeviceReady+0x258>)
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003408:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2200      	movs	r2, #0
 8003412:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fab6 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003430:	d103      	bne.n	800343a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e0b6      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800344c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800344e:	f7fe fd2f 	bl	8001eb0 <HAL_GetTick>
 8003452:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b02      	cmp	r3, #2
 8003460:	bf0c      	ite	eq
 8003462:	2301      	moveq	r3, #1
 8003464:	2300      	movne	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003478:	bf0c      	ite	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	2300      	movne	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003482:	e025      	b.n	80034d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003484:	f7fe fd14 	bl	8001eb0 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d302      	bcc.n	800349a <HAL_I2C_IsDeviceReady+0x13a>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d103      	bne.n	80034a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	22a0      	movs	r2, #160	; 0xa0
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2ba0      	cmp	r3, #160	; 0xa0
 80034da:	d005      	beq.n	80034e8 <HAL_I2C_IsDeviceReady+0x188>
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <HAL_I2C_IsDeviceReady+0x188>
 80034e2:	7dbb      	ldrb	r3, [r7, #22]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0cd      	beq.n	8003484 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d129      	bne.n	8003552 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2319      	movs	r3, #25
 800352a:	2201      	movs	r2, #1
 800352c:	4921      	ldr	r1, [pc, #132]	; (80035b4 <HAL_I2C_IsDeviceReady+0x254>)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fa2a 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e036      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	e02c      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003560:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800356a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	2319      	movs	r3, #25
 8003572:	2201      	movs	r2, #1
 8003574:	490f      	ldr	r1, [pc, #60]	; (80035b4 <HAL_I2C_IsDeviceReady+0x254>)
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fa06 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e012      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	3301      	adds	r3, #1
 800358a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	f4ff af32 	bcc.w	80033fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	00100002 	.word	0x00100002
 80035b8:	ffff0000 	.word	0xffff0000

080035bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	460b      	mov	r3, r1
 80035ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d006      	beq.n	80035e6 <I2C_MasterRequestWrite+0x2a>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d003      	beq.n	80035e6 <I2C_MasterRequestWrite+0x2a>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035e4:	d108      	bne.n	80035f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e00b      	b.n	8003610 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	2b12      	cmp	r3, #18
 80035fe:	d107      	bne.n	8003610 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800360e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f9b3 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00d      	beq.n	8003644 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003636:	d103      	bne.n	8003640 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e035      	b.n	80036b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800364c:	d108      	bne.n	8003660 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800364e:	897b      	ldrh	r3, [r7, #10]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800365c:	611a      	str	r2, [r3, #16]
 800365e:	e01b      	b.n	8003698 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003660:	897b      	ldrh	r3, [r7, #10]
 8003662:	11db      	asrs	r3, r3, #7
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f003 0306 	and.w	r3, r3, #6
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f063 030f 	orn	r3, r3, #15
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	490e      	ldr	r1, [pc, #56]	; (80036b8 <I2C_MasterRequestWrite+0xfc>)
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f9d9 	bl	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e010      	b.n	80036b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800368e:	897b      	ldrh	r3, [r7, #10]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4907      	ldr	r1, [pc, #28]	; (80036bc <I2C_MasterRequestWrite+0x100>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f9c9 	bl	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	00010008 	.word	0x00010008
 80036bc:	00010002 	.word	0x00010002

080036c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	460b      	mov	r3, r1
 80036ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d006      	beq.n	80036fa <I2C_MasterRequestRead+0x3a>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d003      	beq.n	80036fa <I2C_MasterRequestRead+0x3a>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036f8:	d108      	bne.n	800370c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	e00b      	b.n	8003724 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	2b11      	cmp	r3, #17
 8003712:	d107      	bne.n	8003724 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003722:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f929 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374a:	d103      	bne.n	8003754 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e079      	b.n	800384c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003760:	d108      	bne.n	8003774 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	611a      	str	r2, [r3, #16]
 8003772:	e05f      	b.n	8003834 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003774:	897b      	ldrh	r3, [r7, #10]
 8003776:	11db      	asrs	r3, r3, #7
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f003 0306 	and.w	r3, r3, #6
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f063 030f 	orn	r3, r3, #15
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4930      	ldr	r1, [pc, #192]	; (8003854 <I2C_MasterRequestRead+0x194>)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f94f 	bl	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e054      	b.n	800384c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037a2:	897b      	ldrh	r3, [r7, #10]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4929      	ldr	r1, [pc, #164]	; (8003858 <I2C_MasterRequestRead+0x198>)
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f93f 	bl	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e044      	b.n	800384c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f8c7 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00d      	beq.n	800381c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380e:	d103      	bne.n	8003818 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e017      	b.n	800384c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800381c:	897b      	ldrh	r3, [r7, #10]
 800381e:	11db      	asrs	r3, r3, #7
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f003 0306 	and.w	r3, r3, #6
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f063 030e 	orn	r3, r3, #14
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4907      	ldr	r1, [pc, #28]	; (8003858 <I2C_MasterRequestRead+0x198>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f8fb 	bl	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	00010008 	.word	0x00010008
 8003858:	00010002 	.word	0x00010002

0800385c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	461a      	mov	r2, r3
 800386a:	4603      	mov	r3, r0
 800386c:	817b      	strh	r3, [r7, #10]
 800386e:	460b      	mov	r3, r1
 8003870:	813b      	strh	r3, [r7, #8]
 8003872:	4613      	mov	r3, r2
 8003874:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003884:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	2200      	movs	r2, #0
 800388e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f878 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ac:	d103      	bne.n	80038b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e05f      	b.n	800397a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ba:	897b      	ldrh	r3, [r7, #10]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	6a3a      	ldr	r2, [r7, #32]
 80038ce:	492d      	ldr	r1, [pc, #180]	; (8003984 <I2C_RequestMemoryWrite+0x128>)
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f8b0 	bl	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e04c      	b.n	800397a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f8:	6a39      	ldr	r1, [r7, #32]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f91a 	bl	8003b34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00d      	beq.n	8003922 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2b04      	cmp	r3, #4
 800390c:	d107      	bne.n	800391e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e02b      	b.n	800397a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d105      	bne.n	8003934 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003928:	893b      	ldrh	r3, [r7, #8]
 800392a:	b2da      	uxtb	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	611a      	str	r2, [r3, #16]
 8003932:	e021      	b.n	8003978 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003934:	893b      	ldrh	r3, [r7, #8]
 8003936:	0a1b      	lsrs	r3, r3, #8
 8003938:	b29b      	uxth	r3, r3
 800393a:	b2da      	uxtb	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003944:	6a39      	ldr	r1, [r7, #32]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f8f4 	bl	8003b34 <I2C_WaitOnTXEFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00d      	beq.n	800396e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2b04      	cmp	r3, #4
 8003958:	d107      	bne.n	800396a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003968:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e005      	b.n	800397a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800396e:	893b      	ldrh	r3, [r7, #8]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	00010002 	.word	0x00010002

08003988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003998:	e025      	b.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d021      	beq.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fe fa85 	bl	8001eb0 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d116      	bne.n	80039e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e023      	b.n	8003a2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10d      	bne.n	8003a0c <I2C_WaitOnFlagUntilTimeout+0x84>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	43da      	mvns	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4013      	ands	r3, r2
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	e00c      	b.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d0b6      	beq.n	800399a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a44:	e051      	b.n	8003aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a54:	d123      	bne.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e046      	b.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d021      	beq.n	8003aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa6:	f7fe fa03 	bl	8001eb0 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d116      	bne.n	8003aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e020      	b.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d10c      	bne.n	8003b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	43da      	mvns	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4013      	ands	r3, r2
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bf14      	ite	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	2300      	moveq	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e00b      	b.n	8003b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	43da      	mvns	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d18d      	bne.n	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b40:	e02d      	b.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f8ce 	bl	8003ce4 <I2C_IsAcknowledgeFailed>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e02d      	b.n	8003bae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d021      	beq.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7fe f9a9 	bl	8001eb0 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d116      	bne.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f043 0220 	orr.w	r2, r3, #32
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e007      	b.n	8003bae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	2b80      	cmp	r3, #128	; 0x80
 8003baa:	d1ca      	bne.n	8003b42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc2:	e02d      	b.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f88d 	bl	8003ce4 <I2C_IsAcknowledgeFailed>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e02d      	b.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d021      	beq.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bdc:	f7fe f968 	bl	8001eb0 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d302      	bcc.n	8003bf2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d116      	bne.n	8003c20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f043 0220 	orr.w	r2, r3, #32
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e007      	b.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d1ca      	bne.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c44:	e042      	b.n	8003ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d119      	bne.n	8003c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0210 	mvn.w	r2, #16
 8003c5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e029      	b.n	8003cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c88:	f7fe f912 	bl	8001eb0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d116      	bne.n	8003ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f043 0220 	orr.w	r2, r3, #32
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e007      	b.n	8003cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d1b5      	bne.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfa:	d11b      	bne.n	8003d34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f043 0204 	orr.w	r2, r3, #4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e26c      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8087 	beq.w	8003e6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d60:	4b92      	ldr	r3, [pc, #584]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 030c 	and.w	r3, r3, #12
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d00c      	beq.n	8003d86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d6c:	4b8f      	ldr	r3, [pc, #572]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 030c 	and.w	r3, r3, #12
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d112      	bne.n	8003d9e <HAL_RCC_OscConfig+0x5e>
 8003d78:	4b8c      	ldr	r3, [pc, #560]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d84:	d10b      	bne.n	8003d9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d86:	4b89      	ldr	r3, [pc, #548]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d06c      	beq.n	8003e6c <HAL_RCC_OscConfig+0x12c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d168      	bne.n	8003e6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e246      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da6:	d106      	bne.n	8003db6 <HAL_RCC_OscConfig+0x76>
 8003da8:	4b80      	ldr	r3, [pc, #512]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a7f      	ldr	r2, [pc, #508]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	e02e      	b.n	8003e14 <HAL_RCC_OscConfig+0xd4>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x98>
 8003dbe:	4b7b      	ldr	r3, [pc, #492]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a7a      	ldr	r2, [pc, #488]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	4b78      	ldr	r3, [pc, #480]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a77      	ldr	r2, [pc, #476]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e01d      	b.n	8003e14 <HAL_RCC_OscConfig+0xd4>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCC_OscConfig+0xbc>
 8003de2:	4b72      	ldr	r3, [pc, #456]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a71      	ldr	r2, [pc, #452]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b6f      	ldr	r3, [pc, #444]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a6e      	ldr	r2, [pc, #440]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCC_OscConfig+0xd4>
 8003dfc:	4b6b      	ldr	r3, [pc, #428]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6a      	ldr	r2, [pc, #424]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b68      	ldr	r3, [pc, #416]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a67      	ldr	r2, [pc, #412]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d013      	beq.n	8003e44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7fe f848 	bl	8001eb0 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fe f844 	bl	8001eb0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e1fa      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	4b5d      	ldr	r3, [pc, #372]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0xe4>
 8003e42:	e014      	b.n	8003e6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fe f834 	bl	8001eb0 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fe f830 	bl	8001eb0 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e1e6      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5e:	4b53      	ldr	r3, [pc, #332]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x10c>
 8003e6a:	e000      	b.n	8003e6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d063      	beq.n	8003f42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e7a:	4b4c      	ldr	r3, [pc, #304]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e86:	4b49      	ldr	r3, [pc, #292]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d11c      	bne.n	8003ecc <HAL_RCC_OscConfig+0x18c>
 8003e92:	4b46      	ldr	r3, [pc, #280]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d116      	bne.n	8003ecc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9e:	4b43      	ldr	r3, [pc, #268]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x176>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d001      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e1ba      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	4b3d      	ldr	r3, [pc, #244]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4939      	ldr	r1, [pc, #228]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eca:	e03a      	b.n	8003f42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d020      	beq.n	8003f16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed4:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fd ffe9 	bl	8001eb0 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee2:	f7fd ffe5 	bl	8001eb0 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e19b      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f00:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4927      	ldr	r1, [pc, #156]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]
 8003f14:	e015      	b.n	8003f42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f16:	4b26      	ldr	r3, [pc, #152]	; (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1c:	f7fd ffc8 	bl	8001eb0 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f24:	f7fd ffc4 	bl	8001eb0 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e17a      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f36:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d03a      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d019      	beq.n	8003f8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f56:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <HAL_RCC_OscConfig+0x274>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5c:	f7fd ffa8 	bl	8001eb0 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fd ffa4 	bl	8001eb0 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e15a      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <HAL_RCC_OscConfig+0x26c>)
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f82:	2001      	movs	r0, #1
 8003f84:	f000 fada 	bl	800453c <RCC_Delay>
 8003f88:	e01c      	b.n	8003fc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <HAL_RCC_OscConfig+0x274>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f90:	f7fd ff8e 	bl	8001eb0 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f96:	e00f      	b.n	8003fb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f98:	f7fd ff8a 	bl	8001eb0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d908      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e140      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	42420000 	.word	0x42420000
 8003fb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb8:	4b9e      	ldr	r3, [pc, #632]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e9      	bne.n	8003f98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80a6 	beq.w	800411e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd6:	4b97      	ldr	r3, [pc, #604]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10d      	bne.n	8003ffe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	4b94      	ldr	r3, [pc, #592]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	4a93      	ldr	r2, [pc, #588]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fec:	61d3      	str	r3, [r2, #28]
 8003fee:	4b91      	ldr	r3, [pc, #580]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffe:	4b8e      	ldr	r3, [pc, #568]	; (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d118      	bne.n	800403c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800400a:	4b8b      	ldr	r3, [pc, #556]	; (8004238 <HAL_RCC_OscConfig+0x4f8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a8a      	ldr	r2, [pc, #552]	; (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004016:	f7fd ff4b 	bl	8001eb0 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401e:	f7fd ff47 	bl	8001eb0 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b64      	cmp	r3, #100	; 0x64
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e0fd      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	4b81      	ldr	r3, [pc, #516]	; (8004238 <HAL_RCC_OscConfig+0x4f8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d106      	bne.n	8004052 <HAL_RCC_OscConfig+0x312>
 8004044:	4b7b      	ldr	r3, [pc, #492]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	4a7a      	ldr	r2, [pc, #488]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6213      	str	r3, [r2, #32]
 8004050:	e02d      	b.n	80040ae <HAL_RCC_OscConfig+0x36e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0x334>
 800405a:	4b76      	ldr	r3, [pc, #472]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	4a75      	ldr	r2, [pc, #468]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004060:	f023 0301 	bic.w	r3, r3, #1
 8004064:	6213      	str	r3, [r2, #32]
 8004066:	4b73      	ldr	r3, [pc, #460]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	4a72      	ldr	r2, [pc, #456]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800406c:	f023 0304 	bic.w	r3, r3, #4
 8004070:	6213      	str	r3, [r2, #32]
 8004072:	e01c      	b.n	80040ae <HAL_RCC_OscConfig+0x36e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b05      	cmp	r3, #5
 800407a:	d10c      	bne.n	8004096 <HAL_RCC_OscConfig+0x356>
 800407c:	4b6d      	ldr	r3, [pc, #436]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	4a6c      	ldr	r2, [pc, #432]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004082:	f043 0304 	orr.w	r3, r3, #4
 8004086:	6213      	str	r3, [r2, #32]
 8004088:	4b6a      	ldr	r3, [pc, #424]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	4a69      	ldr	r2, [pc, #420]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6213      	str	r3, [r2, #32]
 8004094:	e00b      	b.n	80040ae <HAL_RCC_OscConfig+0x36e>
 8004096:	4b67      	ldr	r3, [pc, #412]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	4a66      	ldr	r2, [pc, #408]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	6213      	str	r3, [r2, #32]
 80040a2:	4b64      	ldr	r3, [pc, #400]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	4a63      	ldr	r2, [pc, #396]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040a8:	f023 0304 	bic.w	r3, r3, #4
 80040ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d015      	beq.n	80040e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b6:	f7fd fefb 	bl	8001eb0 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040bc:	e00a      	b.n	80040d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040be:	f7fd fef7 	bl	8001eb0 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e0ab      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d4:	4b57      	ldr	r3, [pc, #348]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0ee      	beq.n	80040be <HAL_RCC_OscConfig+0x37e>
 80040e0:	e014      	b.n	800410c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e2:	f7fd fee5 	bl	8001eb0 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7fd fee1 	bl	8001eb0 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e095      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004100:	4b4c      	ldr	r3, [pc, #304]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1ee      	bne.n	80040ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d105      	bne.n	800411e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004112:	4b48      	ldr	r3, [pc, #288]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4a47      	ldr	r2, [pc, #284]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800411c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8081 	beq.w	800422a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004128:	4b42      	ldr	r3, [pc, #264]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b08      	cmp	r3, #8
 8004132:	d061      	beq.n	80041f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d146      	bne.n	80041ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413c:	4b3f      	ldr	r3, [pc, #252]	; (800423c <HAL_RCC_OscConfig+0x4fc>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004142:	f7fd feb5 	bl	8001eb0 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414a:	f7fd feb1 	bl	8001eb0 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e067      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415c:	4b35      	ldr	r3, [pc, #212]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f0      	bne.n	800414a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004170:	d108      	bne.n	8004184 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004172:	4b30      	ldr	r3, [pc, #192]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	492d      	ldr	r1, [pc, #180]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004184:	4b2b      	ldr	r3, [pc, #172]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a19      	ldr	r1, [r3, #32]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	430b      	orrs	r3, r1
 8004196:	4927      	ldr	r1, [pc, #156]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004198:	4313      	orrs	r3, r2
 800419a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800419c:	4b27      	ldr	r3, [pc, #156]	; (800423c <HAL_RCC_OscConfig+0x4fc>)
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a2:	f7fd fe85 	bl	8001eb0 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041aa:	f7fd fe81 	bl	8001eb0 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e037      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041bc:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x46a>
 80041c8:	e02f      	b.n	800422a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ca:	4b1c      	ldr	r3, [pc, #112]	; (800423c <HAL_RCC_OscConfig+0x4fc>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7fd fe6e 	bl	8001eb0 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fd fe6a 	bl	8001eb0 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e020      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x498>
 80041f6:	e018      	b.n	800422a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e013      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_OscConfig+0x4f4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	429a      	cmp	r2, r3
 8004216:	d106      	bne.n	8004226 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d001      	beq.n	800422a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000
 8004238:	40007000 	.word	0x40007000
 800423c:	42420060 	.word	0x42420060

08004240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0d0      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b6a      	ldr	r3, [pc, #424]	; (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d910      	bls.n	8004284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b67      	ldr	r3, [pc, #412]	; (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 0207 	bic.w	r2, r3, #7
 800426a:	4965      	ldr	r1, [pc, #404]	; (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b63      	ldr	r3, [pc, #396]	; (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0b8      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d020      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800429c:	4b59      	ldr	r3, [pc, #356]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4a58      	ldr	r2, [pc, #352]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80042a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b4:	4b53      	ldr	r3, [pc, #332]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a52      	ldr	r2, [pc, #328]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80042ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c0:	4b50      	ldr	r3, [pc, #320]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	494d      	ldr	r1, [pc, #308]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d040      	beq.n	8004360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d107      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e6:	4b47      	ldr	r3, [pc, #284]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d115      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e07f      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fe:	4b41      	ldr	r3, [pc, #260]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e073      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430e:	4b3d      	ldr	r3, [pc, #244]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e06b      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431e:	4b39      	ldr	r3, [pc, #228]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f023 0203 	bic.w	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4936      	ldr	r1, [pc, #216]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 800432c:	4313      	orrs	r3, r2
 800432e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004330:	f7fd fdbe 	bl	8001eb0 <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	e00a      	b.n	800434e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004338:	f7fd fdba 	bl	8001eb0 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e053      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 020c 	and.w	r2, r3, #12
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	429a      	cmp	r2, r3
 800435e:	d1eb      	bne.n	8004338 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004360:	4b27      	ldr	r3, [pc, #156]	; (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d210      	bcs.n	8004390 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b24      	ldr	r3, [pc, #144]	; (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 0207 	bic.w	r2, r3, #7
 8004376:	4922      	ldr	r1, [pc, #136]	; (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <HAL_RCC_ClockConfig+0x1c0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e032      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800439c:	4b19      	ldr	r3, [pc, #100]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4916      	ldr	r1, [pc, #88]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	490e      	ldr	r1, [pc, #56]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ce:	f000 f821 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 80043d2:	4601      	mov	r1, r0
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCC_ClockConfig+0x1c4>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <HAL_RCC_ClockConfig+0x1c8>)
 80043e0:	5cd3      	ldrb	r3, [r2, r3]
 80043e2:	fa21 f303 	lsr.w	r3, r1, r3
 80043e6:	4a09      	ldr	r2, [pc, #36]	; (800440c <HAL_RCC_ClockConfig+0x1cc>)
 80043e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <HAL_RCC_ClockConfig+0x1d0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fd fd1c 	bl	8001e2c <HAL_InitTick>

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40022000 	.word	0x40022000
 8004404:	40021000 	.word	0x40021000
 8004408:	08005878 	.word	0x08005878
 800440c:	20000024 	.word	0x20000024
 8004410:	20000028 	.word	0x20000028

08004414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004414:	b490      	push	{r4, r7}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800441a:	4b2a      	ldr	r3, [pc, #168]	; (80044c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800441c:	1d3c      	adds	r4, r7, #4
 800441e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004424:	4b28      	ldr	r3, [pc, #160]	; (80044c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	2300      	movs	r3, #0
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	2300      	movs	r3, #0
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800443e:	4b23      	ldr	r3, [pc, #140]	; (80044cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b04      	cmp	r3, #4
 800444c:	d002      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x40>
 800444e:	2b08      	cmp	r3, #8
 8004450:	d003      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0x46>
 8004452:	e02d      	b.n	80044b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004454:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004456:	623b      	str	r3, [r7, #32]
      break;
 8004458:	e02d      	b.n	80044b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	0c9b      	lsrs	r3, r3, #18
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004466:	4413      	add	r3, r2
 8004468:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800446c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d013      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004478:	4b14      	ldr	r3, [pc, #80]	; (80044cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	0c5b      	lsrs	r3, r3, #17
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004486:	4413      	add	r3, r2
 8004488:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800448c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004492:	fb02 f203 	mul.w	r2, r2, r3
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
 800449e:	e004      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4a0c      	ldr	r2, [pc, #48]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	623b      	str	r3, [r7, #32]
      break;
 80044ae:	e002      	b.n	80044b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044b0:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044b2:	623b      	str	r3, [r7, #32]
      break;
 80044b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044b6:	6a3b      	ldr	r3, [r7, #32]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3728      	adds	r7, #40	; 0x28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc90      	pop	{r4, r7}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	08005864 	.word	0x08005864
 80044c8:	08005874 	.word	0x08005874
 80044cc:	40021000 	.word	0x40021000
 80044d0:	007a1200 	.word	0x007a1200
 80044d4:	003d0900 	.word	0x003d0900

080044d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044dc:	4b02      	ldr	r3, [pc, #8]	; (80044e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr
 80044e8:	20000024 	.word	0x20000024

080044ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044f0:	f7ff fff2 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80044f4:	4601      	mov	r1, r0
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <HAL_RCC_GetPCLK1Freq+0x20>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	4a03      	ldr	r2, [pc, #12]	; (8004510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004502:	5cd3      	ldrb	r3, [r2, r3]
 8004504:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004508:	4618      	mov	r0, r3
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40021000 	.word	0x40021000
 8004510:	08005888 	.word	0x08005888

08004514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004518:	f7ff ffde 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 800451c:	4601      	mov	r1, r0
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	0adb      	lsrs	r3, r3, #11
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4a03      	ldr	r2, [pc, #12]	; (8004538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40021000 	.word	0x40021000
 8004538:	08005888 	.word	0x08005888

0800453c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <RCC_Delay+0x34>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <RCC_Delay+0x38>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	0a5b      	lsrs	r3, r3, #9
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004558:	bf00      	nop
  }
  while (Delay --);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1e5a      	subs	r2, r3, #1
 800455e:	60fa      	str	r2, [r7, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f9      	bne.n	8004558 <RCC_Delay+0x1c>
}
 8004564:	bf00      	nop
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000024 	.word	0x20000024
 8004574:	10624dd3 	.word	0x10624dd3

08004578 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d07d      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004594:	2300      	movs	r3, #0
 8004596:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004598:	4b4f      	ldr	r3, [pc, #316]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a4:	4b4c      	ldr	r3, [pc, #304]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	4a4b      	ldr	r2, [pc, #300]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ae:	61d3      	str	r3, [r2, #28]
 80045b0:	4b49      	ldr	r3, [pc, #292]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045bc:	2301      	movs	r3, #1
 80045be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c0:	4b46      	ldr	r3, [pc, #280]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d118      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045cc:	4b43      	ldr	r3, [pc, #268]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a42      	ldr	r2, [pc, #264]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d8:	f7fd fc6a 	bl	8001eb0 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045de:	e008      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e0:	f7fd fc66 	bl	8001eb0 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b64      	cmp	r3, #100	; 0x64
 80045ec:	d901      	bls.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e06d      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f2:	4b3a      	ldr	r3, [pc, #232]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045fe:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004606:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d02e      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	429a      	cmp	r2, r3
 800461a:	d027      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800461c:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004624:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004626:	4b2e      	ldr	r3, [pc, #184]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800462c:	4b2c      	ldr	r3, [pc, #176]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004632:	4a29      	ldr	r2, [pc, #164]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d014      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7fd fc35 	bl	8001eb0 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004648:	e00a      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fd fc31 	bl	8001eb0 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	; 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e036      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004660:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0ee      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4917      	ldr	r1, [pc, #92]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467a:	4313      	orrs	r3, r2
 800467c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800467e:	7dfb      	ldrb	r3, [r7, #23]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d105      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004684:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	4a13      	ldr	r2, [pc, #76]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800468e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800469c:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	490b      	ldr	r1, [pc, #44]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046ba:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	4904      	ldr	r1, [pc, #16]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40007000 	.word	0x40007000
 80046e0:	42420440 	.word	0x42420440

080046e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e041      	b.n	800477a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fd fa2e 	bl	8001b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f000 fb02 	bl	8004d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e041      	b.n	8004818 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f839 	bl	8004820 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2202      	movs	r2, #2
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3304      	adds	r3, #4
 80047be:	4619      	mov	r1, r3
 80047c0:	4610      	mov	r0, r2
 80047c2:	f000 fab3 	bl	8004d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr
	...

08004834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <HAL_TIM_PWM_Start+0x24>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e022      	b.n	800489e <HAL_TIM_PWM_Start+0x6a>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b04      	cmp	r3, #4
 800485c:	d109      	bne.n	8004872 <HAL_TIM_PWM_Start+0x3e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e015      	b.n	800489e <HAL_TIM_PWM_Start+0x6a>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d109      	bne.n	800488c <HAL_TIM_PWM_Start+0x58>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e008      	b.n	800489e <HAL_TIM_PWM_Start+0x6a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e05e      	b.n	8004964 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d104      	bne.n	80048b6 <HAL_TIM_PWM_Start+0x82>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b4:	e013      	b.n	80048de <HAL_TIM_PWM_Start+0xaa>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d104      	bne.n	80048c6 <HAL_TIM_PWM_Start+0x92>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c4:	e00b      	b.n	80048de <HAL_TIM_PWM_Start+0xaa>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d104      	bne.n	80048d6 <HAL_TIM_PWM_Start+0xa2>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d4:	e003      	b.n	80048de <HAL_TIM_PWM_Start+0xaa>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2201      	movs	r2, #1
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fca0 	bl	800522c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1e      	ldr	r2, [pc, #120]	; (800496c <HAL_TIM_PWM_Start+0x138>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d107      	bne.n	8004906 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004904:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a18      	ldr	r2, [pc, #96]	; (800496c <HAL_TIM_PWM_Start+0x138>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_TIM_PWM_Start+0xfa>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004918:	d009      	beq.n	800492e <HAL_TIM_PWM_Start+0xfa>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a14      	ldr	r2, [pc, #80]	; (8004970 <HAL_TIM_PWM_Start+0x13c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_TIM_PWM_Start+0xfa>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a12      	ldr	r2, [pc, #72]	; (8004974 <HAL_TIM_PWM_Start+0x140>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d111      	bne.n	8004952 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b06      	cmp	r3, #6
 800493e:	d010      	beq.n	8004962 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004950:	e007      	b.n	8004962 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0201 	orr.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800

08004978 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2200      	movs	r2, #0
 8004988:	6839      	ldr	r1, [r7, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fc4e 	bl	800522c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a29      	ldr	r2, [pc, #164]	; (8004a3c <HAL_TIM_PWM_Stop+0xc4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d117      	bne.n	80049ca <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10f      	bne.n	80049ca <HAL_TIM_PWM_Stop+0x52>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6a1a      	ldr	r2, [r3, #32]
 80049b0:	f240 4344 	movw	r3, #1092	; 0x444
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d107      	bne.n	80049ca <HAL_TIM_PWM_Stop+0x52>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a1a      	ldr	r2, [r3, #32]
 80049d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10f      	bne.n	80049fa <HAL_TIM_PWM_Stop+0x82>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6a1a      	ldr	r2, [r3, #32]
 80049e0:	f240 4344 	movw	r3, #1092	; 0x444
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d107      	bne.n	80049fa <HAL_TIM_PWM_Stop+0x82>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <HAL_TIM_PWM_Stop+0x92>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a08:	e013      	b.n	8004a32 <HAL_TIM_PWM_Stop+0xba>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d104      	bne.n	8004a1a <HAL_TIM_PWM_Stop+0xa2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a18:	e00b      	b.n	8004a32 <HAL_TIM_PWM_Stop+0xba>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d104      	bne.n	8004a2a <HAL_TIM_PWM_Stop+0xb2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a28:	e003      	b.n	8004a32 <HAL_TIM_PWM_Stop+0xba>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40012c00 	.word	0x40012c00

08004a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e0ac      	b.n	8004bb4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b0c      	cmp	r3, #12
 8004a66:	f200 809f 	bhi.w	8004ba8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004a6a:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004aa5 	.word	0x08004aa5
 8004a74:	08004ba9 	.word	0x08004ba9
 8004a78:	08004ba9 	.word	0x08004ba9
 8004a7c:	08004ba9 	.word	0x08004ba9
 8004a80:	08004ae5 	.word	0x08004ae5
 8004a84:	08004ba9 	.word	0x08004ba9
 8004a88:	08004ba9 	.word	0x08004ba9
 8004a8c:	08004ba9 	.word	0x08004ba9
 8004a90:	08004b27 	.word	0x08004b27
 8004a94:	08004ba9 	.word	0x08004ba9
 8004a98:	08004ba9 	.word	0x08004ba9
 8004a9c:	08004ba9 	.word	0x08004ba9
 8004aa0:	08004b67 	.word	0x08004b67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 f9a0 	bl	8004df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0208 	orr.w	r2, r2, #8
 8004abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0204 	bic.w	r2, r2, #4
 8004ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6999      	ldr	r1, [r3, #24]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	691a      	ldr	r2, [r3, #16]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	619a      	str	r2, [r3, #24]
      break;
 8004ae2:	e062      	b.n	8004baa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f9e6 	bl	8004ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6999      	ldr	r1, [r3, #24]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	021a      	lsls	r2, r3, #8
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	619a      	str	r2, [r3, #24]
      break;
 8004b24:	e041      	b.n	8004baa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fa2f 	bl	8004f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0208 	orr.w	r2, r2, #8
 8004b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0204 	bic.w	r2, r2, #4
 8004b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69d9      	ldr	r1, [r3, #28]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	61da      	str	r2, [r3, #28]
      break;
 8004b64:	e021      	b.n	8004baa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fa79 	bl	8005064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69d9      	ldr	r1, [r3, #28]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	021a      	lsls	r2, r3, #8
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	61da      	str	r2, [r3, #28]
      break;
 8004ba6:	e000      	b.n	8004baa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ba8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_TIM_ConfigClockSource+0x18>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e0a6      	b.n	8004d22 <HAL_TIM_ConfigClockSource+0x166>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b40      	cmp	r3, #64	; 0x40
 8004c0a:	d067      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0x120>
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d80b      	bhi.n	8004c28 <HAL_TIM_ConfigClockSource+0x6c>
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d073      	beq.n	8004cfc <HAL_TIM_ConfigClockSource+0x140>
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d802      	bhi.n	8004c1e <HAL_TIM_ConfigClockSource+0x62>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d06f      	beq.n	8004cfc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c1c:	e078      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d06c      	beq.n	8004cfc <HAL_TIM_ConfigClockSource+0x140>
 8004c22:	2b30      	cmp	r3, #48	; 0x30
 8004c24:	d06a      	beq.n	8004cfc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c26:	e073      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c28:	2b70      	cmp	r3, #112	; 0x70
 8004c2a:	d00d      	beq.n	8004c48 <HAL_TIM_ConfigClockSource+0x8c>
 8004c2c:	2b70      	cmp	r3, #112	; 0x70
 8004c2e:	d804      	bhi.n	8004c3a <HAL_TIM_ConfigClockSource+0x7e>
 8004c30:	2b50      	cmp	r3, #80	; 0x50
 8004c32:	d033      	beq.n	8004c9c <HAL_TIM_ConfigClockSource+0xe0>
 8004c34:	2b60      	cmp	r3, #96	; 0x60
 8004c36:	d041      	beq.n	8004cbc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c38:	e06a      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3e:	d066      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0x152>
 8004c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c44:	d017      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c46:	e063      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	6899      	ldr	r1, [r3, #8]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f000 fac9 	bl	80051ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	609a      	str	r2, [r3, #8]
      break;
 8004c74:	e04c      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6899      	ldr	r1, [r3, #8]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f000 fab2 	bl	80051ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c98:	609a      	str	r2, [r3, #8]
      break;
 8004c9a:	e039      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	6859      	ldr	r1, [r3, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f000 fa29 	bl	8005100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2150      	movs	r1, #80	; 0x50
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fa80 	bl	80051ba <TIM_ITRx_SetConfig>
      break;
 8004cba:	e029      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6859      	ldr	r1, [r3, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f000 fa47 	bl	800515c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2160      	movs	r1, #96	; 0x60
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fa70 	bl	80051ba <TIM_ITRx_SetConfig>
      break;
 8004cda:	e019      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6859      	ldr	r1, [r3, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f000 fa09 	bl	8005100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2140      	movs	r1, #64	; 0x40
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fa60 	bl	80051ba <TIM_ITRx_SetConfig>
      break;
 8004cfa:	e009      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f000 fa57 	bl	80051ba <TIM_ITRx_SetConfig>
        break;
 8004d0c:	e000      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a29      	ldr	r2, [pc, #164]	; (8004de4 <TIM_Base_SetConfig+0xb8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <TIM_Base_SetConfig+0x30>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4a:	d007      	beq.n	8004d5c <TIM_Base_SetConfig+0x30>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a26      	ldr	r2, [pc, #152]	; (8004de8 <TIM_Base_SetConfig+0xbc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <TIM_Base_SetConfig+0x30>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a25      	ldr	r2, [pc, #148]	; (8004dec <TIM_Base_SetConfig+0xc0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d108      	bne.n	8004d6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a1c      	ldr	r2, [pc, #112]	; (8004de4 <TIM_Base_SetConfig+0xb8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00b      	beq.n	8004d8e <TIM_Base_SetConfig+0x62>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7c:	d007      	beq.n	8004d8e <TIM_Base_SetConfig+0x62>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <TIM_Base_SetConfig+0xbc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d003      	beq.n	8004d8e <TIM_Base_SetConfig+0x62>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a18      	ldr	r2, [pc, #96]	; (8004dec <TIM_Base_SetConfig+0xc0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d108      	bne.n	8004da0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a07      	ldr	r2, [pc, #28]	; (8004de4 <TIM_Base_SetConfig+0xb8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d103      	bne.n	8004dd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	615a      	str	r2, [r3, #20]
}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40000800 	.word	0x40000800

08004df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 0302 	bic.w	r3, r3, #2
 8004e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <TIM_OC1_SetConfig+0xc8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d10c      	bne.n	8004e66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0308 	bic.w	r3, r3, #8
 8004e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <TIM_OC1_SetConfig+0xc8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d111      	bne.n	8004e92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	621a      	str	r2, [r3, #32]
}
 8004eac:	bf00      	nop
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40012c00 	.word	0x40012c00

08004ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f023 0210 	bic.w	r2, r3, #16
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0320 	bic.w	r3, r3, #32
 8004f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <TIM_OC2_SetConfig+0xd0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d10d      	bne.n	8004f38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a14      	ldr	r2, [pc, #80]	; (8004f8c <TIM_OC2_SetConfig+0xd0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d113      	bne.n	8004f68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	40012c00 	.word	0x40012c00

08004f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1d      	ldr	r2, [pc, #116]	; (8005060 <TIM_OC3_SetConfig+0xd0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10d      	bne.n	800500a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a14      	ldr	r2, [pc, #80]	; (8005060 <TIM_OC3_SetConfig+0xd0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d113      	bne.n	800503a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	621a      	str	r2, [r3, #32]
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40012c00 	.word	0x40012c00

08005064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	021b      	lsls	r3, r3, #8
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	031b      	lsls	r3, r3, #12
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a0f      	ldr	r2, [pc, #60]	; (80050fc <TIM_OC4_SetConfig+0x98>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d109      	bne.n	80050d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	019b      	lsls	r3, r3, #6
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	40012c00 	.word	0x40012c00

08005100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f023 0201 	bic.w	r2, r3, #1
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800512a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f023 030a 	bic.w	r3, r3, #10
 800513c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	621a      	str	r2, [r3, #32]
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f023 0210 	bic.w	r2, r3, #16
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005186:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	031b      	lsls	r3, r3, #12
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005198:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	621a      	str	r2, [r3, #32]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr

080051ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f043 0307 	orr.w	r3, r3, #7
 80051dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	609a      	str	r2, [r3, #8]
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr

080051ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b087      	sub	sp, #28
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005208:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	021a      	lsls	r2, r3, #8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	431a      	orrs	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4313      	orrs	r3, r2
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	609a      	str	r2, [r3, #8]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	2201      	movs	r2, #1
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1a      	ldr	r2, [r3, #32]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	43db      	mvns	r3, r3
 800524e:	401a      	ands	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1a      	ldr	r2, [r3, #32]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	fa01 f303 	lsl.w	r3, r1, r3
 8005264:	431a      	orrs	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005288:	2302      	movs	r3, #2
 800528a:	e046      	b.n	800531a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a16      	ldr	r2, [pc, #88]	; (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00e      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d009      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a12      	ldr	r2, [pc, #72]	; (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a10      	ldr	r2, [pc, #64]	; (800532c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d10c      	bne.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr
 8005324:	40012c00 	.word	0x40012c00
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800

08005330 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005348:	2302      	movs	r3, #2
 800534a:	e03d      	b.n	80053c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e03f      	b.n	8005464 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d106      	bne.n	80053fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fc fc81 	bl	8001d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2224      	movs	r2, #36	; 0x24
 8005402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005414:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f904 	bl	8005624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800542a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695a      	ldr	r2, [r3, #20]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800543a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800544a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b20      	cmp	r3, #32
 800548a:	d17c      	bne.n	8005586 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_UART_Transmit+0x2c>
 8005492:	88fb      	ldrh	r3, [r7, #6]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e075      	b.n	8005588 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_UART_Transmit+0x3e>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e06e      	b.n	8005588 <HAL_UART_Transmit+0x11c>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2221      	movs	r2, #33	; 0x21
 80054bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80054c0:	f7fc fcf6 	bl	8001eb0 <HAL_GetTick>
 80054c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	88fa      	ldrh	r2, [r7, #6]
 80054ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054da:	d108      	bne.n	80054ee <HAL_UART_Transmit+0x82>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d104      	bne.n	80054ee <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	e003      	b.n	80054f6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80054fe:	e02a      	b.n	8005556 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2200      	movs	r2, #0
 8005508:	2180      	movs	r1, #128	; 0x80
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f840 	bl	8005590 <UART_WaitOnFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e036      	b.n	8005588 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10b      	bne.n	8005538 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800552e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	3302      	adds	r3, #2
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	e007      	b.n	8005548 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	781a      	ldrb	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3301      	adds	r3, #1
 8005546:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1cf      	bne.n	8005500 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2200      	movs	r2, #0
 8005568:	2140      	movs	r1, #64	; 0x40
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 f810 	bl	8005590 <UART_WaitOnFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e006      	b.n	8005588 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	e000      	b.n	8005588 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005586:	2302      	movs	r3, #2
  }
}
 8005588:	4618      	mov	r0, r3
 800558a:	3720      	adds	r7, #32
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a0:	e02c      	b.n	80055fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d028      	beq.n	80055fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d007      	beq.n	80055c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055b0:	f7fc fc7e 	bl	8001eb0 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d21d      	bcs.n	80055fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695a      	ldr	r2, [r3, #20]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e00f      	b.n	800561c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	4013      	ands	r3, r2
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	429a      	cmp	r2, r3
 800560a:	bf0c      	ite	eq
 800560c:	2301      	moveq	r3, #1
 800560e:	2300      	movne	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	429a      	cmp	r2, r3
 8005618:	d0c3      	beq.n	80055a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800565e:	f023 030c 	bic.w	r3, r3, #12
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	430b      	orrs	r3, r1
 800566a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a2c      	ldr	r2, [pc, #176]	; (8005738 <UART_SetConfig+0x114>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d103      	bne.n	8005694 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800568c:	f7fe ff42 	bl	8004514 <HAL_RCC_GetPCLK2Freq>
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	e002      	b.n	800569a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005694:	f7fe ff2a 	bl	80044ec <HAL_RCC_GetPCLK1Freq>
 8005698:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	009a      	lsls	r2, r3, #2
 80056a4:	441a      	add	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <UART_SetConfig+0x118>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	0119      	lsls	r1, r3, #4
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	009a      	lsls	r2, r3, #2
 80056c4:	441a      	add	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80056d0:	4b1a      	ldr	r3, [pc, #104]	; (800573c <UART_SetConfig+0x118>)
 80056d2:	fba3 0302 	umull	r0, r3, r3, r2
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	2064      	movs	r0, #100	; 0x64
 80056da:	fb00 f303 	mul.w	r3, r0, r3
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	3332      	adds	r3, #50	; 0x32
 80056e4:	4a15      	ldr	r2, [pc, #84]	; (800573c <UART_SetConfig+0x118>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056f0:	4419      	add	r1, r3
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009a      	lsls	r2, r3, #2
 80056fc:	441a      	add	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	fbb2 f2f3 	udiv	r2, r2, r3
 8005708:	4b0c      	ldr	r3, [pc, #48]	; (800573c <UART_SetConfig+0x118>)
 800570a:	fba3 0302 	umull	r0, r3, r3, r2
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	2064      	movs	r0, #100	; 0x64
 8005712:	fb00 f303 	mul.w	r3, r0, r3
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	3332      	adds	r3, #50	; 0x32
 800571c:	4a07      	ldr	r2, [pc, #28]	; (800573c <UART_SetConfig+0x118>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	f003 020f 	and.w	r2, r3, #15
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	440a      	add	r2, r1
 800572e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40013800 	.word	0x40013800
 800573c:	51eb851f 	.word	0x51eb851f

08005740 <__libc_init_array>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	2500      	movs	r5, #0
 8005744:	4e0c      	ldr	r6, [pc, #48]	; (8005778 <__libc_init_array+0x38>)
 8005746:	4c0d      	ldr	r4, [pc, #52]	; (800577c <__libc_init_array+0x3c>)
 8005748:	1ba4      	subs	r4, r4, r6
 800574a:	10a4      	asrs	r4, r4, #2
 800574c:	42a5      	cmp	r5, r4
 800574e:	d109      	bne.n	8005764 <__libc_init_array+0x24>
 8005750:	f000 f82e 	bl	80057b0 <_init>
 8005754:	2500      	movs	r5, #0
 8005756:	4e0a      	ldr	r6, [pc, #40]	; (8005780 <__libc_init_array+0x40>)
 8005758:	4c0a      	ldr	r4, [pc, #40]	; (8005784 <__libc_init_array+0x44>)
 800575a:	1ba4      	subs	r4, r4, r6
 800575c:	10a4      	asrs	r4, r4, #2
 800575e:	42a5      	cmp	r5, r4
 8005760:	d105      	bne.n	800576e <__libc_init_array+0x2e>
 8005762:	bd70      	pop	{r4, r5, r6, pc}
 8005764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005768:	4798      	blx	r3
 800576a:	3501      	adds	r5, #1
 800576c:	e7ee      	b.n	800574c <__libc_init_array+0xc>
 800576e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005772:	4798      	blx	r3
 8005774:	3501      	adds	r5, #1
 8005776:	e7f2      	b.n	800575e <__libc_init_array+0x1e>
 8005778:	08005890 	.word	0x08005890
 800577c:	08005890 	.word	0x08005890
 8005780:	08005890 	.word	0x08005890
 8005784:	08005894 	.word	0x08005894

08005788 <memcpy>:
 8005788:	b510      	push	{r4, lr}
 800578a:	1e43      	subs	r3, r0, #1
 800578c:	440a      	add	r2, r1
 800578e:	4291      	cmp	r1, r2
 8005790:	d100      	bne.n	8005794 <memcpy+0xc>
 8005792:	bd10      	pop	{r4, pc}
 8005794:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005798:	f803 4f01 	strb.w	r4, [r3, #1]!
 800579c:	e7f7      	b.n	800578e <memcpy+0x6>

0800579e <memset>:
 800579e:	4603      	mov	r3, r0
 80057a0:	4402      	add	r2, r0
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d100      	bne.n	80057a8 <memset+0xa>
 80057a6:	4770      	bx	lr
 80057a8:	f803 1b01 	strb.w	r1, [r3], #1
 80057ac:	e7f9      	b.n	80057a2 <memset+0x4>
	...

080057b0 <_init>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	bf00      	nop
 80057b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b6:	bc08      	pop	{r3}
 80057b8:	469e      	mov	lr, r3
 80057ba:	4770      	bx	lr

080057bc <_fini>:
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057be:	bf00      	nop
 80057c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c2:	bc08      	pop	{r3}
 80057c4:	469e      	mov	lr, r3
 80057c6:	4770      	bx	lr
